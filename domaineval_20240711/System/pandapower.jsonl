{"method_name": "get_indices", "full_method_name": "get_indices", "method_path": "../srcdata/System/pandapower/pandapower/auxiliary.py", "method_code": "import copy\nfrom collections.abc import MutableMapping\nimport warnings\nfrom importlib.metadata import version as version_str\nfrom importlib.metadata import PackageNotFoundError\nfrom typing_extensions import deprecated\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nimport numbers\nfrom packaging.version import Version\nimport logging\nfrom numba import jit\ndef get_indices(selection, lookup, fused_indices=True):\n    \"\"\"\n    Helper function during pd2mpc conversion. It resolves the mapping from a\n    given selection of indices to the actual indices, using a dict lookup being\n    passed as well.\n\n    :param selection: Indices we want to select\n    :param lookup: The mapping itself\n    :param fused_indices: Flag which way the conversion is working.\n    :return:\n    \"\"\"\n    if fused_indices:\n        return np.array([lookup[k] for k in selection], dtype=np.int64)\n    else:\n        return np.array([lookup['before_fuse'][k] for k in selection],\n            dtype=np.int64)", "test_code_list": [{"test_code": "import pytest\nimport gc\nimport copy\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport shapely.geometry\ndef test_get_indices():\n    a = [(i + 100) for i in range(10)]\n    lookup = {idx: pos for pos, idx in enumerate(a)}\n    lookup['before_fuse'] = a\n    result = get_indices([102, 107], lookup, fused_indices=True)\n    assert np.array_equal(result, [2, 7])\n    result = get_indices([2, 7], lookup, fused_indices=False)\n    assert np.array_equal(result, [102, 107])\n    lookup[107] = lookup[102]\n    result = get_indices([102, 107], lookup, fused_indices=True)\n    assert np.array_equal(result, [2, 2])\n    result = get_indices([2, 7], lookup, fused_indices=False)\n    assert np.array_equal(result, [102, 107])\n\ntest_get_indices()\n", "code_start": "", "test_path": "../srcdata/System/pandapower/pandapower/test/api/test_auxiliary.py"}], "instruction": "Functionality: The function \"get_indices\" is designed to assist in the conversion process from pandas DataFrame to Model Predictive Control (MPC) format. It resolves the mapping from a given selection of indices to the actual indices by utilizing a provided dictionary lookup. The function supports two modes of operation based on the \"fused_indices\" flag.\n\nInputs: \n- selection: A list or array of indices that the user wants to select from the lookup table.\n- lookup: A dictionary that maps the selected indices to their actual indices. It can optionally contain a 'before_fuse' key for reverse mapping when \"fused_indices\" is False.\n- fused_indices: A boolean flag that determines the direction of the index conversion. If True, the function performs a forward mapping from the selection to the actual indices using the 'lookup' dictionary. If False, it performs a reverse mapping using the 'lookup' dictionary's 'before_fuse' key.\n\nOutputs:\n- A NumPy array containing the resolved indices based on the input selection and the lookup table. The data type of the output array is np.int64.", "method_code_mask": "import copy\nfrom collections.abc import MutableMapping\nimport warnings\nfrom importlib.metadata import version as version_str\nfrom importlib.metadata import PackageNotFoundError\nfrom typing_extensions import deprecated\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nimport numbers\nfrom packaging.version import Version\nimport logging\nfrom numba import jit\n\n\ndef get_indices(selection, lookup, fused_indices=True): [MASK]\n"}
{"method_name": "_convert_xy_epsg", "full_method_name": "_convert_xy_epsg", "method_path": "../srcdata/System/pandapower/pandapower/plotting/geo.py", "method_code": "from typing import List\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import Dict\nfrom typing import Any\nfrom typing import Union\nimport numpy as np\nfrom typing_extensions import deprecated\nimport sys\nimport math\nimport pandas as pd\nfrom numpy import array\nimport logging\nfrom shapely.geometry import Point\nfrom shapely.geometry import LineString\nfrom geopandas import GeoDataFrame\nfrom geopandas import GeoSeries\nfrom pyproj import Transformer\ntry:\n    from pyproj import Transformer\n    pyproj_INSTALLED = True\nexcept ImportError:\n    pyproj_INSTALLED = False\ndef _convert_xy_epsg(x, y, epsg_in=4326, epsg_out=31467):\n    \"\"\"\n    Converts the given x and y coordinates according to the defined epsg projections.\n    :param x: x-values of coordinates\n    :type x: iterable\n    :param y: y-values of coordinates\n    :type y: iterable\n    :param epsg_in: current epsg projection\n    :type epsg_in: int, default 4326 (= WGS84)\n    :param epsg_out: epsg projection to be transformed to\n    :type epsg_out: int, default 31467 (= Gauss-Kr\u00fcger Zone 3)\n    :return: transformed_coords - x and y values in new coordinate system\n    \"\"\"\n    if not pyproj_INSTALLED:\n        soft_dependency_error(str(sys._getframe().f_code.co_name) + '()',\n            'pyproj')\n    transformer = Transformer.from_crs(f'EPSG:{epsg_in}',\n        f'EPSG:{epsg_out}', always_xy=True)\n    return transformer.transform(x, y)", "test_code_list": [{"test_code": "import os\nimport math\nimport copy\nimport pandas as pd\nimport pytest\nfrom geopandas import testing\nfrom shapely.geometry import Point\nfrom shapely.geometry import LineString\nfrom geopandas import GeoDataFrame\nfrom geopandas import points_from_xy\ndef test__convert_xy_epsg():\n    x = 9.487\n    y = 51.32\n    result = _convert_xy_epsg(x, y, 4326, 31467)\n    expected = 3534023, 5687359\n    assert result == pytest.approx(expected)\n    result = _convert_xy_epsg(x, y, 4326, 3857)\n    expected = 1056088, 6678094\n    assert result == pytest.approx(expected)\n    x = 3534023\n    y = 5687359\n    result = _convert_xy_epsg(x, y, 31467, 4326)\n    expected = 9.487, 51.32\n    assert result == pytest.approx(expected, abs=0.001)\n    x = [9.487, 9]\n    y = [51.32, 51]\n    result_x, result_y = _convert_xy_epsg(x, y, 4326, 31467)\n    expected_x, expected_y = [3534023, 3500073], [5687359, 5651645]\n    assert result_x == pytest.approx(expected_x)\n    assert result_y == pytest.approx(expected_y)\n\ntest__convert_xy_epsg()\n", "code_start": "", "test_path": "../srcdata/System/pandapower/pandapower/test/plotting/test_geo.py"}], "instruction": "Functionality: The function _convert_xy_epsg is designed to transform geographic coordinates from one coordinate reference system (CRS) to another. It performs this operation using the pyproj library, which supports a wide range of geographic projections. The function accepts x and y coordinates as inputs, along with the EPSG codes representing the input and output CRSs, and returns the transformed coordinates.\n\nInputs:\n- x: An iterable containing the x-values of the coordinates to be transformed.\n- y: An iterable containing the y-values of the coordinates to be transformed.\n- epsg_in: An integer representing the EPSG code of the current CRS of the input coordinates. Default is 4326 (WGS84).\n- epsg_out: An integer representing the EPSG code of the CRS to which the input coordinates should be transformed. Default is 31467 (Gauss-Krueger Zone 3).\n\nOutputs:\n- transformed_coords: A tuple containing the transformed x and y values in the new coordinate system.", "method_code_mask": "from typing import List\nfrom typing import Tuple\nfrom typing import TYPE_CHECKING\nfrom typing import Dict\nfrom typing import Any\nfrom typing import Union\nimport numpy as np\nfrom typing_extensions import deprecated\nimport sys\nimport math\nimport pandas as pd\nfrom numpy import array\nimport logging\nfrom shapely.geometry import Point\nfrom shapely.geometry import LineString\nfrom geopandas import GeoDataFrame\nfrom geopandas import GeoSeries\nfrom pyproj import Transformer\ntry:\n    from pyproj import Transformer\n    pyproj_INSTALLED = True\nexcept ImportError:\n    pyproj_INSTALLED = False\n\n\ndef _convert_xy_epsg(x, y, epsg_in=4326, epsg_out=31467): [MASK]\n"}

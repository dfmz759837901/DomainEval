{"method_name": "get_closest", "full_method_name": "get_closest", "method_path": "../srcdata/System/thefuck/thefuck/utils.py", "method_code": "import atexit\nimport os\nimport pickle\nimport re\nimport shelve\nimport sys\nimport six\nfrom decorator import decorator\nfrom difflib import get_close_matches as difflib_get_close_matches\nfrom functools import wraps\nimport dbm\nfrom shutil import which\nfrom importlib.metadata import version\nimport pkg_resources\ndef get_closest(word, possibilities, cutoff=0.6, fallback_to_first=True):\n    \"\"\"Returns closest match or just first from possibilities.\"\"\"\n    possibilities = list(possibilities)\n    try:\n        return difflib_get_close_matches(word, possibilities, 1, cutoff)[0]\n    except IndexError:\n        if fallback_to_first:\n            return possibilities[0]", "test_code_list": [{"test_code": "import pytest\nimport warnings\n\nclass TestGetClosest(object):\n    def test_when_can_match(self):\n        assert 'branch' == get_closest('brnch', ['branch', 'status'])\n    \nTestGetClosest().test_when_can_match()\n", "code_start": "", "test_path": "../srcdata/System/thefuck/tests/test_utils.py"}, {"test_code": "import pytest\nimport warnings\n\nclass TestGetClosest(object):\n    def test_when_cant_match(self):\n        assert 'status' == get_closest('st', ['status', 'reset'])\n    \nTestGetClosest().test_when_cant_match()\n", "code_start": "", "test_path": "../srcdata/System/thefuck/tests/test_utils.py"}, {"test_code": "import pytest\nimport warnings\n\nclass TestGetClosest(object):\n    def test_without_fallback(self):\n        assert get_closest('st', ['status', 'reset'], fallback_to_first=False\n            ) is None\n    \nTestGetClosest().test_without_fallback()\n", "code_start": "", "test_path": "../srcdata/System/thefuck/tests/test_utils.py"}], "instruction": "Functionality: The get_closest function is designed to find the closest match of a given word among a list of possibilities. If the closest match with a similarity score higher than or equal to the cutoff is found, it returns that match. If no match meets the cutoff criteria and fallback_to_first is set to True, the function will return the first item from the possibilities list.\n\nInputs:\n- word (str): The word for which to find the closest match.\n- possibilities (iterable): An iterable containing the list of words to compare against.\n- cutoff (float, optional): The similarity score cutoff for considering a match. Defaults to 0.6.\n- fallback_to_first (bool, optional): A flag indicating whether to return the first item from the possibilities list if no match meets the cutoff criteria. Defaults to True.\n\nOutputs:\n- str: The closest match if one is found and meets the cutoff criteria, or the first item from the possibilities list if fallback_to_first is True and no match meets the criteria. If fallback_to_first is False and no match meets the criteria, the output will be None.", "method_code_mask": "import atexit\nimport os\nimport pickle\nimport re\nimport shelve\nimport sys\nimport six\nfrom decorator import decorator\nfrom difflib import get_close_matches as difflib_get_close_matches\nfrom functools import wraps\nimport dbm\nfrom shutil import which\nfrom importlib.metadata import version\nimport pkg_resources\n\n\ndef get_closest(word, possibilities, cutoff=0.6, fallback_to_first=True): [MASK\n    ]\n"}
{"method_name": "_get_suggestions", "full_method_name": "_get_suggestions", "method_path": "../srcdata/System/thefuck/thefuck/rules/brew_install.py", "method_code": "import re\ndef _get_suggestions(str):\n    suggestions = str.replace(' or ', ', ').split(', ')\n    return suggestions", "test_code_list": [{"test_code": "import pytest\ndef test_suggestions():\n    assert _get_suggestions('one') == ['one']\n    assert _get_suggestions('one or two') == ['one', 'two']\n    assert _get_suggestions('one, two or three') == ['one', 'two', 'three']\n\ntest_suggestions()\n", "code_start": "", "test_path": "../srcdata/System/thefuck/tests/rules/test_brew_install.py"}], "instruction": "Functionality: The function _get_suggestions is designed to process a given string that contains suggestions separated by commas and/or the phrase ' or '. It should convert this string into a list of individual suggestions. This is accomplished by replacing ' or ' with a comma, then splitting the string based on commas followed by spaces.\n\nInputs: A single string argument 'str' that contains suggestions separated by commas and/or the phrase ' or '.\n\nOutputs: A list of strings, where each string is an individual suggestion extracted from the input string.", "method_code_mask": "import re\n\n\ndef _get_suggestions(str): [MASK]\n"}

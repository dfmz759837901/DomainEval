{"method_name": "makeelement", "full_method_name": "makeelement", "method_path": "../srcdata/System/python-docx/docx.py", "method_code": "import os\nimport re\nimport time\nimport shutil\nimport zipfile\nfrom lxml import etree\nfrom os.path import abspath\nfrom os.path import basename\nfrom os.path import join\nfrom PIL import Image\nfrom PIL.ExifTags import TAGS\nfrom warnings import warn\nimport logging\nnsprefixes = {'mo':\n    'http://schemas.microsoft.com/office/mac/office/2008/main', 'o':\n    'urn:schemas-microsoft-com:office:office', 've':\n    'http://schemas.openxmlformats.org/markup-compatibility/2006', 'w':\n    'http://schemas.openxmlformats.org/wordprocessingml/2006/main', 'w10':\n    'urn:schemas-microsoft-com:office:word', 'wne':\n    'http://schemas.microsoft.com/office/word/2006/wordml', 'a':\n    'http://schemas.openxmlformats.org/drawingml/2006/main', 'm':\n    'http://schemas.openxmlformats.org/officeDocument/2006/math', 'mv':\n    'urn:schemas-microsoft-com:mac:vml', 'pic':\n    'http://schemas.openxmlformats.org/drawingml/2006/picture', 'v':\n    'urn:schemas-microsoft-com:vml', 'wp':\n    'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing',\n    'cp':\n    'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n    'dc': 'http://purl.org/dc/elements/1.1/', 'ep':\n    'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\n    , 'xsi': 'http://www.w3.org/2001/XMLSchema-instance', 'ct':\n    'http://schemas.openxmlformats.org/package/2006/content-types', 'r':\n    'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n    'pr': 'http://schemas.openxmlformats.org/package/2006/relationships',\n    'dcmitype': 'http://purl.org/dc/dcmitype/', 'dcterms':\n    'http://purl.org/dc/terms/'}\ndef makeelement(tagname, tagtext=None, nsprefix='w', attributes=None,\n    attrnsprefix=None):\n    \"\"\"Create an element & return it\"\"\"\n    namespacemap = None\n    if isinstance(nsprefix, list):\n        namespacemap = {}\n        for prefix in nsprefix:\n            namespacemap[prefix] = nsprefixes[prefix]\n        nsprefix = nsprefix[0]\n    if nsprefix:\n        namespace = '{%s}' % nsprefixes[nsprefix]\n    else:\n        namespace = ''\n    newelement = etree.Element(namespace + tagname, nsmap=namespacemap)\n    if attributes:\n        if not attrnsprefix:\n            if nsprefix == 'w':\n                attributenamespace = namespace\n            else:\n                attributenamespace = ''\n        else:\n            attributenamespace = '{' + nsprefixes[attrnsprefix] + '}'\n        for tagattribute in attributes:\n            newelement.set(attributenamespace + tagattribute, attributes[\n                tagattribute])\n    if tagtext:\n        newelement.text = tagtext\n    return newelement", "test_code_list": [{"test_code": "import os\nimport lxml\nfrom docx import table\nimport shutil\ndef testmakeelement():\n    \"\"\"Ensure custom elements get created\"\"\"\n    testelement = makeelement('testname', attributes={'testattribute':\n        'testvalue'}, tagtext='testtagtext')\n    assert testelement.tag == '{http://schemas.openxmlformats.org/wordprocessingml/2006/main}testname'\n    assert testelement.attrib == {\n        '{http://schemas.openxmlformats.org/wordprocessingml/2006/main}testattribute'\n        : 'testvalue'}\n    assert testelement.text == 'testtagtext'\n\ntestmakeelement()\n", "code_start": "", "test_path": "../srcdata/System/python-docx/tests/test_docx.py"}], "instruction": "Functionality: The makeelement function creates an XML element with the specified tag name, text, namespace prefix, attributes, and attribute namespace prefix. This function is particularly useful in scenarios where XML documents need to be programmatically generated or modified.\n\nInputs: \n1. tagname (str): The name of the XML tag to create.\n2. tagtext (str, optional): The text content of the XML tag. Default is None.\n3. nsprefix (str or list, optional): The namespace prefix for the tag. If a list is provided, the first element is used for the tag and the others are included in the nsmap. Default is 'w'.\n4. attributes (dict, optional): A dictionary of attribute names and values to be added to the tag. Default is None.\n5. attrnsprefix (str, optional): The namespace prefix for the attributes. Default is None, which means attributes will be in the same namespace as the tag if nsprefix is 'w', or in no namespace otherwise.\n\nOutputs:\n1. etree.Element: The XML element created according to the specified parameters.", "method_code_mask": "import os\nimport re\nimport time\nimport shutil\nimport zipfile\nfrom lxml import etree\nfrom os.path import abspath\nfrom os.path import basename\nfrom os.path import join\nfrom PIL import Image\nfrom PIL.ExifTags import TAGS\nfrom warnings import warn\nimport logging\nnsprefixes = {'mo':\n    'http://schemas.microsoft.com/office/mac/office/2008/main', 'o':\n    'urn:schemas-microsoft-com:office:office', 've':\n    'http://schemas.openxmlformats.org/markup-compatibility/2006', 'w':\n    'http://schemas.openxmlformats.org/wordprocessingml/2006/main', 'w10':\n    'urn:schemas-microsoft-com:office:word', 'wne':\n    'http://schemas.microsoft.com/office/word/2006/wordml', 'a':\n    'http://schemas.openxmlformats.org/drawingml/2006/main', 'm':\n    'http://schemas.openxmlformats.org/officeDocument/2006/math', 'mv':\n    'urn:schemas-microsoft-com:mac:vml', 'pic':\n    'http://schemas.openxmlformats.org/drawingml/2006/picture', 'v':\n    'urn:schemas-microsoft-com:vml', 'wp':\n    'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing',\n    'cp':\n    'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n    'dc': 'http://purl.org/dc/elements/1.1/', 'ep':\n    'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\n    , 'xsi': 'http://www.w3.org/2001/XMLSchema-instance', 'ct':\n    'http://schemas.openxmlformats.org/package/2006/content-types', 'r':\n    'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n    'pr': 'http://schemas.openxmlformats.org/package/2006/relationships',\n    'dcmitype': 'http://purl.org/dc/dcmitype/', 'dcterms':\n    'http://purl.org/dc/terms/'}\n\n\ndef makeelement(tagname, tagtext=None, nsprefix='w', attributes=None,\n    attrnsprefix=None): [MASK]\n"}
{"method_name": "paragraph", "full_method_name": "paragraph", "method_path": "../srcdata/System/python-docx/docx.py", "method_code": "import os\nimport re\nimport time\nimport shutil\nimport zipfile\nfrom lxml import etree\nfrom os.path import abspath\nfrom os.path import basename\nfrom os.path import join\nfrom PIL import Image\nfrom PIL.ExifTags import TAGS\nfrom warnings import warn\nimport logging\nnsprefixes = {'mo':\n    'http://schemas.microsoft.com/office/mac/office/2008/main', 'o':\n    'urn:schemas-microsoft-com:office:office', 've':\n    'http://schemas.openxmlformats.org/markup-compatibility/2006', 'w':\n    'http://schemas.openxmlformats.org/wordprocessingml/2006/main', 'w10':\n    'urn:schemas-microsoft-com:office:word', 'wne':\n    'http://schemas.microsoft.com/office/word/2006/wordml', 'a':\n    'http://schemas.openxmlformats.org/drawingml/2006/main', 'm':\n    'http://schemas.openxmlformats.org/officeDocument/2006/math', 'mv':\n    'urn:schemas-microsoft-com:mac:vml', 'pic':\n    'http://schemas.openxmlformats.org/drawingml/2006/picture', 'v':\n    'urn:schemas-microsoft-com:vml', 'wp':\n    'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing',\n    'cp':\n    'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n    'dc': 'http://purl.org/dc/elements/1.1/', 'ep':\n    'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\n    , 'xsi': 'http://www.w3.org/2001/XMLSchema-instance', 'ct':\n    'http://schemas.openxmlformats.org/package/2006/content-types', 'r':\n    'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n    'pr': 'http://schemas.openxmlformats.org/package/2006/relationships',\n    'dcmitype': 'http://purl.org/dc/dcmitype/', 'dcterms':\n    'http://purl.org/dc/terms/'}\ndef makeelement(tagname, tagtext=None, nsprefix='w', attributes=None,\n    attrnsprefix=None):\n    \"\"\"Create an element & return it\"\"\"\n    namespacemap = None\n    if isinstance(nsprefix, list):\n        namespacemap = {}\n        for prefix in nsprefix:\n            namespacemap[prefix] = nsprefixes[prefix]\n        nsprefix = nsprefix[0]\n    if nsprefix:\n        namespace = '{%s}' % nsprefixes[nsprefix]\n    else:\n        namespace = ''\n    newelement = etree.Element(namespace + tagname, nsmap=namespacemap)\n    if attributes:\n        if not attrnsprefix:\n            if nsprefix == 'w':\n                attributenamespace = namespace\n            else:\n                attributenamespace = ''\n        else:\n            attributenamespace = '{' + nsprefixes[attrnsprefix] + '}'\n        for tagattribute in attributes:\n            newelement.set(attributenamespace + tagattribute, attributes[\n                tagattribute])\n    if tagtext:\n        newelement.text = tagtext\n    return newelement\ndef paragraph(paratext, style='BodyText', breakbefore=False, jc='left'):\n    \"\"\"\n    Return a new paragraph element containing *paratext*. The paragraph's\n    default style is 'Body Text', but a new style may be set using the\n    *style* parameter.\n    @param string jc: Paragraph alignment, possible values:\n                      left, center, right, both (justified), ...\n                      see http://www.schemacentral.com/sc/ooxml/t-w_ST_Jc.html\n                      for a full list\n    If *paratext* is a list, add a run for each (text, char_format_str)\n    2-tuple in the list. char_format_str is a string containing one or more\n    of the characters 'b', 'i', or 'u', meaning bold, italic, and underline\n    respectively. For example:\n        paratext = [\n            ('some bold text', 'b'),\n            ('some normal text', ''),\n            ('some italic underlined text', 'iu')\n        ]\n    \"\"\"\n    paragraph = makeelement('p')\n    if not isinstance(paratext, list):\n        paratext = [(paratext, '')]\n    text_tuples = []\n    for pt in paratext:\n        text, char_styles_str = pt if isinstance(pt, (list, tuple)) else (pt,\n            '')\n        text_elm = makeelement('t', tagtext=text)\n        if len(text.strip()) < len(text):\n            text_elm.set('{http://www.w3.org/XML/1998/namespace}space',\n                'preserve')\n        text_tuples.append([text_elm, char_styles_str])\n    pPr = makeelement('pPr')\n    pStyle = makeelement('pStyle', attributes={'val': style})\n    pJc = makeelement('jc', attributes={'val': jc})\n    pPr.append(pStyle)\n    pPr.append(pJc)\n    paragraph.append(pPr)\n    for text_elm, char_styles_str in text_tuples:\n        run = makeelement('r')\n        rPr = makeelement('rPr')\n        if 'b' in char_styles_str:\n            b = makeelement('b')\n            rPr.append(b)\n        if 'i' in char_styles_str:\n            i = makeelement('i')\n            rPr.append(i)\n        if 'u' in char_styles_str:\n            u = makeelement('u', attributes={'val': 'single'})\n            rPr.append(u)\n        run.append(rPr)\n        if breakbefore:\n            lastRenderedPageBreak = makeelement('lastRenderedPageBreak')\n            run.append(lastRenderedPageBreak)\n        run.append(text_elm)\n        paragraph.append(run)\n    return paragraph", "test_code_list": [{"test_code": "import os\nimport lxml\nfrom docx import table\nimport shutil\ndef testparagraph():\n    \"\"\"Ensure paragraph creates p elements\"\"\"\n    testpara = paragraph('paratext', style='BodyText')\n    assert testpara.tag == '{http://schemas.openxmlformats.org/wordprocessingml/2006/main}p'\n    pass\n\ntestparagraph()\n", "code_start": "", "test_path": "../srcdata/System/python-docx/tests/test_docx.py"}], "instruction": "Functionality: The paragraph function creates a new paragraph element containing the provided text. The paragraph can be styled with a specific style and text alignment. It supports adding runs with different character formatting such as bold, italic, and underline. If the text is provided as a list of tuples, each tuple can specify the text and its character formatting.\n\nInputs: \n- paratext: A string or a list of tuples containing the text to be added to the paragraph. Each tuple should contain the text and a string specifying the character formatting (e.g., 'b' for bold).\n- style: A string specifying the paragraph style. The default is 'BodyText'.\n- breakbefore: A boolean indicating whether to insert a page break before the paragraph. The default is False.\n- jc: A string specifying the paragraph alignment. Possible values include 'left', 'center', 'right', 'both' (justified), etc.\n\nOutputs:\n- Returns a new paragraph element containing the provided text and formatted according to the specified style and alignment. The paragraph element is created using the makeelement function.", "method_code_mask": "import os\nimport re\nimport time\nimport shutil\nimport zipfile\nfrom lxml import etree\nfrom os.path import abspath\nfrom os.path import basename\nfrom os.path import join\nfrom PIL import Image\nfrom PIL.ExifTags import TAGS\nfrom warnings import warn\nimport logging\nnsprefixes = {'mo':\n    'http://schemas.microsoft.com/office/mac/office/2008/main', 'o':\n    'urn:schemas-microsoft-com:office:office', 've':\n    'http://schemas.openxmlformats.org/markup-compatibility/2006', 'w':\n    'http://schemas.openxmlformats.org/wordprocessingml/2006/main', 'w10':\n    'urn:schemas-microsoft-com:office:word', 'wne':\n    'http://schemas.microsoft.com/office/word/2006/wordml', 'a':\n    'http://schemas.openxmlformats.org/drawingml/2006/main', 'm':\n    'http://schemas.openxmlformats.org/officeDocument/2006/math', 'mv':\n    'urn:schemas-microsoft-com:mac:vml', 'pic':\n    'http://schemas.openxmlformats.org/drawingml/2006/picture', 'v':\n    'urn:schemas-microsoft-com:vml', 'wp':\n    'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing',\n    'cp':\n    'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n    'dc': 'http://purl.org/dc/elements/1.1/', 'ep':\n    'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\n    , 'xsi': 'http://www.w3.org/2001/XMLSchema-instance', 'ct':\n    'http://schemas.openxmlformats.org/package/2006/content-types', 'r':\n    'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n    'pr': 'http://schemas.openxmlformats.org/package/2006/relationships',\n    'dcmitype': 'http://purl.org/dc/dcmitype/', 'dcterms':\n    'http://purl.org/dc/terms/'}\n\n\ndef makeelement(tagname, tagtext=None, nsprefix='w', attributes=None,\n    attrnsprefix=None):\n    \"\"\"Create an element & return it\"\"\"\n    namespacemap = None\n    if isinstance(nsprefix, list):\n        namespacemap = {}\n        for prefix in nsprefix:\n            namespacemap[prefix] = nsprefixes[prefix]\n        nsprefix = nsprefix[0]\n    if nsprefix:\n        namespace = '{%s}' % nsprefixes[nsprefix]\n    else:\n        namespace = ''\n    newelement = etree.Element(namespace + tagname, nsmap=namespacemap)\n    if attributes:\n        if not attrnsprefix:\n            if nsprefix == 'w':\n                attributenamespace = namespace\n            else:\n                attributenamespace = ''\n        else:\n            attributenamespace = '{' + nsprefixes[attrnsprefix] + '}'\n        for tagattribute in attributes:\n            newelement.set(attributenamespace + tagattribute, attributes[\n                tagattribute])\n    if tagtext:\n        newelement.text = tagtext\n    return newelement\n\n\ndef paragraph(paratext, style='BodyText', breakbefore=False, jc='left'): [MASK]\n"}

{"method_name": "translate_options", "full_method_name": "translate_options", "method_path": "../srcdata/Visualization/vaex/packages/vaex-core/vaex/file/s3fs.py", "method_code": "import pyarrow.fs\nimport warnings\ndef translate_options(fs_options):\n    fs_options = fs_options.copy()\n    not_supported = {'role_arn', 'session_name', 'external_id',\n        'load_frequency', 'background_writes', 'profile', 'profile_name'}\n    for key in not_supported:\n        if key in fs_options:\n            warnings.warn(\n                f'The option {key} is not supported using s3fs instead of arrow, so it will be ignored'\n                )\n            fs_options.pop(key)\n    if 'endpoint_override' in fs_options.keys():\n        if 'scheme' in fs_options.keys():\n            fs_options['endpoint_override'] = fs_options.pop('scheme'\n                ) + '://' + fs_options.pop('endpoint_override')\n        else:\n            fs_options['endpoint_override'] = 'https://' + fs_options.pop(\n                'endpoint_override')\n    mapping = {'anonymous': 'anon'}\n    for key in list(fs_options):\n        if key in mapping:\n            fs_options[mapping[key]] = fs_options.pop(key)\n    mapping = {'access_key': 'aws_access_key_id', 'secret_key':\n        'aws_secret_access_key', 'session_token': 'aws_session_token',\n        'region': 'region_name', 'endpoint_override': 'endpoint_url'}\n    fs_options['client_kwargs'] = fs_options.get('client_kwargs', {})\n    for key in list(fs_options):\n        if key in mapping:\n            fs_options['client_kwargs'][mapping[key]] = fs_options.pop(key)\n    return fs_options", "test_code_list": [{"test_code": "def test_translate():\n    assert translate_options({'anonymous': False, 'access_key': 'acces',\n        'secret_key': 'secret'}) == {'anon': False, 'client_kwargs': {\n        'aws_access_key_id': 'acces', 'aws_secret_access_key': 'secret'}}\n\ntest_translate()\n", "code_start": "", "test_path": "../srcdata/Visualization/vaex/packages/vaex-core/vaex/file/s3_test.py"}], "instruction": "Functionality: The translate_options function is designed to process a dictionary of filesystem options, adjusting and removing certain keys to ensure compatibility with s3fs instead of arrow when interacting with AWS S3. It also maps some keys to their corresponding client keyword arguments format.\n\nInputs:\n- fs_options: A dictionary containing filesystem options. Some of the keys may include 'role_arn', 'session_name', 'external_id', 'load_frequency', 'background_writes', 'profile', 'profile_name', 'endpoint_override', 'scheme', 'anonymous', 'access_key', 'secret_key', 'session_token', 'region', and 'client_kwargs'.\n\nOutputs:\n- A modified dictionary with unsupported keys removed, warnings issued for removed keys, endpoint_override reformatted if necessary, and certain keys mapped to their corresponding client keyword argument format. The function ensures that the final dictionary is compatible with s3fs.", "method_code_mask": "import pyarrow.fs\nimport warnings\n\n\ndef translate_options(fs_options): [MASK]\n"}

{"method_name": "get_single_color_func", "full_method_name": "get_single_color_func", "method_path": "../srcdata/Visualization/word_cloud/wordcloud/wordcloud.py", "method_code": "from __future__ import division\nimport warnings\nfrom random import Random\nimport io\nimport os\nimport re\nimport base64\nimport sys\nimport colorsys\nimport matplotlib\nimport numpy as np\nfrom operator import itemgetter\nfrom xml.sax import saxutils\nfrom PIL import Image\nfrom PIL import ImageColor\nfrom PIL import ImageDraw\nfrom PIL import ImageFilter\nfrom PIL import ImageFont\nimport matplotlib.pyplot as plt\nimport fontTools\nimport fontTools.subset\ndef get_single_color_func(color):\n    \"\"\"Create a color function which returns a single hue and saturation with.\n    different values (HSV). Accepted values are color strings as usable by\n    PIL/Pillow.\n\n    >>> color_func1 = get_single_color_func('deepskyblue')\n    >>> color_func2 = get_single_color_func('#00b4d2')\n    \"\"\"\n    old_r, old_g, old_b = ImageColor.getrgb(color)\n    rgb_max = 255.0\n    h, s, v = colorsys.rgb_to_hsv(old_r / rgb_max, old_g / rgb_max, old_b /\n        rgb_max)\n\n    def single_color_func(word=None, font_size=None, position=None,\n        orientation=None, font_path=None, random_state=None):\n        \"\"\"Random color generation.\n\n        Additional coloring method. It picks a random value with hue and\n        saturation based on the color given to the generating function.\n\n        Parameters\n        ----------\n        word, font_size, position, orientation  : ignored.\n\n        random_state : random.Random object or None, (default=None)\n          If a random object is given, this is used for generating random\n          numbers.\n\n        \"\"\"\n        if random_state is None:\n            random_state = Random()\n        r, g, b = colorsys.hsv_to_rgb(h, s, random_state.uniform(0.2, 1))\n        return 'rgb({:.0f}, {:.0f}, {:.0f})'.format(r * rgb_max, g *\n            rgb_max, b * rgb_max)\n    return single_color_func", "test_code_list": [{"test_code": "from wordcloud import WordCloud\nfrom wordcloud import get_single_color_func\nfrom wordcloud import ImageColorGenerator\nimport numpy as np\nimport pytest\nfrom random import Random\nfrom numpy.testing import assert_array_equal\nfrom PIL import Image\nimport xml.etree.ElementTree as ET\nimport matplotlib\ndef test_single_color_func():\n    random = Random(42)\n    red_function = get_single_color_func('red')\n    assert red_function(random_state=random) == 'rgb(181, 0, 0)'\n    hex_function = get_single_color_func('#00b4d2')\n    assert hex_function(random_state=random) == 'rgb(0, 48, 56)'\n    rgb_function = get_single_color_func('rgb(0,255,0)')\n    assert rgb_function(random_state=random) == 'rgb(0, 107, 0)'\n    rgb_perc_fun = get_single_color_func('rgb(80%,60%,40%)')\n    assert rgb_perc_fun(random_state=random) == 'rgb(97, 72, 48)'\n    hsl_function = get_single_color_func('hsl(0,100%,50%)')\n    assert hsl_function(random_state=random) == 'rgb(201, 0, 0)'\n\ntest_single_color_func()\n", "code_start": "", "test_path": "../srcdata/Visualization/word_cloud/test/test_wordcloud.py"}, {"test_code": "from wordcloud import WordCloud\nfrom wordcloud import get_single_color_func\nfrom wordcloud import ImageColorGenerator\nimport numpy as np\nimport pytest\nfrom random import Random\nfrom numpy.testing import assert_array_equal\nfrom PIL import Image\nimport xml.etree.ElementTree as ET\nimport matplotlib\ndef test_single_color_func_grey():\n    random = Random(42)\n    red_function = get_single_color_func('darkgrey')\n    assert red_function(random_state=random) == 'rgb(181, 181, 181)'\n    assert red_function(random_state=random) == 'rgb(56, 56, 56)'\n\ntest_single_color_func_grey()\n", "code_start": "", "test_path": "../srcdata/Visualization/word_cloud/test/test_wordcloud.py"}], "instruction": "Functionality: The get_single_color_func function creates a color function that returns a single hue and saturation with varying values in the HSV color space, based on the input color. The input color can be a color string recognizable by PIL/Pillow.\n\nInputs: \n- color: A string representing the color you want to use as the base for the generated color. This could be a color name (e.g., 'deepskyblue') or a hexadecimal color code (e.g., '#00b4d2').\n\nOutputs:\n- A function that, when called, generates a random color in RGB format based on the hue and saturation of the input color. The generated color will have the same hue and saturation as the input color but will vary in value, simulating a different shade or brightness of the original color. The function can take additional parameters (word, font_size, position, orientation, font_path, random_state), but they are ignored. The random_state parameter can be a Random object to control the randomness of the generated colors. If not provided, a default Random object is used.", "method_code_mask": "from __future__ import division\nimport warnings\nfrom random import Random\nimport io\nimport os\nimport re\nimport base64\nimport sys\nimport colorsys\nimport matplotlib\nimport numpy as np\nfrom operator import itemgetter\nfrom xml.sax import saxutils\nfrom PIL import Image\nfrom PIL import ImageColor\nfrom PIL import ImageDraw\nfrom PIL import ImageFilter\nfrom PIL import ImageFont\nimport matplotlib.pyplot as plt\nimport fontTools\nimport fontTools.subset\n\n\ndef get_single_color_func(color): [MASK]\n"}

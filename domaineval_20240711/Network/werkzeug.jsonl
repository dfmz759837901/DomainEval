{"method_name": "_make_proxy", "full_method_name": "_make_proxy", "method_path": "../srcdata/Network/werkzeug/tests/test_local.py", "method_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\n_cv_ns = ContextVar('werkzeug.tests.ns')\ndef _make_proxy(value):\n    ns = local.Local(_cv_ns)\n    ns.value = value\n    p = ns('value')\n    return ns, p", "test_code_list": [{"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_type():\n    _, p = _make_proxy([])\n    assert isinstance(p, list)\n    assert p.__class__ is list\n    assert issubclass(type(p), local.LocalProxy)\n    assert type(p) is local.LocalProxy\n\ntest_proxy_type()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_string_representations():\n\n\n    class Example:\n\n        def __repr__(self):\n            return 'a'\n\n        def __bytes__(self):\n            return b'b'\n\n        def __index__(self):\n            return 23\n    _, p = _make_proxy(Example())\n    assert str(p) == 'a'\n    assert repr(p) == 'a'\n    assert bytes(p) == b'b'\n    assert bin(p) == '0b10111'\n    assert oct(p) == '0o27'\n    assert hex(p) == '0x17'\n\ntest_proxy_string_representations()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_hash():\n    ns, p = _make_proxy('abc')\n    assert hash(ns.value) == hash(p)\n\ntest_proxy_hash()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_numeric():\n\n\n    class Example:\n\n        def __complex__(self):\n            return 1 + 2.0j\n\n        def __int__(self):\n            return 1\n\n        def __float__(self):\n            return 2.1\n\n        def __round__(self, n=None):\n            if n is not None:\n                return 3.3\n            return 3\n\n        def __trunc__(self):\n            return 4\n\n        def __floor__(self):\n            return 5\n\n        def __ceil__(self):\n            return 6\n\n        def __index__(self):\n            return 2\n    _, p = _make_proxy(Example())\n    assert complex(p) == 1 + 2.0j\n    assert int(p) == 1\n    assert float(p) == 2.1\n    assert round(p) == 3\n    assert round(p, 2) == 3.3\n    assert math.trunc(p) == 4\n    assert math.floor(p) == 5\n    assert math.ceil(p) == 6\n    assert [1, 2, 3][p] == 3\n\ntest_proxy_numeric()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_matmul():\n\n\n    class Example:\n\n        def __matmul__(self, other):\n            return 2 * other\n\n        def __rmatmul__(self, other):\n            return 2 * other\n    _, p = _make_proxy(Example())\n    assert p @ 3 == 6\n    assert 4 @ p == 8\n\ntest_proxy_matmul()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_str():\n    _, p = _make_proxy('{act} %s')\n    assert p + ' world' == '{act} %s world'\n    assert 'say ' + p == 'say {act} %s'\n    assert p * 2 == '{act} %s{act} %s'\n    assert 2 * p == p * 2\n    assert p % ('world',) == '{act} world'\n    assert p.format(act='test') == 'test %s'\n\ntest_proxy_str()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_list():\n    _, p = _make_proxy([1, 2, 3])\n    assert len(p) == 3\n    assert p[0] == 1\n    assert 3 in p\n    assert 4 not in p\n    assert tuple(p) == (1, 2, 3)\n    assert list(reversed(p)) == [3, 2, 1]\n    p[0] = 4\n    assert p == [4, 2, 3]\n    del p[-1]\n    assert p == [4, 2]\n    p += [5]\n    assert p[-1] == 5\n    p *= 2\n    assert len(p) == 6\n    p[:] = []\n    assert not p\n    p.append(1)\n    assert p\n    assert p + [2] == [1, 2]\n    assert [2] + p == [2, 1]\n\ntest_proxy_list()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_copy():\n\n\n    class Foo:\n\n        def __copy__(self):\n            return self\n\n        def __deepcopy__(self, memo):\n            return self\n    ns, p = _make_proxy(Foo())\n    assert copy.copy(p) is ns.value\n    assert copy.deepcopy(p) is ns.value\n    a = []\n    _, p = _make_proxy([a])\n    assert copy.copy(p) == [a]\n    assert copy.copy(p)[0] is a\n    assert copy.deepcopy(p) == [a]\n    assert copy.deepcopy(p)[0] is not a\n\ntest_proxy_copy()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_iterator():\n    a = [1, 2, 3]\n    _, p = _make_proxy(iter(a))\n    assert next(p) == 1\n\ntest_proxy_iterator()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_length_hint():\n\n\n    class Example:\n\n        def __length_hint__(self):\n            return 2\n    _, p = _make_proxy(Example())\n    assert operator.length_hint(p) == 2\n\ntest_proxy_length_hint()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_context_manager():\n\n\n    class Example:\n        value = 2\n\n        def __enter__(self):\n            self.value += 1\n            return self\n\n        def __exit__(self, exc_type, exc_val, exc_tb):\n            self.value -= 1\n    _, p = _make_proxy(Example())\n    assert p.value == 2\n    with p:\n        assert p.value == 3\n    assert p.value == 2\n\ntest_proxy_context_manager()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_class():\n\n\n    class Meta(type):\n\n        def __instancecheck__(cls, instance):\n            return True\n\n        def __subclasscheck__(cls, subclass):\n            return True\n\n\n    class Parent:\n        pass\n\n\n    class Example(Parent, metaclass=Meta):\n        pass\n\n\n    class Child(Example):\n        pass\n    _, p = _make_proxy(Example)\n    assert type(p()) is Example\n    assert isinstance(1, p)\n    assert issubclass(int, p)\n    assert p.__mro__ == (Example, Parent, object)\n    assert p.__bases__ == (Parent,)\n    assert p.__subclasses__() == [Child]\n\ntest_proxy_class()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_attributes():\n\n\n    class Example:\n\n        def __init__(self):\n            object.__setattr__(self, 'values', {})\n\n        def __getattribute__(self, name):\n            if name == 'ham':\n                return 'eggs'\n            return super().__getattribute__(name)\n\n        def __getattr__(self, name):\n            return self.values.get(name)\n\n        def __setattr__(self, name, value):\n            self.values[name] = value\n\n        def __delattr__(self, name):\n            del self.values[name]\n\n        def __dir__(self):\n            return sorted(self.values.keys())\n    _, p = _make_proxy(Example())\n    assert p.nothing is None\n    assert p.__dict__ == {'values': {}}\n    assert dir(p) == []\n    p.x = 1\n    assert p.x == 1\n    assert dir(p) == ['x']\n    del p.x\n    assert dir(p) == []\n    assert p.ham == 'eggs'\n    p.ham = 'spam'\n    assert p.ham == 'eggs'\n    assert p.values['ham'] == 'spam'\n\ntest_proxy_attributes()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_await():\n\n    async def get():\n        return 1\n    _, p = _make_proxy(get())\n\n    async def main():\n        return await p\n    out = asyncio.run(main())\n    assert out == 1\n\ntest_proxy_await()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_aiter():\n\n\n    class Example:\n        value = 3\n\n        def __aiter__(self):\n            return self\n\n        async def __anext__(self):\n            if self.value:\n                self.value -= 1\n                return self.value\n            raise StopAsyncIteration\n    _, p = _make_proxy(Example())\n\n    async def main():\n        out = []\n        async for v in p:\n            out.append(v)\n        return out\n    out = asyncio.run(main())\n    assert out == [2, 1, 0]\n\ntest_proxy_aiter()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}, {"test_code": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\ndef test_proxy_async_context_manager():\n\n\n    class Example:\n        value = 2\n\n        async def __aenter__(self):\n            self.value += 1\n            return self\n\n        async def __aexit__(self, exc_type, exc_val, exc_tb):\n            self.value -= 1\n    _, p = _make_proxy(Example())\n\n    async def main():\n        async with p:\n            assert p.value == 3\n        assert p.value == 2\n        return True\n    assert asyncio.run(main())\n\ntest_proxy_async_context_manager()\n", "code_start": "", "test_path": "../srcdata/Network/werkzeug/tests/test_local.py"}], "instruction": "Functionality: The _make_proxy function is designed to create a proxy object that encapsulates a given value. This function utilizes the ContextVars and Local objects from the contextvars and werkzeug.local modules, respectively, to create a thread-local context and a proxy object that allows accessing and modifying the value in a thread-safe manner. The purpose is to demonstrate how ContextVars and Local objects can be used for managing data in a concurrent environment.\n\nInputs: The function accepts a single argument, 'value', which can be any data type (integer, string, list, dictionary, etc.). This value is to be encapsulated within the proxy object.\n\nOutputs: The function returns a tuple containing two elements:\n1. A Local object 'ns' that holds the original value.\n2. A proxy object 'p' that serves as a handle to access and modify the value stored in 'ns'. The proxy object can be used to retrieve or change the value without directly accessing the Local object, thereby ensuring thread safety.", "method_code_mask": "import asyncio\nimport copy\nimport math\nimport operator\nimport time\nfrom contextvars import ContextVar\nfrom threading import Thread\nimport pytest\nfrom werkzeug import local\n_cv_ns = ContextVar('werkzeug.tests.ns')\n\n\ndef _make_proxy(value): [MASK]\n"}

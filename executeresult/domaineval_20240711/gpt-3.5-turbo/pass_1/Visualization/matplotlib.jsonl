{"result": "failed: name 'contextmanager' is not defined", "model_name": "gpt-3.5-turbo", "repository": "matplotlib", "full_method_name": "temp_style", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_style.py", "method_code_mask": "from contextlib import contextmanager\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\nimport sys\nimport numpy as np\nimport pytest\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\nfrom matplotlib.style.core import USER_LIBRARY_PATHS\nfrom matplotlib.style.core import STYLE_EXTENSION\nVALUE = 'pink'\nPARAM = 'image.cmap'\nDUMMY_SETTINGS = {PARAM: VALUE}\n\n\n@contextmanager\ndef temp_style(style_name, settings=None): [MASK]\n", "response": "@contextmanager\ndef temp_style(style_name, settings=None):\n    temp_dir = TemporaryDirectory()\n    style_file = Path(temp_dir.name) / f\"{style_name}.{STYLE_EXTENSION}\"\n    with open(style_file, 'w') as f:\n        if settings is None:\n            settings = DUMMY_SETTINGS\n        for key, value in settings.items():\n            f.write(f\"{key}: {value}\\n\")\n    \n    USER_LIBRARY_PATHS.insert(0, str(temp_dir.name))\n    yield\n    \n    USER_LIBRARY_PATHS.remove(str(temp_dir.name))\n    temp_dir.cleanup()"}
{"result": "failed: AssertionError", "model_name": "gpt-3.5-turbo", "repository": "matplotlib", "full_method_name": "_azimuth2math", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_colors.py", "method_code_mask": "import copy\nimport itertools\nimport unittest.mock\nfrom io import BytesIO\nimport numpy as np\nfrom PIL import Image\nimport pytest\nimport base64\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom matplotlib import cbook\nfrom matplotlib import cm\nimport matplotlib\nimport matplotlib as mpl\nimport matplotlib.colors as mcolors\nimport matplotlib.colorbar as mcolorbar\nimport matplotlib.pyplot as plt\nimport matplotlib.scale as mscale\nfrom matplotlib.rcsetup import cycler\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.testing.decorators import check_figures_equal\nfrom matplotlib.colors import is_color_like\nfrom matplotlib.colors import to_rgba_array\n\n\ndef _azimuth2math(azimuth, elevation): [MASK]\n", "response": "def _azimuth2math(azimuth, elevation):\n    theta = np.radians(90 - azimuth)\n    phi = np.radians(elevation)\n    return theta, phi"}
{"result": "passed", "model_name": "gpt-3.5-turbo", "repository": "matplotlib", "full_method_name": "draw_quiver", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_quiver.py", "method_code_mask": "import platform\nimport sys\nimport numpy as np\nimport pytest\nfrom matplotlib import pyplot as plt\nfrom matplotlib.testing.decorators import image_comparison\n\n\ndef draw_quiver(ax, **kwargs): [MASK]\n", "response": "import platform\nimport sys\nimport numpy as np\nimport pytest\nfrom matplotlib import pyplot as plt\nfrom matplotlib.testing.decorators import image_comparison\n\n\ndef draw_quiver(ax, **kwargs):\n    x = np.linspace(0, 2*np.pi, 10)\n    y = np.linspace(0, 2*np.pi, 10)\n    X, Y = np.meshgrid(x, y)\n    U = np.cos(X)\n    V = np.sin(Y)\n    Q = ax.quiver(X, Y, U, V, **kwargs)\n    return Q"}
{"result": "failed: AssertionError", "model_name": "gpt-3.5-turbo", "repository": "matplotlib", "full_method_name": "meshgrid_triangles", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_triangulation.py", "method_code_mask": "import numpy as np\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom numpy.testing import assert_array_less\nimport numpy.ma.testutils as matest\nimport pytest\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as mtri\nfrom matplotlib.path import Path\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.testing.decorators import check_figures_equal\nfrom matplotlib import _tri\n\n\ndef meshgrid_triangles(n): [MASK]\n", "response": "import numpy as np\n\ndef meshgrid_triangles(n):\n    x, y = np.meshgrid(np.arange(n), np.arange(n))\n    triangles = []\n    for i in range(n-1):\n        for j in range(n-1):\n            v1 = i*n + j\n            v2 = i*n + j + 1\n            v3 = (i+1)*n + j\n            v4 = (i+1)*n + j + 1\n            triangles.append([v1, v2, v3])\n            triangles.append([v2, v4, v3])\n    return np.array(triangles, dtype=np.int32)"}
{"result": "passed", "model_name": "gpt-3.5-turbo", "repository": "matplotlib", "full_method_name": "_sph2cart", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_colors.py", "method_code_mask": "import copy\nimport itertools\nimport unittest.mock\nfrom io import BytesIO\nimport numpy as np\nfrom PIL import Image\nimport pytest\nimport base64\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom matplotlib import cbook\nfrom matplotlib import cm\nimport matplotlib\nimport matplotlib as mpl\nimport matplotlib.colors as mcolors\nimport matplotlib.colorbar as mcolorbar\nimport matplotlib.pyplot as plt\nimport matplotlib.scale as mscale\nfrom matplotlib.rcsetup import cycler\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.testing.decorators import check_figures_equal\nfrom matplotlib.colors import is_color_like\nfrom matplotlib.colors import to_rgba_array\n\n\ndef _sph2cart(theta, phi): [MASK]\n", "response": "def _sph2cart(theta, phi):\n    x = np.sin(phi) * np.cos(theta)\n    y = np.sin(phi) * np.sin(theta)\n    z = np.cos(phi)\n    return x, y, z"}
{"result": "passed", "model_name": "gpt-3.5-turbo", "repository": "matplotlib", "full_method_name": "example_plot", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_constrainedlayout.py", "method_code_mask": "import gc\nimport platform\nimport numpy as np\nimport pytest\nimport matplotlib as mpl\nfrom matplotlib.testing.decorators import image_comparison\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\nfrom matplotlib import gridspec\nfrom matplotlib import ticker\n\n\ndef example_plot(ax, fontsize=12, nodec=False): [MASK]\n", "response": "def example_plot(ax, fontsize=12, nodec=False):\n    ax.plot([1, 2])\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(nbins=3))\n    \n    if not nodec:\n        ax.set_xlabel('X Label', fontsize=fontsize)\n        ax.set_ylabel('Y Label', fontsize=fontsize)\n        ax.set_title('Example Plot', fontsize=fontsize)\n    else:\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])"}
{"result": "passed", "model_name": "gpt-3.5-turbo", "repository": "matplotlib", "full_method_name": "example_pcolor", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_constrainedlayout.py", "method_code_mask": "import gc\nimport platform\nimport numpy as np\nimport pytest\nimport matplotlib as mpl\nfrom matplotlib.testing.decorators import image_comparison\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\nfrom matplotlib import gridspec\nfrom matplotlib import ticker\n\n\ndef example_pcolor(ax, fontsize=12): [MASK]\n", "response": "def example_pcolor(ax, fontsize=12):\n    x = np.linspace(0, 4 * np.pi, 100)\n    y = np.linspace(0, 2 * np.pi, 50)\n    X, Y = np.meshgrid(x, y)\n    Z = np.sin(X) * np.cos(Y)\n\n    pcm = ax.pcolormesh(X, Y, Z, cmap='viridis')\n    ax.set_xlabel('X-axis', fontsize=fontsize)\n    ax.set_ylabel('Y-axis', fontsize=fontsize)\n    ax.set_title('Pseudocolor Plot', fontsize=fontsize)\n\n    return pcm"}

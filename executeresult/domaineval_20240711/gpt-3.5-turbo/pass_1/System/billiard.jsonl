{"result": "failed: name '_shutdown_cleanup' is not defined", "model_name": "gpt-3.5-turbo", "repository": "billiard", "full_method_name": "reset_signals", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/System/billiard/billiard/common.py", "method_code_mask": "import os\nimport signal\nimport sys\nimport pickle\nfrom time import monotonic\nfrom io import BytesIO\n\n\ndef _shutdown_cleanup(signum, frame):\n    if _should_have_exited[0]:\n        os._exit(EX_SOFTWARE)\n    maybe_setsignal(signum, signal.SIG_DFL)\n    _should_have_exited[0] = True\n    sys.exit(-(256 - signum))\n\n\ndef reset_signals(handler=_shutdown_cleanup, full=False): [MASK]\n", "response": "def reset_signals(handler=_shutdown_cleanup, full=False):\n    TERMSIGS_DEFAULT = (signal.SIGINT, signal.SIGTERM)\n    TERMSIGS_FULL = tuple(getattr(signal, sig) for sig in dir(signal) if sig.startswith('SIG') and sig[3:].isdigit())\n    \n    def maybe_setsignal(signum, handler):\n        if full or signum in TERMSIGS_DEFAULT:\n            signal.signal(signum, handler)\n    \n    for sig in TERMSIGS_DEFAULT if not full else TERMSIGS_FULL:\n        maybe_setsignal(sig, handler)"}
{"result": "passed", "model_name": "gpt-3.5-turbo", "repository": "billiard", "full_method_name": "termsigs", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/System/billiard/t/unit/test_common.py", "method_code_mask": "import os\nimport pytest\nimport signal\nfrom contextlib import contextmanager\nfrom time import time\nfrom unittest.mock import patch\nfrom unittest.mock import Mock\nfrom unittest.mock import call\n\n\n@contextmanager\ndef termsigs(default, full): [MASK]\n", "response": "import os\nimport pytest\nimport signal\nfrom contextlib import contextmanager\nfrom time import time\nfrom unittest.mock import patch\nfrom unittest.mock import Mock\nfrom unittest.mock import call\n\n@contextmanager\ndef termsigs(default, full):\n    original_default = signal.getsignal(signal.SIGINT)\n    original_full = signal.getsignal(signal.SIGQUIT)\n    \n    signal.signal(signal.SIGINT, default_handler)\n    signal.signal(signal.SIGQUIT, full_handler)\n    \n    try:\n        yield\n    finally:\n        signal.signal(signal.SIGINT, original_default)\n        signal.signal(signal.SIGQUIT, original_full)\n\ndef default_handler(signum, frame):\n    pass\n\ndef full_handler(signum, frame):\n    pass"}

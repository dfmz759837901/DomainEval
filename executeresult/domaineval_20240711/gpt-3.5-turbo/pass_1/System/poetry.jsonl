{"result": "passed", "model_name": "gpt-3.5-turbo", "repository": "poetry", "full_method_name": "flatten_dict", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Addition-0725/poetry/tests/helpers.py", "method_code_mask": "from __future__ import annotations\nimport contextlib\nimport os\nimport re\nimport shutil\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING\nfrom collections.abc import Iterator\nfrom typing import Any\nfrom typing import Mapping\nfrom tomlkit.toml_document import TOMLDocument\n\n\ndef flatten_dict(obj: Mapping[str, Any], delimiter: str='.') ->Mapping[str, Any\n    ]: [MASK]\n", "response": "def flatten_dict(obj: Mapping[str, Any], delimiter: str='.') -> Mapping[str, Any]:\n    def _flatten_dict(obj, parent_key='', delimiter='.'):\n        items = []\n        for key, value in obj.items():\n            new_key = f\"{parent_key}{delimiter}{key}\" if parent_key else key\n            if isinstance(value, Mapping):\n                items.extend(_flatten_dict(value, new_key, delimiter=delimiter).items())\n            else:\n                items.append((new_key, value))\n        return dict(items)\n    \n    return _flatten_dict(obj, delimiter=delimiter)"}

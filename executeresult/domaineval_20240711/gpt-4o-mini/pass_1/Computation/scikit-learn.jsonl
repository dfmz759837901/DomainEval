{"result": "passed", "model_name": "gpt-4o-mini", "repository": "scikit-learn", "full_method_name": "clone", "method_path": "/home/zhuqiming2022/workspace/srcdata/Computation/scikit-learn/sklearn/base.py", "method_code_mask": "import copy\nimport functools\nimport inspect\nimport platform\nimport re\nimport warnings\nfrom collections import defaultdict\nimport numpy as np\n\n\ndef clone(estimator, *, safe=True): [MASK]\n", "response": "import copy\nimport functools\nimport inspect\nimport platform\nimport re\nimport warnings\nfrom collections import defaultdict\nimport numpy as np\n\n\ndef clone(estimator, *, safe=True):\n    # Check if the estimator has a __sklearn_clone__ method\n    if hasattr(estimator, \"__sklearn_clone__\"):\n        return estimator.__sklearn_clone__()\n\n    # If the estimator is a collection, clone each element\n    if isinstance(estimator, (list, tuple, set)):\n        return type(estimator)(clone(e, safe=safe) for e in estimator)\n\n    # If safe is False, we can fall back to a deep copy\n    if not safe:\n        return copy.deepcopy(estimator)\n\n    # If the estimator is not a valid estimator, raise an error\n    if not hasattr(estimator, \"get_params\"):\n        raise ValueError(\"The provided estimator is not a valid estimator.\")\n\n    # Create a new instance of the estimator\n    params = estimator.get_params(deep=True)\n    new_estimator = type(estimator)(**params)\n\n    # Handle random_state if it exists and is not an integer\n    if hasattr(estimator, 'random_state'):\n        if not isinstance(estimator.random_state, int):\n            new_estimator.random_state = None\n\n    return new_estimator"}

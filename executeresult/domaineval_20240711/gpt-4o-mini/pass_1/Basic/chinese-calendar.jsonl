{"result": "failed: AssertionError", "model_name": "gpt-4o-mini", "repository": "chinese-calendar", "full_method_name": "get_workdays", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Time/chinese-calendar/chinese_calendar/utils.py", "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef get_dates(start, end):\n    \"\"\"\n    get dates between start date and end date. (includes start date and end date)\n\n    :type start: datetime.date | datetime.datetime\n    :type end:  datetime.date | datetime.datetime\n    :rtype: list[datetime.date]\n    \"\"\"\n    start, end = map(_wrap_date, (start, end))\n    delta_days = (end - start).days\n    return [(start + datetime.timedelta(days=delta)) for delta in range(\n        delta_days + 1)]\n\n\ndef is_workday(date):\n    \"\"\"\n    check if one date is workday in China.\n    in other words, Chinese people works at that day.\n    :type date: datetime.date | datetime.datetime\n    :rtype: bool\n    \"\"\"\n    date = _validate_date(date)\n    weekday = date.weekday()\n    return bool(date in workdays.keys() or weekday <= 4 and date not in\n        holidays.keys())\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef _validate_date(*dates):\n    \"\"\"\n    check if the date(s) is supported\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date | list[datetime.date]\n    \"\"\"\n    if len(dates) != 1:\n        return list(map(_validate_date, dates))\n    date = _wrap_date(dates[0])\n    if not isinstance(date, datetime.date):\n        raise NotImplementedError(\n            'unsupported type {}, expected type is datetime.date'.format(\n            type(date)))\n    min_year, max_year = min(holidays.keys()).year, max(holidays.keys()).year\n    if not min_year <= date.year <= max_year:\n        raise NotImplementedError(\n            'no available data for year {}, only year between [{}, {}] supported'\n            .format(date.year, min_year, max_year))\n    return date\n\n\ndef get_workdays(start, end, include_weekends=True): [MASK]\n", "response": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef get_dates(start, end):\n    \"\"\"\n    get dates between start date and end date. (includes start date and end date)\n\n    :type start: datetime.date | datetime.datetime\n    :type end:  datetime.date | datetime.datetime\n    :rtype: list[datetime.date]\n    \"\"\"\n    start, end = map(_wrap_date, (start, end))\n    delta_days = (end - start).days\n    return [(start + datetime.timedelta(days=delta)) for delta in range(\n        delta_days + 1)]\n\n\ndef is_workday(date):\n    \"\"\"\n    check if one date is workday in China.\n    in other words, Chinese people works at that day.\n    :type date: datetime.date | datetime.datetime\n    :rtype: bool\n    \"\"\"\n    date = _validate_date(date)\n    weekday = date.weekday()\n    return bool(date in workdays.keys() or weekday <= 4 and date not in\n        holidays.keys())\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef _validate_date(*dates):\n    \"\"\"\n    check if the date(s) is supported\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date | list[datetime.date]\n    \"\"\"\n    if len(dates) != 1:\n        return list(map(_validate_date, dates))\n    date = _wrap_date(dates[0])\n    if not isinstance(date, datetime.date):\n        raise NotImplementedError(\n            'unsupported type {}, expected type is datetime.date'.format(\n            type(date)))\n    min_year, max_year = min(holidays.keys()).year, max(holidays.keys()).year\n    if not min_year <= date.year <= max_year:\n        raise NotImplementedError(\n            'no available data for year {}, only year between [{}, {}] supported'\n            .format(date.year, min_year, max_year))\n    return date\n\n\ndef get_workdays(start, end, include_weekends=True):\n    \"\"\"\n    Get a list of workdays between the specified start and end dates.\n\n    :type start: datetime.date | datetime.datetime\n    :type end: datetime.date | datetime.datetime\n    :type include_weekends: bool\n    :rtype: list[datetime.date]\n    \"\"\"\n    dates = get_dates(start, end)\n    workdays_list = []\n    \n    for date in dates:\n        if is_workday(date):\n            workdays_list.append(date)\n        elif include_weekends and date.weekday() >= 5:  # Saturday or Sunday\n            workdays_list.append(date)\n\n    return workdays_list"}
{"result": "passed", "model_name": "gpt-4o-mini", "repository": "chinese-calendar", "full_method_name": "get_dates", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Time/chinese-calendar/chinese_calendar/utils.py", "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef get_dates(start, end): [MASK]\n", "response": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef get_dates(start, end):\n    \"\"\"\n    Generate a list of all dates between the specified start date and end date, inclusive.\n\n    :param start: The start date of the range (datetime.date or datetime.datetime)\n    :param end: The end date of the range (datetime.date or datetime.datetime)\n    :return: A list of datetime.date objects representing each date in the range\n    \"\"\"\n    start = _wrap_date(start)\n    end = _wrap_date(end)\n    \n    delta = end - start\n    return [start + datetime.timedelta(days=i) for i in range(delta.days + 1)]"}
{"result": "passed", "model_name": "gpt-4o-mini", "repository": "chinese-calendar", "full_method_name": "get_holiday_detail", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Time/chinese-calendar/chinese_calendar/utils.py", "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef get_holiday_detail(date): [MASK]\n", "response": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef get_holiday_detail(date):\n    if isinstance(date, datetime.datetime):\n        date = date.date()  # Convert to date if it's a datetime object\n\n    if date in holidays:\n        return True, holidays[date]\n    elif date in in_lieu_days:\n        return True, in_lieu_days[date]\n    elif date in workdays:\n        return False, None\n    else:\n        return False, None"}
{"result": "passed", "model_name": "gpt-4o-mini", "repository": "chinese-calendar", "full_method_name": "get_holidays", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Time/chinese-calendar/chinese_calendar/utils.py", "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef get_holidays(start, end, include_weekends=True): [MASK]\n", "response": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef get_holidays(start, end, include_weekends=True):\n    # Ensure start and end are datetime.date objects\n    if isinstance(start, datetime.datetime):\n        start = start.date()\n    if isinstance(end, datetime.datetime):\n        end = end.date()\n\n    # Create a set to hold holidays\n    holiday_set = set(holidays)\n\n    # Generate the list of holidays in the range\n    holidays_in_range = []\n    current_date = start\n\n    while current_date <= end:\n        if current_date in holiday_set:\n            holidays_in_range.append(current_date)\n        elif include_weekends and current_date.weekday() >= 5:  # Saturday or Sunday\n            holidays_in_range.append(current_date)\n        current_date += datetime.timedelta(days=1)\n\n    return holidays_in_range"}
{"result": "failed: AssertionError", "model_name": "gpt-4o-mini", "repository": "chinese-calendar", "full_method_name": "find_workday", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Time/chinese-calendar/chinese_calendar/utils.py", "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef _validate_date(*dates):\n    \"\"\"\n    check if the date(s) is supported\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date | list[datetime.date]\n    \"\"\"\n    if len(dates) != 1:\n        return list(map(_validate_date, dates))\n    date = _wrap_date(dates[0])\n    if not isinstance(date, datetime.date):\n        raise NotImplementedError(\n            'unsupported type {}, expected type is datetime.date'.format(\n            type(date)))\n    min_year, max_year = min(holidays.keys()).year, max(holidays.keys()).year\n    if not min_year <= date.year <= max_year:\n        raise NotImplementedError(\n            'no available data for year {}, only year between [{}, {}] supported'\n            .format(date.year, min_year, max_year))\n    return date\n\n\ndef is_workday(date):\n    \"\"\"\n    check if one date is workday in China.\n    in other words, Chinese people works at that day.\n    :type date: datetime.date | datetime.datetime\n    :rtype: bool\n    \"\"\"\n    date = _validate_date(date)\n    weekday = date.weekday()\n    return bool(date in workdays.keys() or weekday <= 4 and date not in\n        holidays.keys())\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef find_workday(delta_days=0, date=None): [MASK]\n", "response": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef _validate_date(*dates):\n    \"\"\"\n    check if the date(s) is supported\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date | list[datetime.date]\n    \"\"\"\n    if len(dates) != 1:\n        return list(map(_validate_date, dates))\n    date = _wrap_date(dates[0])\n    if not isinstance(date, datetime.date):\n        raise NotImplementedError(\n            'unsupported type {}, expected type is datetime.date'.format(\n            type(date)))\n    min_year, max_year = min(holidays.keys()).year, max(holidays.keys()).year\n    if not min_year <= date.year <= max_year:\n        raise NotImplementedError(\n            'no available data for year {}, only year between [{}, {}] supported'\n            .format(date.year, min_year, max_year))\n    return date\n\n\ndef is_workday(date):\n    \"\"\"\n    check if one date is workday in China.\n    in other words, Chinese people works at that day.\n    :type date: datetime.date | datetime.datetime\n    :rtype: bool\n    \"\"\"\n    date = _validate_date(date)\n    weekday = date.weekday()\n    return bool(date in workdays.keys() or weekday <= 4 and date not in\n        holidays.keys())\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef find_workday(delta_days=0, date=None):\n    \"\"\"\n    Find the workday after a specified number of days from a given date.\n\n    :param delta_days: The number of days to look ahead (positive) or behind (negative).\n    :param date: The starting date from which to calculate the next workday. If not provided, the current date is used.\n    :return: The date of the workday found after considering the delta_days from the specified date.\n    :rtype: datetime.date\n    \"\"\"\n    if date is None:\n        date = datetime.date.today()\n    date = _wrap_date(date)\n\n    while delta_days != 0:\n        date += datetime.timedelta(days=1 if delta_days > 0 else -1)\n        if is_workday(date):\n            delta_days += -1 if delta_days > 0 else 1\n\n    return date"}
{"result": "failed: 0", "model_name": "gpt-4o-mini", "repository": "chinese-calendar", "full_method_name": "get_solar_terms", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Time/chinese-calendar/chinese_calendar/utils.py", "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef get_solar_terms(start, end): [MASK]\n", "response": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef get_solar_terms(start, end):\n    if not (1900 <= start.year <= 2100) or not (1900 <= end.year <= 2100):\n        raise ValueError(\"Start and end years must be between 1900 and 2100.\")\n    \n    solar_terms = []\n    for i in range(24):\n        year = start.year\n        C = SOLAR_TERMS_C_NUMS[i]\n        D = SOLAR_TERMS_DELTA[i]\n        \n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            D += 1  # Adjust for leap years\n        \n        # Calculate the date of the solar term\n        term_date = datetime.date(year, SOLAR_TERMS_MONTH[i], 1) + datetime.timedelta(days=D)\n        \n        # Adjust for the turn of the century\n        if year == 2000 and i >= 12:\n            term_date += datetime.timedelta(days=1)\n        \n        if start <= term_date <= end:\n            solar_terms.append((term_date, SolarTerms[i]))\n    \n    return solar_terms"}
{"result": "passed", "model_name": "gpt-4o-mini", "repository": "chinese-calendar", "full_method_name": "get_holiday_detail", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Time/chinese-calendar/chinese_calendar/utils.py", "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef _validate_date(*dates):\n    \"\"\"\n    check if the date(s) is supported\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date | list[datetime.date]\n    \"\"\"\n    if len(dates) != 1:\n        return list(map(_validate_date, dates))\n    date = _wrap_date(dates[0])\n    if not isinstance(date, datetime.date):\n        raise NotImplementedError(\n            'unsupported type {}, expected type is datetime.date'.format(\n            type(date)))\n    min_year, max_year = min(holidays.keys()).year, max(holidays.keys()).year\n    if not min_year <= date.year <= max_year:\n        raise NotImplementedError(\n            'no available data for year {}, only year between [{}, {}] supported'\n            .format(date.year, min_year, max_year))\n    return date\n\n\ndef get_holiday_detail(date): [MASK]\n", "response": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef _validate_date(*dates):\n    \"\"\"\n    check if the date(s) is supported\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date | list[datetime.date]\n    \"\"\"\n    if len(dates) != 1:\n        return list(map(_validate_date, dates))\n    date = _wrap_date(dates[0])\n    if not isinstance(date, datetime.date):\n        raise NotImplementedError(\n            'unsupported type {}, expected type is datetime.date'.format(\n            type(date)))\n    min_year, max_year = min(holidays.keys()).year, max(holidays.keys()).year\n    if not min_year <= date.year <= max_year:\n        raise NotImplementedError(\n            'no available data for year {}, only year between [{}, {}] supported'\n            .format(date.year, min_year, max_year))\n    return date\n\n\ndef get_holiday_detail(date):\n    \"\"\"\n    Check if a given date is a holiday in China and return holiday details.\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: tuple[bool, str | None]\n    \"\"\"\n    date = _validate_date(date)\n    \n    # Check if the date is a holiday\n    if date in holidays:\n        return True, holidays[date]\n    \n    # Check if the date is a weekend\n    if date.weekday() in (5, 6):  # Saturday or Sunday\n        return False, None\n    \n    # Check if the date is a workday designated for work\n    if date in workdays:\n        return False, None\n    \n    return False, None"}
{"result": "passed", "model_name": "gpt-4o-mini", "repository": "chinese-calendar", "full_method_name": "is_in_lieu", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Time/chinese-calendar/chinese_calendar/utils.py", "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef _validate_date(*dates):\n    \"\"\"\n    check if the date(s) is supported\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date | list[datetime.date]\n    \"\"\"\n    if len(dates) != 1:\n        return list(map(_validate_date, dates))\n    date = _wrap_date(dates[0])\n    if not isinstance(date, datetime.date):\n        raise NotImplementedError(\n            'unsupported type {}, expected type is datetime.date'.format(\n            type(date)))\n    min_year, max_year = min(holidays.keys()).year, max(holidays.keys()).year\n    if not min_year <= date.year <= max_year:\n        raise NotImplementedError(\n            'no available data for year {}, only year between [{}, {}] supported'\n            .format(date.year, min_year, max_year))\n    return date\n\n\ndef is_in_lieu(date): [MASK]\n", "response": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef _wrap_date(date):\n    \"\"\"\n    transform datetime.datetime into datetime.date\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date\n    \"\"\"\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    return date\n\n\ndef _validate_date(*dates):\n    \"\"\"\n    check if the date(s) is supported\n    :type date: datetime.date | datetime.datetime\n    :rtype: datetime.date | list[datetime.date]\n    \"\"\"\n    if len(dates) != 1:\n        return list(map(_validate_date, dates))\n    date = _wrap_date(dates[0])\n    if not isinstance(date, datetime.date):\n        raise NotImplementedError(\n            'unsupported type {}, expected type is datetime.date'.format(\n            type(date)))\n    min_year, max_year = min(holidays.keys()).year, max(holidays.keys()).year\n    if not min_year <= date.year <= max_year:\n        raise NotImplementedError(\n            'no available data for year {}, only year between [{}, {}] supported'\n            .format(date.year, min_year, max_year))\n    return date\n\n\ndef is_in_lieu(date):\n    \"\"\"\n    Check if the given date is an in-lieu day in China.\n\n    :type date: datetime.date | datetime.datetime\n    :rtype: bool\n    \"\"\"\n    date = _validate_date(date)\n    return date in in_lieu_days"}
{"result": "passed", "model_name": "gpt-4o-mini", "repository": "chinese-calendar", "full_method_name": "is_workday", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Time/chinese-calendar/chinese_calendar/utils.py", "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef is_workday(date): [MASK]\n", "response": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\nimport datetime\nfrom chinese_calendar.constants import holidays\nfrom chinese_calendar.constants import in_lieu_days\nfrom chinese_calendar.constants import workdays\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_C_NUMS\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_DELTA\nfrom chinese_calendar.solar_terms import SOLAR_TERMS_MONTH\nfrom chinese_calendar.solar_terms import SolarTerms\n\n\ndef is_workday(date):\n    # Ensure the input is a date object\n    if isinstance(date, datetime.datetime):\n        date = date.date()\n    \n    # Check if the date is a weekend (Saturday or Sunday)\n    if date.weekday() >= 5:  # 5 = Saturday, 6 = Sunday\n        return False\n    \n    # Check if the date is a national holiday\n    if date in holidays:\n        return False\n    \n    # Check if the date is a day off in lieu of a holiday\n    if date in in_lieu_days:\n        return False\n    \n    # If none of the above conditions are met, it is a workday\n    return True"}

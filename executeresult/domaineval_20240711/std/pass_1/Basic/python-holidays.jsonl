{"result": "passed", "model_name": "std", "repository": "python-holidays", "full_method_name": "_get_nth_weekday_of_month", "method_path": "../srcdata/Basic/python-holidays/holidays/calendars/gregorian.py", "method_code_mask": "from datetime import date\n\n\ndef _timedelta(dt: date, days: int=0) ->date:\n    \"\"\"\n    Return date that is `days` days after (days > 0) or before (days < 0) specified date.\n    \"\"\"\n    return date.fromordinal(dt.toordinal() + days)\n\n\ndef _get_nth_weekday_from(n: int, weekday: int, from_dt: date) ->date:\n    \"\"\"\n    Return date of a n-th weekday before a specific date\n    if n is negative.\n    Return date of n-th weekday after (including) a specific date\n    if n is positive.\n    Examples: 1st Monday, 2nd Saturday, etc).\n    \"\"\"\n    return _timedelta(from_dt, (n - 1) * 7 + (weekday - from_dt.weekday()) %\n        7 if n > 0 else (n + 1) * 7 - (from_dt.weekday() - weekday) % 7)\n\n\ndef _get_nth_weekday_of_month(n: int, weekday: int, month: int, year: int\n    ) ->date: [MASK]\n", "response": "from datetime import date\ndef _timedelta(dt: date, days: int=0) ->date:\n    \"\"\"\n    Return date that is `days` days after (days > 0) or before (days < 0) specified date.\n    \"\"\"\n    return date.fromordinal(dt.toordinal() + days)\ndef _get_nth_weekday_from(n: int, weekday: int, from_dt: date) ->date:\n    \"\"\"\n    Return date of a n-th weekday before a specific date\n    if n is negative.\n    Return date of n-th weekday after (including) a specific date\n    if n is positive.\n    Examples: 1st Monday, 2nd Saturday, etc).\n    \"\"\"\n    return _timedelta(from_dt, (n - 1) * 7 + (weekday - from_dt.weekday()) %\n        7 if n > 0 else (n + 1) * 7 - (from_dt.weekday() - weekday) % 7)\ndef _get_nth_weekday_of_month(n: int, weekday: int, month: int, year: int\n    ) ->date:\n    \"\"\"\n    Return date of n-th weekday of month for a specific year\n    (e.g. 1st Monday of Apr, 2nd Friday of June, etc).\n    If n is negative the countdown starts at the end of month\n    (i.e. -1 is last).\n    \"\"\"\n    requested_year_month = year, month\n    if n < 0:\n        month += 1\n        if month > 12:\n            month = 1\n            year += 1\n        start_date = _timedelta(date(year, month, 1), -1)\n    else:\n        start_date = date(year, month, 1)\n    dt = _get_nth_weekday_from(n, weekday, start_date)\n    dt_year_month = dt.year, dt.month\n    if dt_year_month != requested_year_month:\n        raise ValueError(f'{dt_year_month} returned for {requested_year_month}'\n            )\n    return dt"}
{"result": "passed", "model_name": "std", "repository": "python-holidays", "full_method_name": "CountryHoliday", "method_path": "../srcdata/Basic/python-holidays/holidays/utils.py", "method_code_mask": "import warnings\nfrom functools import lru_cache\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\nfrom holidays.holiday_base import HolidayBase\nfrom holidays.registry import EntityLoader\nimport holidays\n\n\ndef CountryHoliday(country: str, subdiv: Optional[str]=None, years:\n    Optional[Union[int, Iterable[int]]]=None, expand: bool=True, observed:\n    bool=True, prov: Optional[str]=None, state: Optional[str]=None\n    ) ->HolidayBase: [MASK]\n", "response": "import warnings\nfrom functools import lru_cache\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\nfrom holidays.holiday_base import HolidayBase\nfrom holidays.registry import EntityLoader\nimport holidays\ndef CountryHoliday(country: str, subdiv: Optional[str]=None, years:\n    Optional[Union[int, Iterable[int]]]=None, expand: bool=True, observed:\n    bool=True, prov: Optional[str]=None, state: Optional[str]=None\n    ) ->HolidayBase:\n    \"\"\"\n    Deprecated name for :py:func:`country_holidays`.\n\n    :meta private:\n    \"\"\"\n    warnings.warn('CountryHoliday is deprecated, use country_holidays instead.'\n        , DeprecationWarning)\n    return country_holidays(country, subdiv, years, expand, observed, prov,\n        state)"}
{"result": "passed", "model_name": "std", "repository": "python-holidays", "full_method_name": "financial_holidays", "method_path": "../srcdata/Basic/python-holidays/holidays/utils.py", "method_code_mask": "import warnings\nfrom functools import lru_cache\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\nfrom holidays.holiday_base import HolidayBase\nfrom holidays.registry import EntityLoader\nimport holidays\n\n\ndef financial_holidays(market: str, subdiv: Optional[str]=None, years:\n    Optional[Union[int, Iterable[int]]]=None, expand: bool=True, observed:\n    bool=True, language: Optional[str]=None) ->HolidayBase: [MASK]\n", "response": "import warnings\nfrom functools import lru_cache\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\nfrom typing import Union\nfrom holidays.holiday_base import HolidayBase\nfrom holidays.registry import EntityLoader\nimport holidays\ndef financial_holidays(market: str, subdiv: Optional[str]=None, years:\n    Optional[Union[int, Iterable[int]]]=None, expand: bool=True, observed:\n    bool=True, language: Optional[str]=None) ->HolidayBase:\n    \"\"\"\n    Returns a new dictionary-like :py:class:`HolidayBase` object for the public\n    holidays of the financial market matching **market** and other keyword\n    arguments.\n\n    :param market:\n        An ISO 3166-1 Alpha-2 market code.\n\n    :param subdiv:\n        Currently not implemented for markets (see documentation).\n\n    :param years:\n        The year(s) to pre-calculate public holidays for at instantiation.\n\n    :param expand:\n        Whether the entire year is calculated when one date from that year\n        is requested.\n\n    :param observed:\n        Whether to include the dates of when public holiday are observed\n        (e.g. a holiday falling on a Sunday being observed the following\n        Monday). False may not work for all countries.\n\n    :param language:\n        The language which the returned holiday names will be translated\n        into. It must be an ISO 639-1 (2-letter) language code. If the\n        language translation is not supported the original holiday names\n        will be used.\n\n    :return:\n        A :py:class:`HolidayBase` object matching the **market**.\n\n    Example usage:\n\n    >>> from holidays import financial_holidays\n    >>> nyse_holidays = financial_holidays('NYSE')\n\n    See :py:func:`country_holidays` documentation for further details and\n    examples.\n    \"\"\"\n    import holidays\n    try:\n        return getattr(holidays, market)(years=years, subdiv=subdiv, expand\n            =expand, observed=observed, language=language)\n    except AttributeError:\n        raise NotImplementedError(f'Financial market {market} not available')"}

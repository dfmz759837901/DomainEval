{"result": "passed", "model_name": "std", "repository": "arrow", "full_method_name": "is_timestamp", "method_path": "../srcdata/Basic/arrow/arrow/util.py", "method_code_mask": "import datetime\nfrom typing import Any\nfrom typing import Optional\nfrom typing import cast\nfrom dateutil.rrule import WEEKLY\nfrom dateutil.rrule import rrule\nfrom arrow.constants import MAX_ORDINAL\nfrom arrow.constants import MAX_TIMESTAMP\nfrom arrow.constants import MAX_TIMESTAMP_MS\nfrom arrow.constants import MAX_TIMESTAMP_US\nfrom arrow.constants import MIN_ORDINAL\n\n\ndef is_timestamp(value: Any) ->bool: [MASK]\n", "response": "import datetime\nfrom typing import Any\nfrom typing import Optional\nfrom typing import cast\nfrom dateutil.rrule import WEEKLY\nfrom dateutil.rrule import rrule\nfrom arrow.constants import MAX_ORDINAL\nfrom arrow.constants import MAX_TIMESTAMP\nfrom arrow.constants import MAX_TIMESTAMP_MS\nfrom arrow.constants import MAX_TIMESTAMP_US\nfrom arrow.constants import MIN_ORDINAL\ndef is_timestamp(value: Any) ->bool:\n    \"\"\"Check if value is a valid timestamp.\"\"\"\n    if isinstance(value, bool):\n        return False\n    if not isinstance(value, (int, float, str)):\n        return False\n    try:\n        float(value)\n        return True\n    except ValueError:\n        return False"}
{"result": "passed", "model_name": "std", "repository": "arrow", "full_method_name": "normalize_timestamp", "method_path": "../srcdata/Basic/arrow/arrow/util.py", "method_code_mask": "import datetime\nfrom typing import Any\nfrom typing import Optional\nfrom typing import cast\nfrom dateutil.rrule import WEEKLY\nfrom dateutil.rrule import rrule\nfrom arrow.constants import MAX_ORDINAL\nfrom arrow.constants import MAX_TIMESTAMP\nfrom arrow.constants import MAX_TIMESTAMP_MS\nfrom arrow.constants import MAX_TIMESTAMP_US\nfrom arrow.constants import MIN_ORDINAL\n\n\ndef normalize_timestamp(timestamp: float) ->float: [MASK]\n", "response": "import datetime\nfrom typing import Any\nfrom typing import Optional\nfrom typing import cast\nfrom dateutil.rrule import WEEKLY\nfrom dateutil.rrule import rrule\nfrom arrow.constants import MAX_ORDINAL\nfrom arrow.constants import MAX_TIMESTAMP\nfrom arrow.constants import MAX_TIMESTAMP_MS\nfrom arrow.constants import MAX_TIMESTAMP_US\nfrom arrow.constants import MIN_ORDINAL\ndef normalize_timestamp(timestamp: float) ->float:\n    \"\"\"Normalize millisecond and microsecond timestamps into normal timestamps.\"\"\"\n    if timestamp > MAX_TIMESTAMP:\n        if timestamp < MAX_TIMESTAMP_MS:\n            timestamp /= 1000\n        elif timestamp < MAX_TIMESTAMP_US:\n            timestamp /= 1000000\n        else:\n            raise ValueError(\n                f'The specified timestamp {timestamp!r} is too large.')\n    return timestamp"}

{"result": "passed", "model_name": "std", "repository": "charset_normalizer", "full_method_name": "detect", "method_path": "../srcdata/Basic/charset_normalizer/charset_normalizer/legacy.py", "method_code_mask": "from __future__ import annotations\nfrom typing import TYPE_CHECKING\nfrom typing import Any\nfrom typing import Optional\nfrom warnings import warn\nfrom typing_extensions import TypedDict\n\n\ndef detect(byte_str: bytes, should_rename_legacy: bool=False, **kwargs: Any\n    ) ->ResultDict: [MASK]\n", "response": "from __future__ import annotations\nfrom typing import TYPE_CHECKING\nfrom typing import Any\nfrom typing import Optional\nfrom warnings import warn\nfrom typing_extensions import TypedDict\ndef detect(byte_str: bytes, should_rename_legacy: bool=False, **kwargs: Any\n    ) ->ResultDict:\n    \"\"\"\n    chardet legacy method\n    Detect the encoding of the given byte string. It should be mostly backward-compatible.\n    Encoding name will match Chardet own writing whenever possible. (Not on encoding name unsupported by it)\n    This function is deprecated and should be used to migrate your project easily, consult the documentation for\n    further information. Not planned for removal.\n\n    :param byte_str:     The byte sequence to examine.\n    :param should_rename_legacy:  Should we rename legacy encodings\n                                  to their more modern equivalents?\n    \"\"\"\n    if len(kwargs):\n        warn(\n            f\"charset-normalizer disregard arguments '{','.join(list(kwargs.keys()))}' in legacy function detect()\"\n            )\n    if not isinstance(byte_str, (bytearray, bytes)):\n        raise TypeError('Expected object of type bytes or bytearray, got: {0}'\n            .format(type(byte_str)))\n    if isinstance(byte_str, bytearray):\n        byte_str = bytes(byte_str)\n    r = from_bytes(byte_str).best()\n    encoding = r.encoding if r is not None else None\n    language = r.language if r is not None and r.language != 'Unknown' else ''\n    confidence = 1.0 - r.chaos if r is not None else None\n    if r is not None and encoding == 'utf_8' and r.bom:\n        encoding += '_sig'\n    if should_rename_legacy is False and encoding in CHARDET_CORRESPONDENCE:\n        encoding = CHARDET_CORRESPONDENCE[encoding]\n    return {'encoding': encoding, 'language': language, 'confidence':\n        confidence}"}

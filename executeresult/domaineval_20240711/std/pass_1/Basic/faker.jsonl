{"result": "passed", "model_name": "std", "repository": "faker", "full_method_name": "add_ordereddicts", "method_path": "../srcdata/Basic/faker/faker/utils/datasets.py", "method_code_mask": "from itertools import chain\nfrom faker.typing import OrderedDictType\n\n\ndef add_ordereddicts(*odicts: OrderedDictType) ->OrderedDictType: [MASK]\n", "response": "from itertools import chain\nfrom faker.typing import OrderedDictType\ndef add_ordereddicts(*odicts: OrderedDictType) ->OrderedDictType:\n    items = [odict.items() for odict in odicts]\n    return OrderedDictType(chain(*items))"}
{"result": "passed", "model_name": "std", "repository": "faker", "full_method_name": "calculate_luhn", "method_path": "../srcdata/Basic/faker/faker/utils/checksums.py", "method_code_mask": "from typing import List\n\n\ndef calculate_luhn(partial_number: float) ->int: [MASK]\n", "response": "from typing import List\ndef calculate_luhn(partial_number: float) ->int:\n    \"\"\"\n    Generates the Checksum using Luhn's algorithm\n    \"\"\"\n    check_digit = luhn_checksum(int(partial_number) * 10)\n    return check_digit if check_digit == 0 else 10 - check_digit"}
{"result": "passed", "model_name": "std", "repository": "faker", "full_method_name": "get_path", "method_path": "../srcdata/Basic/faker/faker/utils/loading.py", "method_code_mask": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\n\n\ndef get_path(module: ModuleType) ->str: [MASK]\n", "response": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\ndef get_path(module: ModuleType) ->str:\n    if getattr(sys, 'frozen', False):\n        if getattr(sys, '_MEIPASS', False):\n            lib_dir = Path(getattr(sys, '_MEIPASS'))\n        else:\n            lib_dir = Path(sys.executable).parent / 'lib'\n        path = lib_dir.joinpath(*module.__package__.split('.'))\n    elif module.__file__ is not None:\n        path = Path(module.__file__).parent\n    else:\n        raise RuntimeError(f\"Can't find path from module `{module}.\")\n    return str(path)"}
{"result": "passed", "model_name": "std", "repository": "faker", "full_method_name": "find_available_locales", "method_path": "../srcdata/Basic/faker/faker/utils/loading.py", "method_code_mask": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\n\n\ndef find_available_locales(providers: List[str]) ->List[str]: [MASK]\n", "response": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\ndef find_available_locales(providers: List[str]) ->List[str]:\n    available_locales = set()\n    for provider_path in providers:\n        provider_module = import_module(provider_path)\n        if getattr(provider_module, 'localized', False):\n            langs = list_module(provider_module)\n            available_locales.update(langs)\n    return sorted(available_locales)"}
{"result": "passed", "model_name": "std", "repository": "faker", "full_method_name": "find_available_providers", "method_path": "../srcdata/Basic/faker/faker/utils/loading.py", "method_code_mask": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\n\n\ndef find_available_providers(modules: List[ModuleType]) ->List[str]: [MASK]\n", "response": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\ndef find_available_providers(modules: List[ModuleType]) ->List[str]:\n    available_providers = set()\n    for providers_mod in modules:\n        if providers_mod.__package__:\n            providers = ['.'.join([providers_mod.__package__, mod]) for mod in\n                list_module(providers_mod) if mod != '__pycache__']\n            available_providers.update(providers)\n    return sorted(available_providers)"}
{"result": "passed", "model_name": "std", "repository": "faker", "full_method_name": "luhn_checksum", "method_path": "../srcdata/Basic/faker/faker/utils/checksums.py", "method_code_mask": "from typing import List\n\n\ndef luhn_checksum(number: float) ->int: [MASK]\n", "response": "from typing import List\ndef luhn_checksum(number: float) ->int:\n\n    def digits_of(n: float) ->List[int]:\n        return [int(d) for d in str(n)]\n    digits = digits_of(number)\n    odd_digits = digits[-1::-2]\n    even_digits = digits[-2::-2]\n    checksum = 0\n    checksum += sum(odd_digits)\n    for d in even_digits:\n        checksum += sum(digits_of(d * 2))\n    return checksum % 10"}

{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "mask_or", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef mask_or(m1, m2, copy=False, shrink=True): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef mask_or(m1, m2, copy=False, shrink=True):\n    \"\"\"\n    Combine two masks with the ``logical_or`` operator.\n\n    The result may be a view on `m1` or `m2` if the other is `nomask`\n    (i.e. False).\n\n    Parameters\n    ----------\n    m1, m2 : array_like\n        Input masks.\n    copy : bool, optional\n        If copy is False and one of the inputs is `nomask`, return a view\n        of the other input mask. Defaults to False.\n    shrink : bool, optional\n        Whether to shrink the output to `nomask` if all its values are\n        False. Defaults to True.\n\n    Returns\n    -------\n    mask : output mask\n        The result masks values that are masked in either `m1` or `m2`.\n\n    Raises\n    ------\n    ValueError\n        If `m1` and `m2` have different flexible dtypes.\n\n    Examples\n    --------\n    >>> m1 = np.ma.make_mask([0, 1, 1, 0])\n    >>> m2 = np.ma.make_mask([1, 0, 0, 0])\n    >>> np.ma.mask_or(m1, m2)\n    array([ True,  True,  True, False])\n\n    \"\"\"\n    if m1 is nomask or m1 is False:\n        dtype = getattr(m2, 'dtype', MaskType)\n        return make_mask(m2, copy=copy, shrink=shrink, dtype=dtype)\n    if m2 is nomask or m2 is False:\n        dtype = getattr(m1, 'dtype', MaskType)\n        return make_mask(m1, copy=copy, shrink=shrink, dtype=dtype)\n    if m1 is m2 and is_mask(m1):\n        return m1\n    dtype1, dtype2 = getattr(m1, 'dtype', None), getattr(m2, 'dtype', None)\n    if dtype1 != dtype2:\n        raise ValueError(\"Incompatible dtypes '%s'<>'%s'\" % (dtype1, dtype2))\n    if dtype1.names is not None:\n        newmask = np.empty(np.broadcast(m1, m2).shape, dtype1)\n        _recursive_mask_or(m1, m2, newmask)\n        return newmask\n    return make_mask(umath.logical_or(m1, m2), copy=copy, shrink=shrink)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "doc_note", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef doc_note(initialdoc, note): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef doc_note(initialdoc, note):\n    \"\"\"\n    Adds a Notes section to an existing docstring.\n\n    \"\"\"\n    if initialdoc is None:\n        return\n    if note is None:\n        return initialdoc\n    notesplit = re.split('\\\\n\\\\s*?Notes\\\\n\\\\s*?-----', inspect.cleandoc(\n        initialdoc))\n    notedoc = '\\n\\nNotes\\n-----\\n%s\\n' % inspect.cleandoc(note)\n    return ''.join(notesplit[:1] + [notedoc] + notesplit[1:])"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "concatenate", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef concatenate(arrays, axis=0): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef concatenate(arrays, axis=0):\n    \"\"\"\n    Concatenate a sequence of arrays along the given axis.\n\n    Parameters\n    ----------\n    arrays : sequence of array_like\n        The arrays must have the same shape, except in the dimension\n        corresponding to `axis` (the first, by default).\n    axis : int, optional\n        The axis along which the arrays will be joined. Default is 0.\n\n    Returns\n    -------\n    result : MaskedArray\n        The concatenated array with any masked entries preserved.\n\n    See Also\n    --------\n    numpy.concatenate : Equivalent function in the top-level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.arange(3)\n    >>> a[1] = ma.masked\n    >>> b = ma.arange(2, 5)\n    >>> a\n    masked_array(data=[0, --, 2],\n                 mask=[False,  True, False],\n           fill_value=999999)\n    >>> b\n    masked_array(data=[2, 3, 4],\n                 mask=False,\n           fill_value=999999)\n    >>> ma.concatenate([a, b])\n    masked_array(data=[0, --, 2, 2, 3, 4],\n                 mask=[False,  True, False, False, False, False],\n           fill_value=999999)\n\n    \"\"\"\n    d = np.concatenate([getdata(a) for a in arrays], axis)\n    rcls = get_masked_subclass(*arrays)\n    data = d.view(rcls)\n    for x in arrays:\n        if getmask(x) is not nomask:\n            break\n    else:\n        return data\n    dm = np.concatenate([getmaskarray(a) for a in arrays], axis)\n    dm = dm.reshape(d.shape)\n    data._mask = _shrink_mask(dm)\n    return data"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "build_err_msg", "method_path": "../srcdata/Computation/numpy/numpy/testing/_private/utils.py", "method_code_mask": "import os\nimport sys\nimport platform\nimport re\nimport gc\nimport operator\nimport warnings\nfrom functools import partial\nfrom functools import wraps\nimport shutil\nimport contextlib\nfrom tempfile import mkdtemp\nfrom tempfile import mkstemp\nfrom unittest.case import SkipTest\nfrom warnings import WarningMessage\nimport pprint\nimport sysconfig\nimport numpy as np\nfrom numpy import isfinite\nfrom numpy import isnan\nfrom numpy import isinf\nimport numpy.linalg._umath_linalg\nfrom io import StringIO\nimport time\nfrom numpy import iscomplexobj\nfrom numpy import real\nfrom numpy import imag\nimport traceback\nimport difflib\nimport doctest\nimport subprocess\nimport unittest\nfrom inspect import isfunction\nimport pytest\nimport psutil\n\n\ndef build_err_msg(arrays, err_msg, header='Items are not equal:', verbose=\n    True, names=('ACTUAL', 'DESIRED'), precision=8): [MASK]\n", "response": "import os\nimport sys\nimport platform\nimport re\nimport gc\nimport operator\nimport warnings\nfrom functools import partial\nfrom functools import wraps\nimport shutil\nimport contextlib\nfrom tempfile import mkdtemp\nfrom tempfile import mkstemp\nfrom unittest.case import SkipTest\nfrom warnings import WarningMessage\nimport pprint\nimport sysconfig\nimport numpy as np\nfrom numpy import isfinite\nfrom numpy import isnan\nfrom numpy import isinf\nimport numpy.linalg._umath_linalg\nfrom io import StringIO\nimport time\nfrom numpy import iscomplexobj\nfrom numpy import real\nfrom numpy import imag\nimport traceback\nimport difflib\nimport doctest\nimport subprocess\nimport unittest\nfrom inspect import isfunction\nimport pytest\nimport psutil\ndef build_err_msg(arrays, err_msg, header='Items are not equal:', verbose=\n    True, names=('ACTUAL', 'DESIRED'), precision=8):\n    msg = ['\\n' + header]\n    err_msg = str(err_msg)\n    if err_msg:\n        if err_msg.find('\\n') == -1 and len(err_msg) < 79 - len(header):\n            msg = [msg[0] + ' ' + err_msg]\n        else:\n            msg.append(err_msg)\n    if verbose:\n        for i, a in enumerate(arrays):\n            if isinstance(a, ndarray):\n                r_func = partial(array_repr, precision=precision)\n            else:\n                r_func = repr\n            try:\n                r = r_func(a)\n            except Exception as exc:\n                r = f'[repr failed for <{type(a).__name__}>: {exc}]'\n            if r.count('\\n') > 3:\n                r = '\\n'.join(r.splitlines()[:3])\n                r += '...'\n            msg.append(f' {names[i]}: {r}')\n    return '\\n'.join(msg)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "flatten_structured_array", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef flatten_structured_array(a): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef flatten_structured_array(a):\n    \"\"\"\n    Flatten a structured array.\n\n    The data type of the output is chosen such that it can represent all of the\n    (nested) fields.\n\n    Parameters\n    ----------\n    a : structured array\n\n    Returns\n    -------\n    output : masked array or ndarray\n        A flattened masked array if the input is a masked array, otherwise a\n        standard ndarray.\n\n    Examples\n    --------\n    >>> ndtype = [('a', int), ('b', float)]\n    >>> a = np.array([(1, 1), (2, 2)], dtype=ndtype)\n    >>> np.ma.flatten_structured_array(a)\n    array([[1., 1.],\n           [2., 2.]])\n\n    \"\"\"\n\n    def flatten_sequence(iterable):\n        \"\"\"\n        Flattens a compound of nested iterables.\n\n        \"\"\"\n        for elm in iter(iterable):\n            if hasattr(elm, '__iter__'):\n                yield from flatten_sequence(elm)\n            else:\n                yield elm\n    a = np.asanyarray(a)\n    inishape = a.shape\n    a = a.ravel()\n    if isinstance(a, MaskedArray):\n        out = np.array([tuple(flatten_sequence(d.item())) for d in a._data])\n        out = out.view(MaskedArray)\n        out._mask = np.array([tuple(flatten_sequence(d.item())) for d in\n            getmaskarray(a)])\n    else:\n        out = np.array([tuple(flatten_sequence(d.item())) for d in a])\n    if len(inishape) > 1:\n        newshape = list(out.shape)\n        newshape[0] = inishape\n        out.shape = tuple(flatten_sequence(newshape))\n    return out"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "fromarrays", "method_path": "../srcdata/Computation/numpy/numpy/ma/mrecords.py", "method_code_mask": "from numpy.ma import MAError\nfrom numpy.ma import MaskedArray\nfrom numpy.ma import masked\nfrom numpy.ma import nomask\nfrom numpy.ma import masked_array\nfrom numpy.ma import getdata\nfrom numpy.ma import getmaskarray\nfrom numpy.ma import filled\nimport numpy.ma as ma\nimport warnings\nimport numpy as np\nfrom numpy import dtype\nfrom numpy import ndarray\nfrom numpy import array as narray\n\n\ndef fromarrays(arraylist, dtype=None, shape=None, formats=None, names=None,\n    titles=None, aligned=False, byteorder=None, fill_value=None): [MASK]\n", "response": "from numpy.ma import MAError\nfrom numpy.ma import MaskedArray\nfrom numpy.ma import masked\nfrom numpy.ma import nomask\nfrom numpy.ma import masked_array\nfrom numpy.ma import getdata\nfrom numpy.ma import getmaskarray\nfrom numpy.ma import filled\nimport numpy.ma as ma\nimport warnings\nimport numpy as np\nfrom numpy import dtype\nfrom numpy import ndarray\nfrom numpy import array as narray\ndef fromarrays(arraylist, dtype=None, shape=None, formats=None, names=None,\n    titles=None, aligned=False, byteorder=None, fill_value=None):\n    \"\"\"\n    Creates a mrecarray from a (flat) list of masked arrays.\n\n    Parameters\n    ----------\n    arraylist : sequence\n        A list of (masked) arrays. Each element of the sequence is first converted\n        to a masked array if needed. If a 2D array is passed as argument, it is\n        processed line by line\n    dtype : {None, dtype}, optional\n        Data type descriptor.\n    shape : {None, integer}, optional\n        Number of records. If None, shape is defined from the shape of the\n        first array in the list.\n    formats : {None, sequence}, optional\n        Sequence of formats for each individual field. If None, the formats will\n        be autodetected by inspecting the fields and selecting the highest dtype\n        possible.\n    names : {None, sequence}, optional\n        Sequence of the names of each field.\n    fill_value : {None, sequence}, optional\n        Sequence of data to be used as filling values.\n\n    Notes\n    -----\n    Lists of tuples should be preferred over lists of lists for faster processing.\n\n    \"\"\"\n    datalist = [getdata(x) for x in arraylist]\n    masklist = [np.atleast_1d(getmaskarray(x)) for x in arraylist]\n    _array = recfromarrays(datalist, dtype=dtype, shape=shape, formats=\n        formats, names=names, titles=titles, aligned=aligned, byteorder=\n        byteorder).view(mrecarray)\n    _array._mask.flat = list(zip(*masklist))\n    if fill_value is not None:\n        _array.fill_value = fill_value\n    return _array"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "allequal", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef allequal(a, b, fill_value=True): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef allequal(a, b, fill_value=True):\n    \"\"\"\n    Return True if all entries of a and b are equal, using\n    fill_value as a truth value where either or both are masked.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to compare.\n    fill_value : bool, optional\n        Whether masked values in a or b are considered equal (True) or not\n        (False).\n\n    Returns\n    -------\n    y : bool\n        Returns True if the two arrays are equal within the given\n        tolerance, False otherwise. If either array contains NaN,\n        then False is returned.\n\n    See Also\n    --------\n    all, any\n    numpy.ma.allclose\n\n    Examples\n    --------\n    >>> a = np.ma.array([1e10, 1e-7, 42.0], mask=[0, 0, 1])\n    >>> a\n    masked_array(data=[10000000000.0, 1e-07, --],\n                 mask=[False, False,  True],\n           fill_value=1e+20)\n\n    >>> b = np.array([1e10, 1e-7, -42.0])\n    >>> b\n    array([  1.00000000e+10,   1.00000000e-07,  -4.20000000e+01])\n    >>> np.ma.allequal(a, b, fill_value=False)\n    False\n    >>> np.ma.allequal(a, b)\n    True\n\n    \"\"\"\n    m = mask_or(getmask(a), getmask(b))\n    if m is nomask:\n        x = getdata(a)\n        y = getdata(b)\n        d = umath.equal(x, y)\n        return d.all()\n    elif fill_value:\n        x = getdata(a)\n        y = getdata(b)\n        d = umath.equal(x, y)\n        dm = array(d, mask=m, copy=False)\n        return dm.filled(True).all(None)\n    else:\n        return False"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "asarray", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef asarray(a, dtype=None, order=None): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef asarray(a, dtype=None, order=None):\n    \"\"\"\n    Convert the input to a masked array of the given data-type.\n\n    No copy is performed if the input is already an `ndarray`. If `a` is\n    a subclass of `MaskedArray`, a base class `MaskedArray` is returned.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to a masked array. This\n        includes lists, lists of tuples, tuples, tuples of tuples, tuples\n        of lists, ndarrays and masked arrays.\n    dtype : dtype, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major ('C') or column-major ('FORTRAN') memory\n        representation.  Default is 'C'.\n\n    Returns\n    -------\n    out : MaskedArray\n        Masked array interpretation of `a`.\n\n    See Also\n    --------\n    asanyarray : Similar to `asarray`, but conserves subclasses.\n\n    Examples\n    --------\n    >>> x = np.arange(10.).reshape(2, 5)\n    >>> x\n    array([[0., 1., 2., 3., 4.],\n           [5., 6., 7., 8., 9.]])\n    >>> np.ma.asarray(x)\n    masked_array(\n      data=[[0., 1., 2., 3., 4.],\n            [5., 6., 7., 8., 9.]],\n      mask=False,\n      fill_value=1e+20)\n    >>> type(np.ma.asarray(x))\n    <class 'numpy.ma.MaskedArray'>\n\n    \"\"\"\n    order = order or 'C'\n    return masked_array(a, dtype=dtype, copy=False, keep_mask=True, subok=\n        False, order=order)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "inner", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef inner(a, b): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef inner(a, b):\n    \"\"\"\n    Returns the inner product of a and b for arrays of floating point types.\n\n    Like the generic NumPy equivalent the product sum is over the last dimension\n    of a and b. The first argument is not conjugated.\n\n    \"\"\"\n    fa = filled(a, 0)\n    fb = filled(b, 0)\n    if fa.ndim == 0:\n        fa.shape = 1,\n    if fb.ndim == 0:\n        fb.shape = 1,\n    return np.inner(fa, fb).view(MaskedArray)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "outer", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef outer(a, b): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef outer(a, b):\n    \"\"\"maskedarray version of the numpy function.\"\"\"\n    fa = filled(a, 0).ravel()\n    fb = filled(b, 0).ravel()\n    d = np.outer(fa, fb)\n    ma = getmask(a)\n    mb = getmask(b)\n    if ma is nomask and mb is nomask:\n        return masked_array(d)\n    ma = getmaskarray(a)\n    mb = getmaskarray(b)\n    m = make_mask(1 - np.outer(1 - ma, 1 - mb), copy=False)\n    return masked_array(d, mask=m)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "get_rtol", "method_path": "../srcdata/Computation/numpy/numpy/linalg/tests/test_linalg.py", "method_code_mask": "import os\nimport sys\nimport itertools\nimport traceback\nimport textwrap\nimport subprocess\nimport pytest\nimport numpy as np\nfrom numpy import array\nfrom numpy import single\nfrom numpy import double\nfrom numpy import csingle\nfrom numpy import cdouble\nfrom numpy import dot\nfrom numpy import identity\nfrom numpy import matmul\nfrom numpy import multiply\nfrom numpy import atleast_2d\nfrom numpy import inf\nfrom numpy import asarray\nfrom numpy import linalg\nfrom numpy.linalg import matrix_power\nfrom numpy.linalg import norm\nfrom numpy.linalg import matrix_rank\nfrom numpy.linalg import multi_dot\nfrom numpy.linalg import LinAlgError\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_almost_equal\nfrom numpy.testing import assert_allclose\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import assert_raises_regex\nfrom numpy.testing import HAS_LAPACK64\nimport numpy.linalg.lapack_lite\nimport resource\n\n\ndef get_rtol(dtype): [MASK]\n", "response": "import os\nimport sys\nimport itertools\nimport traceback\nimport textwrap\nimport subprocess\nimport pytest\nimport numpy as np\nfrom numpy import array\nfrom numpy import single\nfrom numpy import double\nfrom numpy import csingle\nfrom numpy import cdouble\nfrom numpy import dot\nfrom numpy import identity\nfrom numpy import matmul\nfrom numpy import multiply\nfrom numpy import atleast_2d\nfrom numpy import inf\nfrom numpy import asarray\nfrom numpy import linalg\nfrom numpy.linalg import matrix_power\nfrom numpy.linalg import norm\nfrom numpy.linalg import matrix_rank\nfrom numpy.linalg import multi_dot\nfrom numpy.linalg import LinAlgError\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_almost_equal\nfrom numpy.testing import assert_allclose\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import assert_raises_regex\nfrom numpy.testing import HAS_LAPACK64\nimport numpy.linalg.lapack_lite\nimport resource\ndef get_rtol(dtype):\n    if dtype in (single, csingle):\n        return 1e-05\n    else:\n        return 1e-11"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "getmaskarray", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef getmaskarray(arr): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef getmaskarray(arr):\n    \"\"\"\n    Return the mask of a masked array, or full boolean array of False.\n\n    Return the mask of `arr` as an ndarray if `arr` is a `MaskedArray` and\n    the mask is not `nomask`, else return a full boolean array of False of\n    the same shape as `arr`.\n\n    Parameters\n    ----------\n    arr : array_like\n        Input `MaskedArray` for which the mask is required.\n\n    See Also\n    --------\n    getmask : Return the mask of a masked array, or nomask.\n    getdata : Return the data of a masked array as an ndarray.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\n    >>> a\n    masked_array(\n      data=[[1, --],\n            [3, 4]],\n      mask=[[False,  True],\n            [False, False]],\n      fill_value=2)\n    >>> ma.getmaskarray(a)\n    array([[False,  True],\n           [False, False]])\n\n    Result when mask == ``nomask``\n\n    >>> b = ma.masked_array([[1,2],[3,4]])\n    >>> b\n    masked_array(\n      data=[[1, 2],\n            [3, 4]],\n      mask=False,\n      fill_value=999999)\n    >>> ma.getmaskarray(b)\n    array([[False, False],\n           [False, False]])\n\n    \"\"\"\n    mask = getmask(arr)\n    if mask is nomask:\n        mask = make_mask_none(np.shape(arr), getattr(arr, 'dtype', None))\n    return mask"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "masked_values", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True): [M\n    ASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True):\n    \"\"\"\n    Mask using floating point equality.\n\n    Return a MaskedArray, masked where the data in array `x` are approximately\n    equal to `value`, determined using `isclose`. The default tolerances for\n    `masked_values` are the same as those for `isclose`.\n\n    For integer types, exact equality is used, in the same way as\n    `masked_equal`.\n\n    The fill_value is set to `value` and the mask is set to ``nomask`` if\n    possible.\n\n    Parameters\n    ----------\n    x : array_like\n        Array to mask.\n    value : float\n        Masking value.\n    rtol, atol : float, optional\n        Tolerance parameters passed on to `isclose`\n    copy : bool, optional\n        Whether to return a copy of `x`.\n    shrink : bool, optional\n        Whether to collapse a mask full of False to ``nomask``.\n\n    Returns\n    -------\n    result : MaskedArray\n        The result of masking `x` where approximately equal to `value`.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n    masked_equal : Mask where equal to a given value (integers).\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = np.array([1, 1.1, 2, 1.1, 3])\n    >>> ma.masked_values(x, 1.1)\n    masked_array(data=[1.0, --, 2.0, --, 3.0],\n                 mask=[False,  True, False,  True, False],\n           fill_value=1.1)\n\n    Note that `mask` is set to ``nomask`` if possible.\n\n    >>> ma.masked_values(x, 2.1)\n    masked_array(data=[1. , 1.1, 2. , 1.1, 3. ],\n                 mask=False,\n           fill_value=2.1)\n\n    Unlike `masked_equal`, `masked_values` can perform approximate equalities.\n\n    >>> ma.masked_values(x, 2.1, atol=1e-1)\n    masked_array(data=[1.0, 1.1, --, 1.1, 3.0],\n                 mask=[False, False,  True, False, False],\n           fill_value=2.1)\n\n    \"\"\"\n    xnew = filled(x, value)\n    if np.issubdtype(xnew.dtype, np.floating):\n        mask = np.isclose(xnew, value, atol=atol, rtol=rtol)\n    else:\n        mask = umath.equal(xnew, value)\n    ret = masked_array(xnew, mask=mask, copy=copy, fill_value=value)\n    if shrink:\n        ret.shrink_mask()\n    return ret"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "putmask", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef putmask(a, mask, values): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef putmask(a, mask, values):\n    \"\"\"\n    Changes elements of an array based on conditional and input values.\n\n    This is the masked array version of `numpy.putmask`, for details see\n    `numpy.putmask`.\n\n    See Also\n    --------\n    numpy.putmask\n\n    Notes\n    -----\n    Using a masked array as `values` will **not** transform a `ndarray` into\n    a `MaskedArray`.\n\n    Examples\n    --------\n    >>> arr = [[1, 2], [3, 4]]\n    >>> mask = [[1, 0], [0, 0]]\n    >>> x = np.ma.array(arr, mask=mask)\n    >>> np.ma.putmask(x, x < 4, 10*x)\n    >>> x\n    masked_array(\n      data=[[--, 20],\n            [30, 4]],\n      mask=[[ True, False],\n            [False, False]],\n      fill_value=999999)\n    >>> x.data\n    array([[10, 20],\n           [30,  4]])\n\n    \"\"\"\n    if not isinstance(a, MaskedArray):\n        a = a.view(MaskedArray)\n    valdata, valmask = getdata(values), getmask(values)\n    if getmask(a) is nomask:\n        if valmask is not nomask:\n            a._sharedmask = True\n            a._mask = make_mask_none(a.shape, a.dtype)\n            np.copyto(a._mask, valmask, where=mask)\n    elif a._hardmask:\n        if valmask is not nomask:\n            m = a._mask.copy()\n            np.copyto(m, valmask, where=mask)\n            a.mask |= m\n    else:\n        if valmask is nomask:\n            valmask = getmaskarray(values)\n        np.copyto(a._mask, valmask, where=mask)\n    np.copyto(a._data, valdata, where=mask)\n    return"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "filled", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef filled(a, fill_value=None): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef filled(a, fill_value=None):\n    \"\"\"\n    Return input as an `~numpy.ndarray`, with masked values replaced by\n    `fill_value`.\n\n    If `a` is not a `MaskedArray`, `a` itself is returned.\n    If `a` is a `MaskedArray` with no masked values, then ``a.data`` is\n    returned.\n    If `a` is a `MaskedArray` and `fill_value` is None, `fill_value` is set to\n    ``a.fill_value``.\n\n    Parameters\n    ----------\n    a : MaskedArray or array_like\n        An input object.\n    fill_value : array_like, optional.\n        Can be scalar or non-scalar. If non-scalar, the\n        resulting filled array should be broadcastable\n        over input array. Default is None.\n\n    Returns\n    -------\n    a : ndarray\n        The filled array.\n\n    See Also\n    --------\n    compressed\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],\n    ...                                                [1, 0, 0],\n    ...                                                [0, 0, 0]])\n    >>> x.filled()\n    array([[999999,      1,      2],\n           [999999,      4,      5],\n           [     6,      7,      8]])\n    >>> x.filled(fill_value=333)\n    array([[333,   1,   2],\n           [333,   4,   5],\n           [  6,   7,   8]])\n    >>> x.filled(fill_value=np.arange(3))\n    array([[0, 1, 2],\n           [0, 4, 5],\n           [6, 7, 8]])\n\n    \"\"\"\n    if hasattr(a, 'filled'):\n        return a.filled(fill_value)\n    elif isinstance(a, ndarray):\n        return a\n    elif isinstance(a, dict):\n        return np.array(a, 'O')\n    else:\n        return np.array(a)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "diag", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef diag(v, k=0): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef diag(v, k=0):\n    \"\"\"\n    Extract a diagonal or construct a diagonal array.\n\n    This function is the equivalent of `numpy.diag` that takes masked\n    values into account, see `numpy.diag` for details.\n\n    See Also\n    --------\n    numpy.diag : Equivalent function for ndarrays.\n\n    Examples\n    --------\n\n    Create an array with negative values masked:\n\n    >>> import numpy as np\n    >>> x = np.array([[11.2, -3.973, 18], [0.801, -1.41, 12], [7, 33, -12]])\n    >>> masked_x = np.ma.masked_array(x, mask=x < 0)\n    >>> masked_x\n    masked_array(\n      data=[[11.2, --, 18.0],\n            [0.801, --, 12.0],\n            [7.0, 33.0, --]],\n      mask=[[False,  True, False],\n            [False,  True, False],\n            [False, False,  True]],\n      fill_value=1e+20)\n\n    Isolate the main diagonal from the masked array:\n\n    >>> np.ma.diag(masked_x)\n    masked_array(data=[11.2, --, --],\n                 mask=[False,  True,  True],\n           fill_value=1e+20)\n\n    Isolate the first diagonal below the main diagonal:\n\n    >>> np.ma.diag(masked_x, -1)\n    masked_array(data=[0.801, 33.0],\n                 mask=[False, False],\n           fill_value=1e+20)\n\n    \"\"\"\n    output = np.diag(v, k).view(MaskedArray)\n    if getmask(v) is not nomask:\n        output._mask = np.diag(v._mask, k)\n    return output"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "take", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef take(a, indices, axis=None, out=None, mode='raise'): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef take(a, indices, axis=None, out=None, mode='raise'):\n    \"\"\"\n    \"\"\"\n    a = masked_array(a)\n    return a.take(indices, axis=axis, out=out, mode=mode)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "allclose", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08):\n    \"\"\"\n    Returns True if two arrays are element-wise equal within a tolerance.\n\n    This function is equivalent to `allclose` except that masked values\n    are treated as equal (default) or unequal, depending on the `masked_equal`\n    argument.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to compare.\n    masked_equal : bool, optional\n        Whether masked values in `a` and `b` are considered equal (True) or not\n        (False). They are considered equal by default.\n    rtol : float, optional\n        Relative tolerance. The relative difference is equal to ``rtol * b``.\n        Default is 1e-5.\n    atol : float, optional\n        Absolute tolerance. The absolute difference is equal to `atol`.\n        Default is 1e-8.\n\n    Returns\n    -------\n    y : bool\n        Returns True if the two arrays are equal within the given\n        tolerance, False otherwise. If either array contains NaN, then\n        False is returned.\n\n    See Also\n    --------\n    all, any\n    numpy.allclose : the non-masked `allclose`.\n\n    Notes\n    -----\n    If the following equation is element-wise True, then `allclose` returns\n    True::\n\n      absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))\n\n    Return True if all elements of `a` and `b` are equal subject to\n    given tolerances.\n\n    Examples\n    --------\n    >>> a = np.ma.array([1e10, 1e-7, 42.0], mask=[0, 0, 1])\n    >>> a\n    masked_array(data=[10000000000.0, 1e-07, --],\n                 mask=[False, False,  True],\n           fill_value=1e+20)\n    >>> b = np.ma.array([1e10, 1e-8, -42.0], mask=[0, 0, 1])\n    >>> np.ma.allclose(a, b)\n    False\n\n    >>> a = np.ma.array([1e10, 1e-8, 42.0], mask=[0, 0, 1])\n    >>> b = np.ma.array([1.00001e10, 1e-9, -42.0], mask=[0, 0, 1])\n    >>> np.ma.allclose(a, b)\n    True\n    >>> np.ma.allclose(a, b, masked_equal=False)\n    False\n\n    Masked values are not compared directly.\n\n    >>> a = np.ma.array([1e10, 1e-8, 42.0], mask=[0, 0, 1])\n    >>> b = np.ma.array([1.00001e10, 1e-9, 42.0], mask=[0, 0, 1])\n    >>> np.ma.allclose(a, b)\n    True\n    >>> np.ma.allclose(a, b, masked_equal=False)\n    False\n\n    \"\"\"\n    x = masked_array(a, copy=False)\n    y = masked_array(b, copy=False)\n    if y.dtype.kind != 'm':\n        dtype = np.result_type(y, 1.0)\n        if y.dtype != dtype:\n            y = masked_array(y, dtype=dtype, copy=False)\n    m = mask_or(getmask(x), getmask(y))\n    xinf = np.isinf(masked_array(x, copy=False, mask=m)).filled(False)\n    if not np.all(xinf == filled(np.isinf(y), False)):\n        return False\n    if not np.any(xinf):\n        d = filled(less_equal(absolute(x - y), atol + rtol * absolute(y)),\n            masked_equal)\n        return np.all(d)\n    if not np.all(filled(x[xinf] == y[xinf], masked_equal)):\n        return False\n    x = x[~xinf]\n    y = y[~xinf]\n    d = filled(less_equal(absolute(x - y), atol + rtol * absolute(y)),\n        masked_equal)\n    return np.all(d)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "masked_outside", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef masked_outside(x, v1, v2, copy=True): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef masked_outside(x, v1, v2, copy=True):\n    \"\"\"\n    Mask an array outside a given interval.\n\n    Shortcut to ``masked_where``, where `condition` is True for `x` outside\n    the interval [v1,v2] (x < v1)|(x > v2).\n    The boundaries `v1` and `v2` can be given in either order.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Notes\n    -----\n    The array `x` is prefilled with its filling value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\n    >>> ma.masked_outside(x, -0.3, 0.3)\n    masked_array(data=[--, --, 0.01, 0.2, --, --],\n                 mask=[ True,  True, False, False,  True,  True],\n           fill_value=1e+20)\n\n    The order of `v1` and `v2` doesn't matter.\n\n    >>> ma.masked_outside(x, 0.3, -0.3)\n    masked_array(data=[--, --, 0.01, 0.2, --, --],\n                 mask=[ True,  True, False, False,  True,  True],\n           fill_value=1e+20)\n\n    \"\"\"\n    if v2 < v1:\n        v1, v2 = v2, v1\n    xf = filled(x)\n    condition = (xf < v1) | (xf > v2)\n    return masked_where(condition, x, copy=copy)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "masked_inside", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef masked_inside(x, v1, v2, copy=True): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef masked_inside(x, v1, v2, copy=True):\n    \"\"\"\n    Mask an array inside a given interval.\n\n    Shortcut to ``masked_where``, where `condition` is True for `x` inside\n    the interval [v1,v2] (v1 <= x <= v2).  The boundaries `v1` and `v2`\n    can be given in either order.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Notes\n    -----\n    The array `x` is prefilled with its filling value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\n    >>> ma.masked_inside(x, -0.3, 0.3)\n    masked_array(data=[0.31, 1.2, --, --, -0.4, -1.1],\n                 mask=[False, False,  True,  True, False, False],\n           fill_value=1e+20)\n\n    The order of `v1` and `v2` doesn't matter.\n\n    >>> ma.masked_inside(x, 0.3, -0.3)\n    masked_array(data=[0.31, 1.2, --, --, -0.4, -1.1],\n                 mask=[False, False,  True,  True, False, False],\n           fill_value=1e+20)\n\n    \"\"\"\n    if v2 < v1:\n        v1, v2 = v2, v1\n    xf = filled(x)\n    condition = (xf >= v1) & (xf <= v2)\n    return masked_where(condition, x, copy=copy)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "sort", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None,\n    *, stable=None): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None,\n    *, stable=None):\n    \"\"\"\n    Return a sorted copy of the masked array.\n\n    Equivalent to creating a copy of the array\n    and applying the  MaskedArray ``sort()`` method.\n\n    Refer to ``MaskedArray.sort`` for the full documentation\n\n    See Also\n    --------\n    MaskedArray.sort : equivalent method\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = [11.2, -3.973, 0.801, -1.41]\n    >>> mask = [0, 0, 0, 1]\n    >>> masked_x = ma.masked_array(x, mask)\n    >>> masked_x\n    masked_array(data=[11.2, -3.973, 0.801, --],\n                 mask=[False, False, False,  True],\n           fill_value=1e+20)\n    >>> ma.sort(masked_x)\n    masked_array(data=[-3.973, 0.801, 11.2, --],\n                 mask=[False, False, False,  True],\n           fill_value=1e+20)\n    \"\"\"\n    a = np.array(a, copy=True, subok=True)\n    if axis is None:\n        a = a.flatten()\n        axis = 0\n    if isinstance(a, MaskedArray):\n        a.sort(axis=axis, kind=kind, order=order, endwith=endwith,\n            fill_value=fill_value, stable=stable)\n    else:\n        a.sort(axis=axis, kind=kind, order=order, stable=stable)\n    return a"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "power", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef power(a, b, third=None): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef power(a, b, third=None):\n    \"\"\"\n    Returns element-wise base array raised to power from second array.\n\n    This is the masked array version of `numpy.power`. For details see\n    `numpy.power`.\n\n    See Also\n    --------\n    numpy.power\n\n    Notes\n    -----\n    The *out* argument to `numpy.power` is not supported, `third` has to be\n    None.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = [11.2, -3.973, 0.801, -1.41]\n    >>> mask = [0, 0, 0, 1]\n    >>> masked_x = ma.masked_array(x, mask)\n    >>> masked_x\n    masked_array(data=[11.2, -3.973, 0.801, --],\n             mask=[False, False, False,  True],\n       fill_value=1e+20)\n    >>> ma.power(masked_x, 2)\n    masked_array(data=[125.43999999999998, 15.784728999999999,\n                   0.6416010000000001, --],\n             mask=[False, False, False,  True],\n       fill_value=1e+20)\n    >>> y = [-0.5, 2, 0, 17]\n    >>> masked_y = ma.masked_array(y, mask)\n    >>> masked_y\n    masked_array(data=[-0.5, 2.0, 0.0, --],\n             mask=[False, False, False,  True],\n       fill_value=1e+20)\n    >>> ma.power(masked_x, masked_y)\n    masked_array(data=[0.2988071523335984, 15.784728999999999, 1.0, --],\n             mask=[False, False, False,  True],\n       fill_value=1e+20)\n\n    \"\"\"\n    if third is not None:\n        raise MaskError('3-argument power not supported.')\n    ma = getmask(a)\n    mb = getmask(b)\n    m = mask_or(ma, mb)\n    fa = getdata(a)\n    fb = getdata(b)\n    if isinstance(a, MaskedArray):\n        basetype = type(a)\n    else:\n        basetype = MaskedArray\n    with np.errstate(divide='ignore', invalid='ignore'):\n        result = np.where(m, fa, umath.power(fa, fb)).view(basetype)\n    result._update_from(a)\n    invalid = np.logical_not(np.isfinite(result.view(ndarray)))\n    if m is not nomask:\n        if not result.ndim:\n            return masked\n        result._mask = np.logical_or(m, invalid)\n    if invalid.any():\n        if not result.ndim:\n            return masked\n        elif result._mask is nomask:\n            result._mask = invalid\n        result._data[invalid] = result.fill_value\n    return result"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "flatten_mask", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef flatten_mask(mask): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef flatten_mask(mask):\n    \"\"\"\n    Returns a completely flattened version of the mask, where nested fields\n    are collapsed.\n\n    Parameters\n    ----------\n    mask : array_like\n        Input array, which will be interpreted as booleans.\n\n    Returns\n    -------\n    flattened_mask : ndarray of bools\n        The flattened input.\n\n    Examples\n    --------\n    >>> mask = np.array([0, 0, 1])\n    >>> np.ma.flatten_mask(mask)\n    array([False, False,  True])\n\n    >>> mask = np.array([(0, 0), (0, 1)], dtype=[('a', bool), ('b', bool)])\n    >>> np.ma.flatten_mask(mask)\n    array([False, False, False,  True])\n\n    >>> mdtype = [('a', bool), ('b', [('ba', bool), ('bb', bool)])]\n    >>> mask = np.array([(0, (0, 0)), (0, (0, 1))], dtype=mdtype)\n    >>> np.ma.flatten_mask(mask)\n    array([False, False, False, False, False,  True])\n\n    \"\"\"\n\n    def _flatmask(mask):\n        \"\"\"Flatten the mask and returns a (maybe nested) sequence of booleans.\"\"\"\n        mnames = mask.dtype.names\n        if mnames is not None:\n            return [flatten_mask(mask[name]) for name in mnames]\n        else:\n            return mask\n\n    def _flatsequence(sequence):\n        \"\"\"Generates a flattened version of the sequence.\"\"\"\n        try:\n            for element in sequence:\n                if hasattr(element, '__iter__'):\n                    yield from _flatsequence(element)\n                else:\n                    yield element\n        except TypeError:\n            yield sequence\n    mask = np.asarray(mask)\n    flattened = _flatsequence(_flatmask(mask))\n    return np.array([_ for _ in flattened], dtype=bool)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "masked_all_like", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef masked_all_like(arr): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef masked_all_like(arr):\n    \"\"\"\n    Empty masked array with the properties of an existing array.\n\n    Return an empty masked array of the same shape and dtype as\n    the array `arr`, where all the data are masked.\n\n    Parameters\n    ----------\n    arr : ndarray\n        An array describing the shape and dtype of the required MaskedArray.\n\n    Returns\n    -------\n    a : MaskedArray\n        A masked array with all data masked.\n\n    Raises\n    ------\n    AttributeError\n        If `arr` doesn't have a shape attribute (i.e. not an ndarray)\n\n    See Also\n    --------\n    masked_all : Empty masked array with all elements masked.\n\n    Notes\n    -----\n    Unlike other masked array creation functions (e.g. `numpy.ma.zeros_like`,\n    `numpy.ma.ones_like`, `numpy.ma.full_like`), `masked_all_like` does not\n    initialize the values of the array, and may therefore be marginally\n    faster. However, the values stored in the newly allocated array are\n    arbitrary. For reproducible behavior, be sure to set each element of the\n    array before reading.\n\n    Examples\n    --------\n    >>> arr = np.zeros((2, 3), dtype=np.float32)\n    >>> arr\n    array([[0., 0., 0.],\n           [0., 0., 0.]], dtype=float32)\n    >>> np.ma.masked_all_like(arr)\n    masked_array(\n      data=[[--, --, --],\n            [--, --, --]],\n      mask=[[ True,  True,  True],\n            [ True,  True,  True]],\n      fill_value=np.float64(1e+20),\n      dtype=float32)\n\n    The dtype of the masked array matches the dtype of `arr`.\n\n    >>> arr.dtype\n    dtype('float32')\n    >>> np.ma.masked_all_like(arr).dtype\n    dtype('float32')\n\n    \"\"\"\n    a = np.empty_like(arr).view(MaskedArray)\n    a._mask = np.ones(a.shape, dtype=make_mask_descr(a.dtype))\n    return a"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "reshape", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef reshape(a, new_shape, order='C'): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef reshape(a, new_shape, order='C'):\n    \"\"\"\n    Returns an array containing the same data with a new shape.\n\n    Refer to `MaskedArray.reshape` for full documentation.\n\n    See Also\n    --------\n    MaskedArray.reshape : equivalent function\n\n    \"\"\"\n    try:\n        return a.reshape(new_shape, order=order)\n    except AttributeError:\n        _tmp = np.asarray(a).reshape(new_shape, order=order)\n        return _tmp.view(MaskedArray)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "flatnotmasked_contiguous", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef flatnotmasked_contiguous(a): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef flatnotmasked_contiguous(a):\n    \"\"\"\n    Find contiguous unmasked data in a masked array.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n\n    Returns\n    -------\n    slice_list : list\n        A sorted sequence of `slice` objects (start index, end index).\n\n        .. versionchanged:: 1.15.0\n            Now returns an empty list instead of None for a fully masked array\n\n    See Also\n    --------\n    flatnotmasked_edges, notmasked_contiguous, notmasked_edges\n    clump_masked, clump_unmasked\n\n    Notes\n    -----\n    Only accepts 2-D arrays at most.\n\n    Examples\n    --------\n    >>> a = np.ma.arange(10)\n    >>> np.ma.flatnotmasked_contiguous(a)\n    [slice(0, 10, None)]\n\n    >>> mask = (a < 3) | (a > 8) | (a == 5)\n    >>> a[mask] = np.ma.masked\n    >>> np.array(a[~a.mask])\n    array([3, 4, 6, 7, 8])\n\n    >>> np.ma.flatnotmasked_contiguous(a)\n    [slice(3, 5, None), slice(6, 9, None)]\n    >>> a[:] = np.ma.masked\n    >>> np.ma.flatnotmasked_contiguous(a)\n    []\n\n    \"\"\"\n    m = getmask(a)\n    if m is nomask:\n        return [slice(0, a.size)]\n    i = 0\n    result = []\n    for k, g in itertools.groupby(m.ravel()):\n        n = len(list(g))\n        if not k:\n            result.append(slice(i, i + n))\n        i += n\n    return result"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "notmasked_edges", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef notmasked_edges(a, axis=None): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef notmasked_edges(a, axis=None):\n    \"\"\"\n    Find the indices of the first and last unmasked values along an axis.\n\n    If all values are masked, return None.  Otherwise, return a list\n    of two tuples, corresponding to the indices of the first and last\n    unmasked values respectively.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n    axis : int, optional\n        Axis along which to perform the operation.\n        If None (default), applies to a flattened version of the array.\n\n    Returns\n    -------\n    edges : ndarray or list\n        An array of start and end indexes if there are any masked data in\n        the array. If there are no masked data in the array, `edges` is a\n        list of the first and last index.\n\n    See Also\n    --------\n    flatnotmasked_contiguous, flatnotmasked_edges, notmasked_contiguous\n    clump_masked, clump_unmasked\n\n    Examples\n    --------\n    >>> a = np.arange(9).reshape((3, 3))\n    >>> m = np.zeros_like(a)\n    >>> m[1:, 1:] = 1\n\n    >>> am = np.ma.array(a, mask=m)\n    >>> np.array(am[~am.mask])\n    array([0, 1, 2, 3, 6])\n\n    >>> np.ma.notmasked_edges(am)\n    array([0, 6])\n\n    \"\"\"\n    a = asarray(a)\n    if axis is None or a.ndim == 1:\n        return flatnotmasked_edges(a)\n    m = getmaskarray(a)\n    idx = array(np.indices(a.shape), mask=np.asarray([m] * a.ndim))\n    return [tuple([idx[i].min(axis).compressed() for i in range(a.ndim)]),\n        tuple([idx[i].max(axis).compressed() for i in range(a.ndim)])]"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "choose", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef choose(indices, choices, out=None, mode='raise'): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef choose(indices, choices, out=None, mode='raise'):\n    \"\"\"\n    Use an index array to construct a new array from a list of choices.\n\n    Given an array of integers and a list of n choice arrays, this method\n    will create a new array that merges each of the choice arrays.  Where a\n    value in `index` is i, the new array will have the value that choices[i]\n    contains in the same place.\n\n    Parameters\n    ----------\n    indices : ndarray of ints\n        This array must contain integers in ``[0, n-1]``, where n is the\n        number of choices.\n    choices : sequence of arrays\n        Choice arrays. The index array and all of the choices should be\n        broadcastable to the same shape.\n    out : array, optional\n        If provided, the result will be inserted into this array. It should\n        be of the appropriate shape and `dtype`.\n    mode : {'raise', 'wrap', 'clip'}, optional\n        Specifies how out-of-bounds indices will behave.\n\n        * 'raise' : raise an error\n        * 'wrap' : wrap around\n        * 'clip' : clip to the range\n\n    Returns\n    -------\n    merged_array : array\n\n    See Also\n    --------\n    choose : equivalent function\n\n    Examples\n    --------\n    >>> choice = np.array([[1,1,1], [2,2,2], [3,3,3]])\n    >>> a = np.array([2, 1, 0])\n    >>> np.ma.choose(a, choice)\n    masked_array(data=[3, 2, 1],\n                 mask=False,\n           fill_value=999999)\n\n    \"\"\"\n\n    def fmask(x):\n        \"\"\"Returns the filled array, or True if masked.\"\"\"\n        if x is masked:\n            return True\n        return filled(x)\n\n    def nmask(x):\n        \"\"\"Returns the mask, True if ``masked``, False if ``nomask``.\"\"\"\n        if x is masked:\n            return True\n        return getmask(x)\n    c = filled(indices, 0)\n    masks = [nmask(x) for x in choices]\n    data = [fmask(x) for x in choices]\n    outputmask = np.choose(c, masks, mode=mode)\n    outputmask = make_mask(mask_or(outputmask, getmask(indices)), copy=\n        False, shrink=True)\n    d = np.choose(c, data, mode=mode, out=out).view(MaskedArray)\n    if out is not None:\n        if isinstance(out, MaskedArray):\n            out.__setmask__(outputmask)\n        return out\n    d.__setmask__(outputmask)\n    return d"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "notmasked_contiguous", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef notmasked_contiguous(a, axis=None): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef notmasked_contiguous(a, axis=None):\n    \"\"\"\n    Find contiguous unmasked data in a masked array along the given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n    axis : int, optional\n        Axis along which to perform the operation.\n        If None (default), applies to a flattened version of the array, and this\n        is the same as `flatnotmasked_contiguous`.\n\n    Returns\n    -------\n    endpoints : list\n        A list of slices (start and end indexes) of unmasked indexes\n        in the array.\n\n        If the input is 2d and axis is specified, the result is a list of lists.\n\n    See Also\n    --------\n    flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges\n    clump_masked, clump_unmasked\n\n    Notes\n    -----\n    Only accepts 2-D arrays at most.\n\n    Examples\n    --------\n    >>> a = np.arange(12).reshape((3, 4))\n    >>> mask = np.zeros_like(a)\n    >>> mask[1:, :-1] = 1; mask[0, 1] = 1; mask[-1, 0] = 0\n    >>> ma = np.ma.array(a, mask=mask)\n    >>> ma\n    masked_array(\n      data=[[0, --, 2, 3],\n            [--, --, --, 7],\n            [8, --, --, 11]],\n      mask=[[False,  True, False, False],\n            [ True,  True,  True, False],\n            [False,  True,  True, False]],\n      fill_value=999999)\n    >>> np.array(ma[~ma.mask])\n    array([ 0,  2,  3,  7, 8, 11])\n\n    >>> np.ma.notmasked_contiguous(ma)\n    [slice(0, 1, None), slice(2, 4, None), slice(7, 9, None), slice(11, 12, None)]\n\n    >>> np.ma.notmasked_contiguous(ma, axis=0)\n    [[slice(0, 1, None), slice(2, 3, None)], [], [slice(0, 1, None)], [slice(0, 3, None)]]\n\n    >>> np.ma.notmasked_contiguous(ma, axis=1)\n    [[slice(0, 1, None), slice(2, 4, None)], [slice(3, 4, None)], [slice(0, 1, None), slice(3, 4, None)]]\n\n    \"\"\"\n    a = asarray(a)\n    nd = a.ndim\n    if nd > 2:\n        raise NotImplementedError('Currently limited to at most 2D array.')\n    if axis is None or nd == 1:\n        return flatnotmasked_contiguous(a)\n    result = []\n    other = (axis + 1) % 2\n    idx = [0, 0]\n    idx[axis] = slice(None, None)\n    for i in range(a.shape[other]):\n        idx[other] = i\n        result.append(flatnotmasked_contiguous(a[tuple(idx)]))\n    return result"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "argsort", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef argsort(a, axis=np._NoValue, kind=None, order=None, endwith=True,\n    fill_value=None, *, stable=None): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef argsort(a, axis=np._NoValue, kind=None, order=None, endwith=True,\n    fill_value=None, *, stable=None):\n    \"\"\"Function version of the eponymous method.\"\"\"\n    a = np.asanyarray(a)\n    if axis is np._NoValue:\n        axis = _deprecate_argsort_axis(a)\n    if isinstance(a, MaskedArray):\n        return a.argsort(axis=axis, kind=kind, order=order, endwith=endwith,\n            fill_value=fill_value, stable=None)\n    else:\n        return a.argsort(axis=axis, kind=kind, order=order, stable=None)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "compress_nd", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef compress_nd(x, axis=None): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef compress_nd(x, axis=None):\n    \"\"\"Suppress slices from multiple dimensions which contain masked values.\n\n    Parameters\n    ----------\n    x : array_like, MaskedArray\n        The array to operate on. If not a MaskedArray instance (or if no array\n        elements are masked), `x` is interpreted as a MaskedArray with `mask`\n        set to `nomask`.\n    axis : tuple of ints or int, optional\n        Which dimensions to suppress slices from can be configured with this\n        parameter.\n        - If axis is a tuple of ints, those are the axes to suppress slices from.\n        - If axis is an int, then that is the only axis to suppress slices from.\n        - If axis is None, all axis are selected.\n\n    Returns\n    -------\n    compress_array : ndarray\n        The compressed array.\n\n    Examples\n    --------\n    >>> arr = [[1, 2], [3, 4]]\n    >>> mask = [[0, 1], [0, 0]]\n    >>> x = np.ma.array(arr, mask=mask)\n    >>> np.ma.compress_nd(x, axis=0)\n    array([[3, 4]])\n    >>> np.ma.compress_nd(x, axis=1)\n    array([[1],\n           [3]])\n    >>> np.ma.compress_nd(x)\n    array([[3]])\n\n    \"\"\"\n    x = asarray(x)\n    m = getmask(x)\n    if axis is None:\n        axis = tuple(range(x.ndim))\n    else:\n        axis = normalize_axis_tuple(axis, x.ndim)\n    if m is nomask or not m.any():\n        return x._data\n    if m.all():\n        return nxarray([])\n    data = x._data\n    for ax in axis:\n        axes = tuple(list(range(ax)) + list(range(ax + 1, x.ndim)))\n        data = data[(slice(None),) * ax + (~m.any(axis=axes),)]\n    return data"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "asbytes", "method_path": "../srcdata/Computation/numpy/numpy/_utils/_convertions.py", "method_code_mask": "def asbytes(s): [MASK]\n", "response": "\ndef asbytes(s):\n    if isinstance(s, bytes):\n        return s\n    return str(s).encode('latin1')"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "compress_rowcols", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef compress_rowcols(x, axis=None): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef compress_rowcols(x, axis=None):\n    \"\"\"\n    Suppress the rows and/or columns of a 2-D array that contain\n    masked values.\n\n    The suppression behavior is selected with the `axis` parameter.\n\n    - If axis is None, both rows and columns are suppressed.\n    - If axis is 0, only rows are suppressed.\n    - If axis is 1 or -1, only columns are suppressed.\n\n    Parameters\n    ----------\n    x : array_like, MaskedArray\n        The array to operate on.  If not a MaskedArray instance (or if no array\n        elements are masked), `x` is interpreted as a MaskedArray with\n        `mask` set to `nomask`. Must be a 2D array.\n    axis : int, optional\n        Axis along which to perform the operation. Default is None.\n\n    Returns\n    -------\n    compressed_array : ndarray\n        The compressed array.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],\n    ...                                                   [1, 0, 0],\n    ...                                                   [0, 0, 0]])\n    >>> x\n    masked_array(\n      data=[[--, 1, 2],\n            [--, 4, 5],\n            [6, 7, 8]],\n      mask=[[ True, False, False],\n            [ True, False, False],\n            [False, False, False]],\n      fill_value=999999)\n\n    >>> np.ma.compress_rowcols(x)\n    array([[7, 8]])\n    >>> np.ma.compress_rowcols(x, 0)\n    array([[6, 7, 8]])\n    >>> np.ma.compress_rowcols(x, 1)\n    array([[1, 2],\n           [4, 5],\n           [7, 8]])\n\n    \"\"\"\n    if asarray(x).ndim != 2:\n        raise NotImplementedError('compress_rowcols works for 2D arrays only.')\n    return compress_nd(x, axis=axis)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "masked_where", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef masked_where(condition, a, copy=True): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef masked_where(condition, a, copy=True):\n    \"\"\"\n    Mask an array where a condition is met.\n\n    Return `a` as an array masked where `condition` is True.\n    Any masked values of `a` or `condition` are also masked in the output.\n\n    Parameters\n    ----------\n    condition : array_like\n        Masking condition.  When `condition` tests floating point values for\n        equality, consider using ``masked_values`` instead.\n    a : array_like\n        Array to mask.\n    copy : bool\n        If True (default) make a copy of `a` in the result.  If False modify\n        `a` in place and return a view.\n\n    Returns\n    -------\n    result : MaskedArray\n        The result of masking `a` where `condition` is True.\n\n    See Also\n    --------\n    masked_values : Mask using floating point equality.\n    masked_equal : Mask where equal to a given value.\n    masked_not_equal : Mask where *not* equal to a given value.\n    masked_less_equal : Mask where less than or equal to a given value.\n    masked_greater_equal : Mask where greater than or equal to a given value.\n    masked_less : Mask where less than a given value.\n    masked_greater : Mask where greater than a given value.\n    masked_inside : Mask inside a given interval.\n    masked_outside : Mask outside a given interval.\n    masked_invalid : Mask invalid values (NaNs or infs).\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_where(a <= 2, a)\n    masked_array(data=[--, --, --, 3],\n                 mask=[ True,  True,  True, False],\n           fill_value=999999)\n\n    Mask array `b` conditional on `a`.\n\n    >>> b = ['a', 'b', 'c', 'd']\n    >>> ma.masked_where(a == 2, b)\n    masked_array(data=['a', 'b', --, 'd'],\n                 mask=[False, False,  True, False],\n           fill_value='N/A',\n                dtype='<U1')\n\n    Effect of the `copy` argument.\n\n    >>> c = ma.masked_where(a <= 2, a)\n    >>> c\n    masked_array(data=[--, --, --, 3],\n                 mask=[ True,  True,  True, False],\n           fill_value=999999)\n    >>> c[0] = 99\n    >>> c\n    masked_array(data=[99, --, --, 3],\n                 mask=[False,  True,  True, False],\n           fill_value=999999)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> c = ma.masked_where(a <= 2, a, copy=False)\n    >>> c[0] = 99\n    >>> c\n    masked_array(data=[99, --, --, 3],\n                 mask=[False,  True,  True, False],\n           fill_value=999999)\n    >>> a\n    array([99,  1,  2,  3])\n\n    When `condition` or `a` contain masked values.\n\n    >>> a = np.arange(4)\n    >>> a = ma.masked_where(a == 2, a)\n    >>> a\n    masked_array(data=[0, 1, --, 3],\n                 mask=[False, False,  True, False],\n           fill_value=999999)\n    >>> b = np.arange(4)\n    >>> b = ma.masked_where(b == 0, b)\n    >>> b\n    masked_array(data=[--, 1, 2, 3],\n                 mask=[ True, False, False, False],\n           fill_value=999999)\n    >>> ma.masked_where(a == 3, b)\n    masked_array(data=[--, 1, --, --],\n                 mask=[ True, False,  True,  True],\n           fill_value=999999)\n\n    \"\"\"\n    cond = make_mask(condition, shrink=False)\n    a = np.array(a, copy=copy, subok=True)\n    cshape, ashape = cond.shape, a.shape\n    if cshape and cshape != ashape:\n        raise IndexError(\n            'Inconsistent shape between the condition and the input (got %s and %s)'\n             % (cshape, ashape))\n    if hasattr(a, '_mask'):\n        cond = mask_or(cond, a._mask)\n        cls = type(a)\n    else:\n        cls = MaskedArray\n    result = a.view(cls)\n    result.mask = _shrink_mask(cond)\n    if not copy and hasattr(a, '_mask') and getmask(a) is nomask:\n        a._mask = result._mask.view()\n    return result"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "apply_over_axes", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef apply_over_axes(func, a, axes): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef apply_over_axes(func, a, axes):\n    \"\"\"\n    (This docstring will be overwritten)\n    \"\"\"\n    val = asarray(a)\n    N = a.ndim\n    if array(axes).ndim == 0:\n        axes = axes,\n    for axis in axes:\n        if axis < 0:\n            axis = N + axis\n        args = val, axis\n        res = func(*args)\n        if res.ndim == val.ndim:\n            val = res\n        else:\n            res = ma.expand_dims(res, axis)\n            if res.ndim == val.ndim:\n                val = res\n            else:\n                raise ValueError(\n                    'function is not returning an array of the correct shape')\n    return val"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "mask_rowcols", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef mask_rowcols(a, axis=None): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef mask_rowcols(a, axis=None):\n    \"\"\"\n    Mask rows and/or columns of a 2D array that contain masked values.\n\n    Mask whole rows and/or columns of a 2D array that contain\n    masked values.  The masking behavior is selected using the\n    `axis` parameter.\n\n      - If `axis` is None, rows *and* columns are masked.\n      - If `axis` is 0, only rows are masked.\n      - If `axis` is 1 or -1, only columns are masked.\n\n    Parameters\n    ----------\n    a : array_like, MaskedArray\n        The array to mask.  If not a MaskedArray instance (or if no array\n        elements are masked), the result is a MaskedArray with `mask` set\n        to `nomask` (False). Must be a 2D array.\n    axis : int, optional\n        Axis along which to perform the operation. If None, applies to a\n        flattened version of the array.\n\n    Returns\n    -------\n    a : MaskedArray\n        A modified version of the input array, masked depending on the value\n        of the `axis` parameter.\n\n    Raises\n    ------\n    NotImplementedError\n        If input array `a` is not 2D.\n\n    See Also\n    --------\n    mask_rows : Mask rows of a 2D array that contain masked values.\n    mask_cols : Mask cols of a 2D array that contain masked values.\n    masked_where : Mask where a condition is met.\n\n    Notes\n    -----\n    The input array's mask is modified by this function.\n\n    Examples\n    --------\n    >>> a = np.zeros((3, 3), dtype=int)\n    >>> a[1, 1] = 1\n    >>> a\n    array([[0, 0, 0],\n           [0, 1, 0],\n           [0, 0, 0]])\n    >>> a = np.ma.masked_equal(a, 1)\n    >>> a\n    masked_array(\n      data=[[0, 0, 0],\n            [0, --, 0],\n            [0, 0, 0]],\n      mask=[[False, False, False],\n            [False,  True, False],\n            [False, False, False]],\n      fill_value=1)\n    >>> np.ma.mask_rowcols(a)\n    masked_array(\n      data=[[0, --, 0],\n            [--, --, --],\n            [0, --, 0]],\n      mask=[[False,  True, False],\n            [ True,  True,  True],\n            [False,  True, False]],\n      fill_value=1)\n\n    \"\"\"\n    a = array(a, subok=False)\n    if a.ndim != 2:\n        raise NotImplementedError('mask_rowcols works for 2D arrays only.')\n    m = getmask(a)\n    if m is nomask or not m.any():\n        return a\n    maskedval = m.nonzero()\n    a._mask = a._mask.copy()\n    if not axis:\n        a[np.unique(maskedval[0])] = masked\n    if axis in [None, 1, -1]:\n        a[:, np.unique(maskedval[1])] = masked\n    return a"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "masked_all", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef masked_all(shape, dtype=float): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef masked_all(shape, dtype=float):\n    \"\"\"\n    Empty masked array with all elements masked.\n\n    Return an empty masked array of the given shape and dtype, where all the\n    data are masked.\n\n    Parameters\n    ----------\n    shape : int or tuple of ints\n        Shape of the required MaskedArray, e.g., ``(2, 3)`` or ``2``.\n    dtype : dtype, optional\n        Data type of the output.\n\n    Returns\n    -------\n    a : MaskedArray\n        A masked array with all data masked.\n\n    See Also\n    --------\n    masked_all_like : Empty masked array modelled on an existing array.\n\n    Notes\n    -----\n    Unlike other masked array creation functions (e.g. `numpy.ma.zeros`,\n    `numpy.ma.ones`, `numpy.ma.full`), `masked_all` does not initialize the\n    values of the array, and may therefore be marginally faster. However,\n    the values stored in the newly allocated array are arbitrary. For\n    reproducible behavior, be sure to set each element of the array before\n    reading.\n\n    Examples\n    --------\n    >>> np.ma.masked_all((3, 3))\n    masked_array(\n      data=[[--, --, --],\n            [--, --, --],\n            [--, --, --]],\n      mask=[[ True,  True,  True],\n            [ True,  True,  True],\n            [ True,  True,  True]],\n      fill_value=1e+20,\n      dtype=float64)\n\n    The `dtype` parameter defines the underlying data type.\n\n    >>> a = np.ma.masked_all((3, 3))\n    >>> a.dtype\n    dtype('float64')\n    >>> a = np.ma.masked_all((3, 3), dtype=np.int32)\n    >>> a.dtype\n    dtype('int32')\n\n    \"\"\"\n    a = masked_array(np.empty(shape, dtype), mask=np.ones(shape,\n        make_mask_descr(dtype)))\n    return a"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "intersect1d", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef intersect1d(ar1, ar2, assume_unique=False): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef intersect1d(ar1, ar2, assume_unique=False):\n    \"\"\"\n    Returns the unique elements common to both arrays.\n\n    Masked values are considered equal one to the other.\n    The output is always a masked array.\n\n    See `numpy.intersect1d` for more details.\n\n    See Also\n    --------\n    numpy.intersect1d : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> x = np.ma.array([1, 3, 3, 3], mask=[0, 0, 0, 1])\n    >>> y = np.ma.array([3, 1, 1, 1], mask=[0, 0, 0, 1])\n    >>> np.ma.intersect1d(x, y)\n    masked_array(data=[1, 3, --],\n                 mask=[False, False,  True],\n           fill_value=999999)\n\n    \"\"\"\n    if assume_unique:\n        aux = ma.concatenate((ar1, ar2))\n    else:\n        aux = ma.concatenate((unique(ar1), unique(ar2)))\n    aux.sort()\n    return aux[:-1][aux[1:] == aux[:-1]]"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "isin", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef isin(element, test_elements, assume_unique=False, invert=False): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef isin(element, test_elements, assume_unique=False, invert=False):\n    \"\"\"\n    Calculates `element in test_elements`, broadcasting over\n    `element` only.\n\n    The output is always a masked array of the same shape as `element`.\n    See `numpy.isin` for more details.\n\n    See Also\n    --------\n    in1d       : Flattened version of this function.\n    numpy.isin : Equivalent function for ndarrays.\n\n    Notes\n    -----\n    .. versionadded:: 1.13.0\n\n    Examples\n    --------\n    >>> element = np.ma.array([1, 2, 3, 4, 5, 6])\n    >>> test_elements = [0, 2]\n    >>> np.ma.isin(element, test_elements)\n    masked_array(data=[False,  True, False, False, False, False],\n                 mask=False,\n           fill_value=True)\n\n    \"\"\"\n    element = ma.asarray(element)\n    return in1d(element, test_elements, assume_unique=assume_unique, invert\n        =invert).reshape(element.shape)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "setxor1d", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef setxor1d(ar1, ar2, assume_unique=False): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef setxor1d(ar1, ar2, assume_unique=False):\n    \"\"\"\n    Set exclusive-or of 1-D arrays with unique elements.\n\n    The output is always a masked array. See `numpy.setxor1d` for more details.\n\n    See Also\n    --------\n    numpy.setxor1d : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> ar1 = np.ma.array([1, 2, 3, 2, 4])\n    >>> ar2 = np.ma.array([2, 3, 5, 7, 5])\n    >>> np.ma.setxor1d(ar1, ar2)\n    masked_array(data=[1, 4, 5, 7],\n                 mask=False,    \n           fill_value=999999)\n\n    \"\"\"\n    if not assume_unique:\n        ar1 = unique(ar1)\n        ar2 = unique(ar2)\n    aux = ma.concatenate((ar1, ar2), axis=None)\n    if aux.size == 0:\n        return aux\n    aux.sort()\n    auxf = aux.filled()\n    flag = ma.concatenate(([True], auxf[1:] != auxf[:-1], [True]))\n    flag2 = flag[1:] == flag[:-1]\n    return aux[flag2]"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "polyfit", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):\n    \"\"\"\n    Any masked values in x is propagated in y, and vice-versa.\n\n    \"\"\"\n    x = asarray(x)\n    y = asarray(y)\n    m = getmask(x)\n    if y.ndim == 1:\n        m = mask_or(m, getmask(y))\n    elif y.ndim == 2:\n        my = getmask(mask_rows(y))\n        if my is not nomask:\n            m = mask_or(m, my[:, 0])\n    else:\n        raise TypeError('Expected a 1D or 2D array for y!')\n    if w is not None:\n        w = asarray(w)\n        if w.ndim != 1:\n            raise TypeError('expected a 1-d array for weights')\n        if w.shape[0] != y.shape[0]:\n            raise TypeError('expected w and y to have the same length')\n        m = mask_or(m, getmask(w))\n    if m is not nomask:\n        not_m = ~m\n        if w is not None:\n            w = w[not_m]\n        return np.polyfit(x[not_m], y[not_m], deg, rcond, full, w, cov)\n    else:\n        return np.polyfit(x, y, deg, rcond, full, w, cov)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "apply_along_axis", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef apply_along_axis(func1d, axis, arr, *args, **kwargs): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef apply_along_axis(func1d, axis, arr, *args, **kwargs):\n    \"\"\"\n    (This docstring should be overwritten)\n    \"\"\"\n    arr = array(arr, copy=False, subok=True)\n    nd = arr.ndim\n    axis = normalize_axis_index(axis, nd)\n    ind = [0] * (nd - 1)\n    i = np.zeros(nd, 'O')\n    indlist = list(range(nd))\n    indlist.remove(axis)\n    i[axis] = slice(None, None)\n    outshape = np.asarray(arr.shape).take(indlist)\n    i.put(indlist, ind)\n    res = func1d(arr[tuple(i.tolist())], *args, **kwargs)\n    asscalar = np.isscalar(res)\n    if not asscalar:\n        try:\n            len(res)\n        except TypeError:\n            asscalar = True\n    dtypes = []\n    if asscalar:\n        dtypes.append(np.asarray(res).dtype)\n        outarr = zeros(outshape, object)\n        outarr[tuple(ind)] = res\n        Ntot = np.prod(outshape)\n        k = 1\n        while k < Ntot:\n            ind[-1] += 1\n            n = -1\n            while ind[n] >= outshape[n] and n > 1 - nd:\n                ind[n - 1] += 1\n                ind[n] = 0\n                n -= 1\n            i.put(indlist, ind)\n            res = func1d(arr[tuple(i.tolist())], *args, **kwargs)\n            outarr[tuple(ind)] = res\n            dtypes.append(asarray(res).dtype)\n            k += 1\n    else:\n        res = array(res, copy=False, subok=True)\n        j = i.copy()\n        j[axis] = [slice(None, None)] * res.ndim\n        j.put(indlist, ind)\n        Ntot = np.prod(outshape)\n        holdshape = outshape\n        outshape = list(arr.shape)\n        outshape[axis] = res.shape\n        dtypes.append(asarray(res).dtype)\n        outshape = flatten_inplace(outshape)\n        outarr = zeros(outshape, object)\n        outarr[tuple(flatten_inplace(j.tolist()))] = res\n        k = 1\n        while k < Ntot:\n            ind[-1] += 1\n            n = -1\n            while ind[n] >= holdshape[n] and n > 1 - nd:\n                ind[n - 1] += 1\n                ind[n] = 0\n                n -= 1\n            i.put(indlist, ind)\n            j.put(indlist, ind)\n            res = func1d(arr[tuple(i.tolist())], *args, **kwargs)\n            outarr[tuple(flatten_inplace(j.tolist()))] = res\n            dtypes.append(asarray(res).dtype)\n            k += 1\n    max_dtypes = np.dtype(np.asarray(dtypes).max())\n    if not hasattr(arr, '_mask'):\n        result = np.asarray(outarr, dtype=max_dtypes)\n    else:\n        result = asarray(outarr, dtype=max_dtypes)\n        result.fill_value = ma.default_fill_value(result)\n    return result"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "masked_equal", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef masked_equal(x, value, copy=True): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef masked_equal(x, value, copy=True):\n    \"\"\"\n    Mask an array where equal to a given value.\n\n    Return a MaskedArray, masked where the data in array `x` are\n    equal to `value`. The fill_value of the returned MaskedArray\n    is set to `value`.\n\n    For floating point arrays, consider using ``masked_values(x, value)``.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n    masked_values : Mask using floating point equality.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_equal(a, 2)\n    masked_array(data=[0, 1, --, 3],\n                 mask=[False, False,  True, False],\n           fill_value=2)\n\n    \"\"\"\n    output = masked_where(equal(x, value), x, copy=copy)\n    output.fill_value = value\n    return output"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "in1d", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef in1d(ar1, ar2, assume_unique=False, invert=False): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef in1d(ar1, ar2, assume_unique=False, invert=False):\n    \"\"\"\n    Test whether each element of an array is also present in a second\n    array.\n\n    The output is always a masked array. See `numpy.in1d` for more details.\n\n    We recommend using :func:`isin` instead of `in1d` for new code.\n\n    See Also\n    --------\n    isin       : Version of this function that preserves the shape of ar1.\n    numpy.in1d : Equivalent function for ndarrays.\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    Examples\n    --------\n    >>> ar1 = np.ma.array([0, 1, 2, 5, 0])\n    >>> ar2 = [0, 2]\n    >>> np.ma.in1d(ar1, ar2)\n    masked_array(data=[ True, False,  True, False,  True],\n                 mask=False,\n           fill_value=True)\n\n    \"\"\"\n    if not assume_unique:\n        ar1, rev_idx = unique(ar1, return_inverse=True)\n        ar2 = unique(ar2)\n    ar = ma.concatenate((ar1, ar2))\n    order = ar.argsort(kind='mergesort')\n    sar = ar[order]\n    if invert:\n        bool_ar = sar[1:] != sar[:-1]\n    else:\n        bool_ar = sar[1:] == sar[:-1]\n    flag = ma.concatenate((bool_ar, [invert]))\n    indx = order.argsort(kind='mergesort')[:len(ar1)]\n    if assume_unique:\n        return flag[indx]\n    else:\n        return flag[indx][rev_idx]"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "unique", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef unique(ar1, return_index=False, return_inverse=False): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef unique(ar1, return_index=False, return_inverse=False):\n    \"\"\"\n    Finds the unique elements of an array.\n\n    Masked values are considered the same element (masked). The output array\n    is always a masked array. See `numpy.unique` for more details.\n\n    See Also\n    --------\n    numpy.unique : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> a = [1, 2, 1000, 2, 3]\n    >>> mask = [0, 0, 1, 0, 0]\n    >>> masked_a = np.ma.masked_array(a, mask)\n    >>> masked_a\n    masked_array(data=[1, 2, --, 2, 3],\n                mask=[False, False,  True, False, False],\n        fill_value=999999)\n    >>> np.ma.unique(masked_a)\n    masked_array(data=[1, 2, 3, --],\n                mask=[False, False, False,  True],\n        fill_value=999999)\n    >>> np.ma.unique(masked_a, return_index=True)\n    (masked_array(data=[1, 2, 3, --],\n                mask=[False, False, False,  True],\n        fill_value=999999), array([0, 1, 4, 2]))\n    >>> np.ma.unique(masked_a, return_inverse=True)\n    (masked_array(data=[1, 2, 3, --],\n                mask=[False, False, False,  True],\n        fill_value=999999), array([0, 1, 3, 1, 2]))\n    >>> np.ma.unique(masked_a, return_index=True, return_inverse=True)\n    (masked_array(data=[1, 2, 3, --],\n                mask=[False, False, False,  True],\n        fill_value=999999), array([0, 1, 4, 2]), array([0, 1, 3, 1, 2]))\n    \"\"\"\n    output = np.unique(ar1, return_index=return_index, return_inverse=\n        return_inverse)\n    if isinstance(output, tuple):\n        output = list(output)\n        output[0] = output[0].view(MaskedArray)\n        output = tuple(output)\n    else:\n        output = output.view(MaskedArray)\n    return output"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "fft1", "method_path": "../srcdata/Computation/numpy/numpy/fft/tests/test_pocketfft.py", "method_code_mask": "import numpy as np\nimport pytest\nfrom numpy.random import random\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_allclose\nimport threading\nimport queue\n\n\ndef fft1(x): [MASK]\n", "response": "import numpy as np\nimport pytest\nfrom numpy.random import random\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_allclose\nimport threading\nimport queue\ndef fft1(x):\n    L = len(x)\n    phase = -2.0j * np.pi * (np.arange(L) / L)\n    phase = np.arange(L).reshape(-1, 1) * phase\n    return np.sum(x * np.exp(phase), axis=1)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "where", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef where(condition, x=_NoValue, y=_NoValue): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef where(condition, x=_NoValue, y=_NoValue):\n    \"\"\"\n    Return a masked array with elements from `x` or `y`, depending on condition.\n\n    .. note::\n        When only `condition` is provided, this function is identical to\n        `nonzero`. The rest of this documentation covers only the case where\n        all three arguments are provided.\n\n    Parameters\n    ----------\n    condition : array_like, bool\n        Where True, yield `x`, otherwise yield `y`.\n    x, y : array_like, optional\n        Values from which to choose. `x`, `y` and `condition` need to be\n        broadcastable to some shape.\n\n    Returns\n    -------\n    out : MaskedArray\n        An masked array with `masked` elements where the condition is masked,\n        elements from `x` where `condition` is True, and elements from `y`\n        elsewhere.\n\n    See Also\n    --------\n    numpy.where : Equivalent function in the top-level NumPy module.\n    nonzero : The function that is called when x and y are omitted\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9.).reshape(3, 3), mask=[[0, 1, 0],\n    ...                                                    [1, 0, 1],\n    ...                                                    [0, 1, 0]])\n    >>> x\n    masked_array(\n      data=[[0.0, --, 2.0],\n            [--, 4.0, --],\n            [6.0, --, 8.0]],\n      mask=[[False,  True, False],\n            [ True, False,  True],\n            [False,  True, False]],\n      fill_value=1e+20)\n    >>> np.ma.where(x > 5, x, -3.1416)\n    masked_array(\n      data=[[-3.1416, --, -3.1416],\n            [--, -3.1416, --],\n            [6.0, --, 8.0]],\n      mask=[[False,  True, False],\n            [ True, False,  True],\n            [False,  True, False]],\n      fill_value=1e+20)\n\n    \"\"\"\n    missing = (x is _NoValue, y is _NoValue).count(True)\n    if missing == 1:\n        raise ValueError(\"Must provide both 'x' and 'y' or neither.\")\n    if missing == 2:\n        return nonzero(condition)\n    cf = filled(condition, False)\n    xd = getdata(x)\n    yd = getdata(y)\n    cm = getmaskarray(condition)\n    xm = getmaskarray(x)\n    ym = getmaskarray(y)\n    if x is masked and y is not masked:\n        xd = np.zeros((), dtype=yd.dtype)\n        xm = np.ones((), dtype=ym.dtype)\n    elif y is masked and x is not masked:\n        yd = np.zeros((), dtype=xd.dtype)\n        ym = np.ones((), dtype=xm.dtype)\n    data = np.where(cf, xd, yd)\n    mask = np.where(cf, xm, ym)\n    mask = np.where(cm, np.ones((), dtype=mask.dtype), mask)\n    mask = _shrink_mask(mask)\n    return masked_array(data, mask=mask)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "hermline", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/hermite.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef hermline(off, scl): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef hermline(off, scl):\n    \"\"\"\n    Hermite series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Hermite series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermline, hermval\n    >>> hermval(0,hermline(3, 2))\n    3.0\n    >>> hermval(1,hermline(3, 2))\n    5.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl / 2])\n    else:\n        return np.array([off])"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "hermweight", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/hermite.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef hermweight(x): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef hermweight(x):\n    \"\"\"\n    Weight function of the Hermite polynomials.\n\n    The weight function is :math:`\\\\exp(-x^2)` and the interval of\n    integration is :math:`[-\\\\inf, \\\\inf]`. the Hermite polynomials are\n    orthogonal, but not normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.7.0\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermweight\n    >>> x = np.arange(-2, 2)\n    >>> hermweight(x)\n    array([0.01831564, 0.36787944, 1.        , 0.36787944])\n\n    \"\"\"\n    w = np.exp(-x ** 2)\n    return w"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "setdiff1d", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef setdiff1d(ar1, ar2, assume_unique=False): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef setdiff1d(ar1, ar2, assume_unique=False):\n    \"\"\"\n    Set difference of 1D arrays with unique elements.\n\n    The output is always a masked array. See `numpy.setdiff1d` for more\n    details.\n\n    See Also\n    --------\n    numpy.setdiff1d : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> x = np.ma.array([1, 2, 3, 4], mask=[0, 1, 0, 1])\n    >>> np.ma.setdiff1d(x, [1, 2])\n    masked_array(data=[3, --],\n                 mask=[False,  True],\n           fill_value=999999)\n\n    \"\"\"\n    if assume_unique:\n        ar1 = ma.asarray(ar1).ravel()\n    else:\n        ar1 = unique(ar1)\n        ar2 = unique(ar2)\n    return ar1[in1d(ar1, ar2, assume_unique=True, invert=True)]"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "hermval", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/hermite.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef hermval(x, c, tensor=True): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef hermval(x, c, tensor=True):\n    \"\"\"\n    Evaluate an Hermite series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * H_0(x) + c_1 * H_1(x) + ... + c_n * H_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n        .. versionadded:: 1.7.0\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    hermval2d, hermgrid2d, hermval3d, hermgrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermval\n    >>> coef = [1,2,3]\n    >>> hermval(1, coef)\n    11.0\n    >>> hermval([[1,2],[3,4]], coef)\n    array([[ 11.,   51.],\n           [115.,  203.]])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n    x2 = x * 2\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        nd = len(c)\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = c[-i] - c1 * (2 * (nd - 1))\n            c1 = tmp + c1 * x2\n    return c0 + c1 * x2"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "mapparms", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/polyutils.py", "method_code_mask": "import operator\nimport functools\nimport warnings\nimport numpy as np\n\n\ndef mapparms(old, new): [MASK]\n", "response": "import operator\nimport functools\nimport warnings\nimport numpy as np\ndef mapparms(old, new):\n    \"\"\"\n    Linear map parameters between domains.\n\n    Return the parameters of the linear map ``offset + scale*x`` that maps\n    `old` to `new` such that ``old[i] -> new[i]``, ``i = 0, 1``.\n\n    Parameters\n    ----------\n    old, new : array_like\n        Domains. Each domain must (successfully) convert to a 1-d array\n        containing precisely two values.\n\n    Returns\n    -------\n    offset, scale : scalars\n        The map ``L(x) = offset + scale*x`` maps the first domain to the\n        second.\n\n    See Also\n    --------\n    getdomain, mapdomain\n\n    Notes\n    -----\n    Also works for complex numbers, and thus can be used to calculate the\n    parameters required to map any line in the complex plane to any other\n    line therein.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polyutils as pu\n    >>> pu.mapparms((-1,1),(-1,1))\n    (0.0, 1.0)\n    >>> pu.mapparms((1,-1),(-1,1))\n    (-0.0, -1.0)\n    >>> i = complex(0,1)\n    >>> pu.mapparms((-i,-1),(1,i))\n    ((1+1j), (1-0j))\n\n    \"\"\"\n    oldlen = old[1] - old[0]\n    newlen = new[1] - new[0]\n    off = (old[1] * new[0] - old[0] * new[1]) / oldlen\n    scl = newlen / oldlen\n    return off, scl"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "average", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef average(a, axis=None, weights=None, returned=False, *, keepdims=np._NoValue\n    ): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef average(a, axis=None, weights=None, returned=False, *, keepdims=np._NoValue\n    ):\n    \"\"\"\n    Return the weighted average of array over the given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Data to be averaged.\n        Masked entries are not taken into account in the computation.\n    axis : None or int or tuple of ints, optional\n        Axis or axes along which to average `a`.  The default,\n        `axis=None`, will average over all of the elements of the input array.\n        If axis is a tuple of ints, averaging is performed on all of the axes\n        specified in the tuple instead of a single axis or all the axes as\n        before.\n    weights : array_like, optional\n        An array of weights associated with the values in `a`. Each value in\n        `a` contributes to the average according to its associated weight.\n        The array of weights must be the same shape as `a` if no axis is\n        specified, otherwise the weights must have dimensions and shape\n        consistent with `a` along the specified axis.\n        If `weights=None`, then all data in `a` are assumed to have a\n        weight equal to one.\n        The calculation is::\n\n            avg = sum(a * weights) / sum(weights)\n\n        where the sum is over all included elements.\n        The only constraint on the values of `weights` is that `sum(weights)`\n        must not be 0.\n    returned : bool, optional\n        Flag indicating whether a tuple ``(result, sum of weights)``\n        should be returned as output (True), or just the result (False).\n        Default is False.\n    keepdims : bool, optional\n        If this is set to True, the axes which are reduced are left\n        in the result as dimensions with size one. With this option,\n        the result will broadcast correctly against the original `a`.\n        *Note:* `keepdims` will not work with instances of `numpy.matrix`\n        or other classes whose methods do not support `keepdims`.\n\n        .. versionadded:: 1.23.0\n\n    Returns\n    -------\n    average, [sum_of_weights] : (tuple of) scalar or MaskedArray\n        The average along the specified axis. When returned is `True`,\n        return a tuple with the average as the first element and the sum\n        of the weights as the second element. The return type is `np.float64`\n        if `a` is of integer type and floats smaller than `float64`, or the\n        input data-type, otherwise. If returned, `sum_of_weights` is always\n        `float64`.\n\n    Raises\n    ------\n    ZeroDivisionError\n        When all weights along axis are zero. See `numpy.ma.average` for a\n        version robust to this type of error.\n    TypeError\n        When `weights` does not have the same shape as `a`, and `axis=None`.\n    ValueError\n        When `weights` does not have dimensions and shape consistent with `a`\n        along specified `axis`.\n\n    Examples\n    --------\n    >>> a = np.ma.array([1., 2., 3., 4.], mask=[False, False, True, True])\n    >>> np.ma.average(a, weights=[3, 1, 0, 0])\n    1.25\n\n    >>> x = np.ma.arange(6.).reshape(3, 2)\n    >>> x\n    masked_array(\n      data=[[0., 1.],\n            [2., 3.],\n            [4., 5.]],\n      mask=False,\n      fill_value=1e+20)\n    >>> data = np.arange(8).reshape((2, 2, 2))\n    >>> data\n    array([[[0, 1],\n            [2, 3]],\n           [[4, 5],\n            [6, 7]]])\n    >>> np.ma.average(data, axis=(0, 1), weights=[[1./4, 3./4], [1., 1./2]])\n    masked_array(data=[3.4, 4.4],\n             mask=[False, False],\n       fill_value=1e+20)\n    >>> np.ma.average(data, axis=0, weights=[[1./4, 3./4], [1., 1./2]])\n    Traceback (most recent call last):\n        ...\n    ValueError: Shape of weights must be consistent\n    with shape of a along specified axis.\n\n    >>> avg, sumweights = np.ma.average(x, axis=0, weights=[1, 2, 3],\n    ...                                 returned=True)\n    >>> avg\n    masked_array(data=[2.6666666666666665, 3.6666666666666665],\n                 mask=[False, False],\n           fill_value=1e+20)\n\n    With ``keepdims=True``, the following result has shape (3, 1).\n\n    >>> np.ma.average(x, axis=1, keepdims=True)\n    masked_array(\n      data=[[0.5],\n            [2.5],\n            [4.5]],\n      mask=False,\n      fill_value=1e+20)\n    \"\"\"\n    a = asarray(a)\n    m = getmask(a)\n    if axis is not None:\n        axis = normalize_axis_tuple(axis, a.ndim, argname='axis')\n    if keepdims is np._NoValue:\n        keepdims_kw = {}\n    else:\n        keepdims_kw = {'keepdims': keepdims}\n    if weights is None:\n        avg = a.mean(axis, **keepdims_kw)\n        scl = avg.dtype.type(a.count(axis))\n    else:\n        wgt = asarray(weights)\n        if issubclass(a.dtype.type, (np.integer, np.bool)):\n            result_dtype = np.result_type(a.dtype, wgt.dtype, 'f8')\n        else:\n            result_dtype = np.result_type(a.dtype, wgt.dtype)\n        if a.shape != wgt.shape:\n            if axis is None:\n                raise TypeError(\n                    'Axis must be specified when shapes of a and weights differ.'\n                    )\n            if wgt.shape != tuple(a.shape[ax] for ax in axis):\n                raise ValueError(\n                    'Shape of weights must be consistent with shape of a along specified axis.'\n                    )\n            wgt = wgt.transpose(np.argsort(axis))\n            wgt = wgt.reshape(tuple(s if ax in axis else 1 for ax, s in\n                enumerate(a.shape)))\n        if m is not nomask:\n            wgt = wgt * ~a.mask\n            wgt.mask |= a.mask\n        scl = wgt.sum(axis=axis, dtype=result_dtype, **keepdims_kw)\n        avg = np.multiply(a, wgt, dtype=result_dtype).sum(axis, **keepdims_kw\n            ) / scl\n    if returned:\n        if scl.shape != avg.shape:\n            scl = np.broadcast_to(scl, avg.shape).copy()\n        return avg, scl\n    else:\n        return avg"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "_zseries_to_cseries", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/chebyshev.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef _zseries_to_cseries(zs): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef _zseries_to_cseries(zs):\n    \"\"\"Convert z-series to a Chebyshev series.\n\n    Convert a z series to the equivalent Chebyshev series. The result is\n    never an empty array. The dtype of the return is the same as that of\n    the input. No checks are run on the arguments as this routine is for\n    internal use.\n\n    Parameters\n    ----------\n    zs : 1-D ndarray\n        Odd length symmetric z-series, ordered from  low to high.\n\n    Returns\n    -------\n    c : 1-D ndarray\n        Chebyshev coefficients, ordered from  low to high.\n\n    \"\"\"\n    n = (zs.size + 1) // 2\n    c = zs[n - 1:].copy()\n    c[1:n] *= 2\n    return c"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "lagweight", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/laguerre.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef lagweight(x): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef lagweight(x):\n    \"\"\"Weight function of the Laguerre polynomials.\n\n    The weight function is :math:`exp(-x)` and the interval of integration\n    is :math:`[0, \\\\inf]`. The Laguerre polynomials are orthogonal, but not\n    normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.7.0\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagweight\n    >>> x = np.array([0, 1, 2])\n    >>> lagweight(x)\n    array([1.        , 0.36787944, 0.13533528])\n\n    \"\"\"\n    w = np.exp(-x)\n    return w"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "trimseq", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/polyutils.py", "method_code_mask": "import operator\nimport functools\nimport warnings\nimport numpy as np\n\n\ndef trimseq(seq): [MASK]\n", "response": "import operator\nimport functools\nimport warnings\nimport numpy as np\ndef trimseq(seq):\n    \"\"\"Remove small Poly series coefficients.\n\n    Parameters\n    ----------\n    seq : sequence\n        Sequence of Poly series coefficients.\n\n    Returns\n    -------\n    series : sequence\n        Subsequence with trailing zeros removed. If the resulting sequence\n        would be empty, return the first element. The returned sequence may\n        or may not be a view.\n\n    Notes\n    -----\n    Do not lose the type info if the sequence contains unknown objects.\n\n    \"\"\"\n    if len(seq) == 0 or seq[-1] != 0:\n        return seq\n    else:\n        for i in range(len(seq) - 1, -1, -1):\n            if seq[i] != 0:\n                break\n        return seq[:i + 1]"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "_cseries_to_zseries", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/chebyshev.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef _cseries_to_zseries(c): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef _cseries_to_zseries(c):\n    \"\"\"Convert Chebyshev series to z-series.\n\n    Convert a Chebyshev series to the equivalent z-series. The result is\n    never an empty array. The dtype of the return is the same as that of\n    the input. No checks are run on the arguments as this routine is for\n    internal use.\n\n    Parameters\n    ----------\n    c : 1-D ndarray\n        Chebyshev coefficients, ordered from low to high\n\n    Returns\n    -------\n    zs : 1-D ndarray\n        Odd length symmetric z-series, ordered from  low to high.\n\n    \"\"\"\n    n = c.size\n    zs = np.zeros(2 * n - 1, dtype=c.dtype)\n    zs[n - 1:] = c / 2\n    return zs + zs[::-1]"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "ndenumerate", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef ndenumerate(a, compressed=True): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef ndenumerate(a, compressed=True):\n    \"\"\"\n    Multidimensional index iterator.\n\n    Return an iterator yielding pairs of array coordinates and values,\n    skipping elements that are masked. With `compressed=False`,\n    `ma.masked` is yielded as the value of masked elements. This\n    behavior differs from that of `numpy.ndenumerate`, which yields the\n    value of the underlying data array.\n\n    Notes\n    -----\n    .. versionadded:: 1.23.0\n\n    Parameters\n    ----------\n    a : array_like\n        An array with (possibly) masked elements.\n    compressed : bool, optional\n        If True (default), masked elements are skipped.\n\n    See Also\n    --------\n    numpy.ndenumerate : Equivalent function ignoring any mask.\n\n    Examples\n    --------\n    >>> a = np.ma.arange(9).reshape((3, 3))\n    >>> a[1, 0] = np.ma.masked\n    >>> a[1, 2] = np.ma.masked\n    >>> a[2, 1] = np.ma.masked\n    >>> a\n    masked_array(\n      data=[[0, 1, 2],\n            [--, 4, --],\n            [6, --, 8]],\n      mask=[[False, False, False],\n            [ True, False,  True],\n            [False,  True, False]],\n      fill_value=999999)\n    >>> for index, x in np.ma.ndenumerate(a):\n    ...     print(index, x)\n    (0, 0) 0\n    (0, 1) 1\n    (0, 2) 2\n    (1, 1) 4\n    (2, 0) 6\n    (2, 2) 8\n\n    >>> for index, x in np.ma.ndenumerate(a, compressed=False):\n    ...     print(index, x)\n    (0, 0) 0\n    (0, 1) 1\n    (0, 2) 2\n    (1, 0) --\n    (1, 1) 4\n    (1, 2) --\n    (2, 0) 6\n    (2, 1) --\n    (2, 2) 8\n    \"\"\"\n    for it, mask in zip(np.ndenumerate(a), getmaskarray(a).flat):\n        if not mask:\n            yield it\n        elif not compressed:\n            yield it[0], masked"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "chebweight", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/chebyshev.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef chebweight(x): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef chebweight(x):\n    \"\"\"\n    The weight function of the Chebyshev polynomials.\n\n    The weight function is :math:`1/\\\\sqrt{1 - x^2}` and the interval of\n    integration is :math:`[-1, 1]`. The Chebyshev polynomials are\n    orthogonal, but not normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.7.0\n\n    \"\"\"\n    w = 1.0 / (np.sqrt(1.0 + x) * np.sqrt(1.0 - x))\n    return w"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "chebline", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/chebyshev.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef chebline(off, scl): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef chebline(off, scl):\n    \"\"\"\n    Chebyshev series whose graph is a straight line.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Chebyshev series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as C\n    >>> C.chebline(3,2)\n    array([3, 2])\n    >>> C.chebval(-3, C.chebline(3,2)) # should be -3\n    -3.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl])\n    else:\n        return np.array([off])"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "polyvalfromroots", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/polynomial.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef polyvalfromroots(x, r, tensor=True): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef polyvalfromroots(x, r, tensor=True):\n    \"\"\"\n    Evaluate a polynomial specified by its roots at points x.\n\n    If `r` is of length ``N``, this function returns the value\n\n    .. math:: p(x) = \\\\prod_{n=1}^{N} (x - r_n)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `r`.\n\n    If `r` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If `r`\n    is multidimensional, then the shape of the result depends on the value of\n    `tensor`. If `tensor` is ``True`` the shape will be r.shape[1:] + x.shape;\n    that is, each polynomial is evaluated at every value of `x`. If `tensor` is\n    ``False``, the shape will be r.shape[1:]; that is, each polynomial is\n    evaluated only for the corresponding broadcast value of `x`. Note that\n    scalars have shape (,).\n\n    .. versionadded:: 1.12\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        with themselves and with the elements of `r`.\n    r : array_like\n        Array of roots. If `r` is multidimensional the first index is the\n        root index, while the remaining indices enumerate multiple\n        polynomials. For instance, in the two dimensional case the roots\n        of each polynomial may be thought of as stored in the columns of `r`.\n    tensor : boolean, optional\n        If True, the shape of the roots array is extended with ones on the\n        right, one for each dimension of `x`. Scalars have dimension 0 for this\n        action. The result is that every column of coefficients in `r` is\n        evaluated for every element of `x`. If False, `x` is broadcast over the\n        columns of `r` for the evaluation.  This keyword is useful when `r` is\n        multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The shape of the returned array is described above.\n\n    See Also\n    --------\n    polyroots, polyfromroots, polyval\n\n    Examples\n    --------\n    >>> from numpy.polynomial.polynomial import polyvalfromroots\n    >>> polyvalfromroots(1, [1, 2, 3])\n    0.0\n    >>> a = np.arange(4).reshape(2, 2)\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> polyvalfromroots(a, [-1, 0, 1])\n    array([[-0.,   0.],\n           [ 6.,  24.]])\n    >>> r = np.arange(-2, 2).reshape(2,2)  # multidimensional coefficients\n    >>> r # each column of r defines one polynomial\n    array([[-2, -1],\n           [ 0,  1]])\n    >>> b = [-2, 1]\n    >>> polyvalfromroots(b, r, tensor=True)\n    array([[-0.,  3.],\n           [ 3., 0.]])\n    >>> polyvalfromroots(b, r, tensor=False)\n    array([-0.,  0.])\n\n    \"\"\"\n    r = np.array(r, ndmin=1, copy=None)\n    if r.dtype.char in '?bBhHiIlLqQpP':\n        r = r.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray):\n        if tensor:\n            r = r.reshape(r.shape + (1,) * x.ndim)\n        elif x.ndim >= r.ndim:\n            raise ValueError('x.ndim must be < r.ndim when tensor == False')\n    return np.prod(x - r, axis=0)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "chebpts1", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/chebyshev.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef chebpts1(npts): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef chebpts1(npts):\n    \"\"\"\n    Chebyshev points of the first kind.\n\n    The Chebyshev points of the first kind are the points ``cos(x)``,\n    where ``x = [pi*(k + .5)/npts for k in range(npts)]``.\n\n    Parameters\n    ----------\n    npts : int\n        Number of sample points desired.\n\n    Returns\n    -------\n    pts : ndarray\n        The Chebyshev points of the first kind.\n\n    See Also\n    --------\n    chebpts2\n\n    Notes\n    -----\n\n    .. versionadded:: 1.5.0\n\n    \"\"\"\n    _npts = int(npts)\n    if _npts != npts:\n        raise ValueError('npts must be integer')\n    if _npts < 1:\n        raise ValueError('npts must be >= 1')\n    x = 0.5 * np.pi / _npts * np.arange(-_npts + 1, _npts + 1, 2)\n    return np.sin(x)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "hermeweight", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/hermite_e.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef hermeweight(x): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef hermeweight(x):\n    \"\"\"Weight function of the Hermite_e polynomials.\n\n    The weight function is :math:`\\\\exp(-x^2/2)` and the interval of\n    integration is :math:`[-\\\\inf, \\\\inf]`. the HermiteE polynomials are\n    orthogonal, but not normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.7.0\n\n    \"\"\"\n    w = np.exp(-0.5 * x ** 2)\n    return w"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "polyval", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/polynomial.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef polyval(x, c, tensor=True): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef polyval(x, c, tensor=True):\n    \"\"\"\n    Evaluate a polynomial at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value\n\n    .. math:: p(x) = c_0 + c_1 * x + ... + c_n * x^n\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        with themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n        .. versionadded:: 1.7.0\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The shape of the returned array is described above.\n\n    See Also\n    --------\n    polyval2d, polygrid2d, polyval3d, polygrid3d\n\n    Notes\n    -----\n    The evaluation uses Horner's method.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.polynomial import polyval\n    >>> polyval(1, [1,2,3])\n    6.0\n    >>> a = np.arange(4).reshape(2,2)\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> polyval(a, [1, 2, 3])\n    array([[ 1.,   6.],\n           [17.,  34.]])\n    >>> coef = np.arange(4).reshape(2, 2)  # multidimensional coefficients\n    >>> coef\n    array([[0, 1],\n           [2, 3]])\n    >>> polyval([1, 2], coef, tensor=True)\n    array([[2.,  4.],\n           [4.,  7.]])\n    >>> polyval([1, 2], coef, tensor=False)\n    array([2.,  7.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c + 0.0\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n    c0 = c[-1] + x * 0\n    for i in range(2, len(c) + 1):\n        c0 = c[-i] + c0 * x\n    return c0"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "lagval", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/laguerre.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef lagval(x, c, tensor=True): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef lagval(x, c, tensor=True):\n    \"\"\"\n    Evaluate a Laguerre series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * L_0(x) + c_1 * L_1(x) + ... + c_n * L_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n        .. versionadded:: 1.7.0\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    lagval2d, laggrid2d, lagval3d, laggrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagval\n    >>> coef = [1, 2, 3]\n    >>> lagval(1, coef)\n    -0.5\n    >>> lagval([[1, 2],[3, 4]], coef)\n    array([[-0.5, -4. ],\n           [-4.5, -2. ]])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        nd = len(c)\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = c[-i] - c1 * (nd - 1) / nd\n            c1 = tmp + c1 * (2 * nd - 1 - x) / nd\n    return c0 + c1 * (1 - x)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "hermeline", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/hermite_e.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef hermeline(off, scl): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef hermeline(off, scl):\n    \"\"\"\n    Hermite series whose graph is a straight line.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Hermite series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeline\n    >>> from numpy.polynomial.hermite_e import hermeline, hermeval\n    >>> hermeval(0,hermeline(3, 2))\n    3.0\n    >>> hermeval(1,hermeline(3, 2))\n    5.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl])\n    else:\n        return np.array([off])"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "markinnerspaces", "method_path": "../srcdata/Computation/numpy/numpy/f2py/crackfortran.py", "method_code_mask": "import sys\nimport string\nimport fileinput\nimport re\nimport os\nimport copy\nimport platform\nimport codecs\nfrom pathlib import Path\nimport charset_normalizer\n\n\ndef markinnerspaces(line): [MASK]\n", "response": "import sys\nimport string\nimport fileinput\nimport re\nimport os\nimport copy\nimport platform\nimport codecs\nfrom pathlib import Path\nimport charset_normalizer\ndef markinnerspaces(line):\n    \"\"\"\n    The function replace all spaces in the input variable line which are \n    surrounded with quotation marks, with the triplet \"@_@\".\n\n    For instance, for the input \"a 'b c'\" the function returns \"a 'b@_@c'\"\n\n    Parameters\n    ----------\n    line : str\n\n    Returns\n    -------\n    str\n\n    \"\"\"\n    fragment = ''\n    inside = False\n    current_quote = None\n    escaped = ''\n    for c in line:\n        if escaped == '\\\\' and c in ['\\\\', \"'\", '\"']:\n            fragment += c\n            escaped = c\n            continue\n        if not inside and c in [\"'\", '\"']:\n            current_quote = c\n        if c == current_quote:\n            inside = not inside\n        elif c == ' ' and inside:\n            fragment += '@_@'\n            continue\n        fragment += c\n        escaped = c\n    return fragment"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "chebval", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/chebyshev.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef chebval(x, c, tensor=True): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef chebval(x, c, tensor=True):\n    \"\"\"\n    Evaluate a Chebyshev series at points x.\n\n    If `c` is of length `n + 1`, this function returns the value:\n\n    .. math:: p(x) = c_0 * T_0(x) + c_1 * T_1(x) + ... + c_n * T_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n        .. versionadded:: 1.7.0\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    chebval2d, chebgrid2d, chebval3d, chebgrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        x2 = 2 * x\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            c0 = c[-i] - c1\n            c1 = tmp + c1 * x2\n    return c0 + c1 * x"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "polyline", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/polynomial.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef polyline(off, scl): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef polyline(off, scl):\n    \"\"\"\n    Returns an array representing a linear polynomial.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The \"y-intercept\" and \"slope\" of the line, respectively.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the linear polynomial ``off +\n        scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> P.polyline(1, -1)\n    array([ 1, -1])\n    >>> P.polyval(1, P.polyline(1, -1))  # should be 0\n    0.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl])\n    else:\n        return np.array([off])"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "legweight", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/legendre.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef legweight(x): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef legweight(x):\n    \"\"\"\n    Weight function of the Legendre polynomials.\n\n    The weight function is :math:`1` and the interval of integration is\n    :math:`[-1, 1]`. The Legendre polynomials are orthogonal, but not\n    normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.7.0\n\n    \"\"\"\n    w = x * 0.0 + 1.0\n    return w"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "easy_dtype", "method_path": "../srcdata/Computation/numpy/numpy/lib/_iotools.py", "method_code_mask": "import numpy as np\n\n\ndef easy_dtype(ndtype, names=None, defaultfmt='f%i', **validationargs): [MASK]\n", "response": "import numpy as np\ndef easy_dtype(ndtype, names=None, defaultfmt='f%i', **validationargs):\n    \"\"\"\n    Convenience function to create a `np.dtype` object.\n\n    The function processes the input `dtype` and matches it with the given\n    names.\n\n    Parameters\n    ----------\n    ndtype : var\n        Definition of the dtype. Can be any string or dictionary recognized\n        by the `np.dtype` function, or a sequence of types.\n    names : str or sequence, optional\n        Sequence of strings to use as field names for a structured dtype.\n        For convenience, `names` can be a string of a comma-separated list\n        of names.\n    defaultfmt : str, optional\n        Format string used to define missing names, such as ``\"f%i\"``\n        (default) or ``\"fields_%02i\"``.\n    validationargs : optional\n        A series of optional arguments used to initialize a\n        `NameValidator`.\n\n    Examples\n    --------\n    >>> np.lib._iotools.easy_dtype(float)\n    dtype('float64')\n    >>> np.lib._iotools.easy_dtype(\"i4, f8\")\n    dtype([('f0', '<i4'), ('f1', '<f8')])\n    >>> np.lib._iotools.easy_dtype(\"i4, f8\", defaultfmt=\"field_%03i\")\n    dtype([('field_000', '<i4'), ('field_001', '<f8')])\n\n    >>> np.lib._iotools.easy_dtype((int, float, float), names=\"a,b,c\")\n    dtype([('a', '<i8'), ('b', '<f8'), ('c', '<f8')])\n    >>> np.lib._iotools.easy_dtype(float, names=\"a,b,c\")\n    dtype([('a', '<f8'), ('b', '<f8'), ('c', '<f8')])\n\n    \"\"\"\n    try:\n        ndtype = np.dtype(ndtype)\n    except TypeError:\n        validate = NameValidator(**validationargs)\n        nbfields = len(ndtype)\n        if names is None:\n            names = [''] * len(ndtype)\n        elif isinstance(names, str):\n            names = names.split(',')\n        names = validate(names, nbfields=nbfields, defaultfmt=defaultfmt)\n        ndtype = np.dtype(dict(formats=ndtype, names=names))\n    else:\n        if names is not None:\n            validate = NameValidator(**validationargs)\n            if isinstance(names, str):\n                names = names.split(',')\n            if ndtype.names is None:\n                formats = tuple([ndtype.type] * len(names))\n                names = validate(names, defaultfmt=defaultfmt)\n                ndtype = np.dtype(list(zip(names, formats)))\n            else:\n                ndtype.names = validate(names, nbfields=len(ndtype.names),\n                    defaultfmt=defaultfmt)\n        elif ndtype.names is not None:\n            validate = NameValidator(**validationargs)\n            numbered_names = tuple('f%i' % i for i in range(len(ndtype.names)))\n            if ndtype.names == numbered_names and defaultfmt != 'f%i':\n                ndtype.names = validate([''] * len(ndtype.names),\n                    defaultfmt=defaultfmt)\n            else:\n                ndtype.names = validate(ndtype.names, defaultfmt=defaultfmt)\n    return ndtype"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "flatten_dtype", "method_path": "../srcdata/Computation/numpy/numpy/lib/_iotools.py", "method_code_mask": "import numpy as np\n\n\ndef flatten_dtype(ndtype, flatten_base=False): [MASK]\n", "response": "import numpy as np\ndef flatten_dtype(ndtype, flatten_base=False):\n    \"\"\"\n    Unpack a structured data-type by collapsing nested fields and/or fields\n    with a shape.\n\n    Note that the field names are lost.\n\n    Parameters\n    ----------\n    ndtype : dtype\n        The datatype to collapse\n    flatten_base : bool, optional\n       If True, transform a field with a shape into several fields. Default is\n       False.\n\n    Examples\n    --------\n    >>> dt = np.dtype([('name', 'S4'), ('x', float), ('y', float),\n    ...                ('block', int, (2, 3))])\n    >>> np.lib._iotools.flatten_dtype(dt)\n    [dtype('S4'), dtype('float64'), dtype('float64'), dtype('int64')]\n    >>> np.lib._iotools.flatten_dtype(dt, flatten_base=True)\n    [dtype('S4'),\n     dtype('float64'),\n     dtype('float64'),\n     dtype('int64'),\n     dtype('int64'),\n     dtype('int64'),\n     dtype('int64'),\n     dtype('int64'),\n     dtype('int64')]\n\n    \"\"\"\n    names = ndtype.names\n    if names is None:\n        if flatten_base:\n            return [ndtype.base] * int(np.prod(ndtype.shape))\n        return [ndtype.base]\n    else:\n        types = []\n        for field in names:\n            info = ndtype.fields[field]\n            flat_dt = flatten_dtype(info[0], flatten_base)\n            types.extend(flat_dt)\n        return types"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "ediff1d", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef ediff1d(arr, to_end=None, to_begin=None): [MASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef ediff1d(arr, to_end=None, to_begin=None):\n    \"\"\"\n    Compute the differences between consecutive elements of an array.\n\n    This function is the equivalent of `numpy.ediff1d` that takes masked\n    values into account, see `numpy.ediff1d` for details.\n\n    See Also\n    --------\n    numpy.ediff1d : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> arr = np.ma.array([1, 2, 4, 7, 0])\n    >>> np.ma.ediff1d(arr)\n    masked_array(data=[ 1,  2,  3, -7],\n                 mask=False,\n           fill_value=999999)\n\n    \"\"\"\n    arr = ma.asanyarray(arr).flat\n    ed = arr[1:] - arr[:-1]\n    arrays = [ed]\n    if to_begin is not None:\n        arrays.insert(0, to_begin)\n    if to_end is not None:\n        arrays.append(to_end)\n    if len(arrays) != 1:\n        ed = hstack(arrays)\n    return ed"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "hermeval", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/hermite_e.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef hermeval(x, c, tensor=True): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef hermeval(x, c, tensor=True):\n    \"\"\"\n    Evaluate an HermiteE series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * He_0(x) + c_1 * He_1(x) + ... + c_n * He_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        with themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n        .. versionadded:: 1.7.0\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    hermeval2d, hermegrid2d, hermeval3d, hermegrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeval\n    >>> coef = [1,2,3]\n    >>> hermeval(1, coef)\n    3.0\n    >>> hermeval([[1,2],[3,4]], coef)\n    array([[ 3., 14.],\n           [31., 54.]])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        nd = len(c)\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = c[-i] - c1 * (nd - 1)\n            c1 = tmp + c1 * x\n    return c0 + c1 * x"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "drop_metadata", "method_path": "../srcdata/Computation/numpy/numpy/lib/_utils_impl.py", "method_code_mask": "import os\nimport sys\nimport textwrap\nimport types\nimport re\nimport warnings\nimport functools\nimport platform\nimport numpy as np\nfrom pprint import pprint\nfrom threadpoolctl import threadpool_info\nimport numpy\nimport pydoc\nimport inspect\nimport ast\n\n\ndef drop_metadata(dtype, /): [MASK]\n", "response": "import os\nimport sys\nimport textwrap\nimport types\nimport re\nimport warnings\nimport functools\nimport platform\nimport numpy as np\nfrom pprint import pprint\nfrom threadpoolctl import threadpool_info\nimport numpy\nimport pydoc\nimport inspect\nimport ast\ndef drop_metadata(dtype, /):\n    \"\"\"\n    Returns the dtype unchanged if it contained no metadata or a copy of the\n    dtype if it (or any of its structure dtypes) contained metadata.\n\n    This utility is used by `np.save` and `np.savez` to drop metadata before\n    saving.\n\n    .. note::\n\n        Due to its limitation this function may move to a more appropriate\n        home or change in the future and is considered semi-public API only.\n\n    .. warning::\n\n        This function does not preserve more strange things like record dtypes\n        and user dtypes may simply return the wrong thing.  If you need to be\n        sure about the latter, check the result with:\n        ``np.can_cast(new_dtype, dtype, casting=\"no\")``.\n\n    \"\"\"\n    if dtype.fields is not None:\n        found_metadata = dtype.metadata is not None\n        names = []\n        formats = []\n        offsets = []\n        titles = []\n        for name, field in dtype.fields.items():\n            field_dt = drop_metadata(field[0])\n            if field_dt is not field[0]:\n                found_metadata = True\n            names.append(name)\n            formats.append(field_dt)\n            offsets.append(field[1])\n            titles.append(None if len(field) < 3 else field[2])\n        if not found_metadata:\n            return dtype\n        structure = dict(names=names, formats=formats, offsets=offsets,\n            titles=titles, itemsize=dtype.itemsize)\n        return np.dtype(structure, align=dtype.isalignedstruct)\n    elif dtype.subdtype is not None:\n        subdtype, shape = dtype.subdtype\n        new_subdtype = drop_metadata(subdtype)\n        if dtype.metadata is None and new_subdtype is subdtype:\n            return dtype\n        return np.dtype((new_subdtype, shape))\n    else:\n        if dtype.metadata is None:\n            return dtype\n        return np.dtype(dtype.str)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "legval", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/legendre.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef legval(x, c, tensor=True): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef legval(x, c, tensor=True):\n    \"\"\"\n    Evaluate a Legendre series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * L_0(x) + c_1 * L_1(x) + ... + c_n * L_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n        .. versionadded:: 1.7.0\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    legval2d, leggrid2d, legval3d, leggrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        nd = len(c)\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = c[-i] - c1 * (nd - 1) / nd\n            c1 = tmp + c1 * x * (2 * nd - 1) / nd\n    return c0 + c1 * x"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "_replace_nan", "method_path": "../srcdata/Computation/numpy/numpy/lib/_nanfunctions_impl.py", "method_code_mask": "import functools\nimport warnings\nimport numpy as np\n\n\ndef _replace_nan(a, val): [MASK]\n", "response": "import functools\nimport warnings\nimport numpy as np\ndef _replace_nan(a, val):\n    \"\"\"\n    If `a` is of inexact type, make a copy of `a`, replace NaNs with\n    the `val` value, and return the copy together with a boolean mask\n    marking the locations where NaNs were present. If `a` is not of\n    inexact type, do nothing and return `a` together with a mask of None.\n\n    Note that scalars will end up as array scalars, which is important\n    for using the result as the value of the out argument in some\n    operations.\n\n    Parameters\n    ----------\n    a : array-like\n        Input array.\n    val : float\n        NaN values are set to val before doing the operation.\n\n    Returns\n    -------\n    y : ndarray\n        If `a` is of inexact type, return a copy of `a` with the NaNs\n        replaced by the fill value, otherwise return `a`.\n    mask: {bool, None}\n        If `a` is of inexact type, return a boolean mask marking locations of\n        NaNs, otherwise return None.\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if a.dtype == np.object_:\n        mask = np.not_equal(a, a, dtype=bool)\n    elif issubclass(a.dtype.type, np.inexact):\n        mask = np.isnan(a)\n    else:\n        mask = None\n    if mask is not None:\n        a = np.array(a, subok=True, copy=True)\n        np.copyto(a, val, where=mask)\n    return a, mask"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "legline", "method_path": "../srcdata/Computation/numpy/numpy/polynomial/legendre.py", "method_code_mask": "import numpy as np\nimport numpy.linalg as la\n\n\ndef legline(off, scl): [MASK]\n", "response": "import numpy as np\nimport numpy.linalg as la\ndef legline(off, scl):\n    \"\"\"\n    Legendre series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Legendre series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as L\n    >>> L.legline(3,2)\n    array([3, 2])\n    >>> L.legval(-3, L.legline(3,2)) # should be -3\n    -3.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl])\n    else:\n        return np.array([off])"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "_new_duck_type_and_implements", "method_path": "../srcdata/Computation/numpy/numpy/_core/tests/test_overrides.py", "method_code_mask": "import inspect\nimport sys\nimport os\nimport tempfile\nfrom io import StringIO\nfrom unittest import mock\nimport pickle\nimport pytest\nimport numpy as np\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_raises_regex\n\n\ndef _new_duck_type_and_implements(): [MASK]\n", "response": "import inspect\nimport sys\nimport os\nimport tempfile\nfrom io import StringIO\nfrom unittest import mock\nimport pickle\nimport pytest\nimport numpy as np\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_raises_regex\ndef _new_duck_type_and_implements():\n    \"\"\"Create a duck array type and implements functions.\"\"\"\n    HANDLED_FUNCTIONS = {}\n\n\n    class MyArray:\n\n        def __array_function__(self, func, types, args, kwargs):\n            if func not in HANDLED_FUNCTIONS:\n                return NotImplemented\n            if not all(issubclass(t, MyArray) for t in types):\n                return NotImplemented\n            return HANDLED_FUNCTIONS[func](*args, **kwargs)\n\n    def implements(numpy_function):\n        \"\"\"Register an __array_function__ implementations.\"\"\"\n\n        def decorator(func):\n            HANDLED_FUNCTIONS[numpy_function] = func\n            return func\n        return decorator\n    return MyArray, implements"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "roundtrip", "method_path": "../srcdata/Computation/numpy/numpy/lib/tests/test_format.py", "method_code_mask": "import sys\nimport os\nimport warnings\nimport pytest\nfrom io import BytesIO\nimport numpy as np\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_raises_regex\nfrom numpy.testing import assert_warns\nfrom numpy.testing import IS_PYPY\nfrom numpy.testing._private.utils import requires_memory\nfrom numpy.lib import format\nimport random\nimport subprocess as sp\n\n\ndef roundtrip(arr): [MASK]\n", "response": "import sys\nimport os\nimport warnings\nimport pytest\nfrom io import BytesIO\nimport numpy as np\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_raises_regex\nfrom numpy.testing import assert_warns\nfrom numpy.testing import IS_PYPY\nfrom numpy.testing._private.utils import requires_memory\nfrom numpy.lib import format\nimport random\nimport subprocess as sp\ndef roundtrip(arr):\n    f = BytesIO()\n    format.write_array(f, arr)\n    f2 = BytesIO(f.getvalue())\n    arr2 = format.read_array(f2, allow_pickle=True)\n    return arr2"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "get_fieldstructure", "method_path": "../srcdata/Computation/numpy/numpy/lib/recfunctions.py", "method_code_mask": "import itertools\nimport numpy as np\nimport numpy.ma as ma\nfrom numpy import ndarray\nfrom numpy.ma import MaskedArray\nfrom numpy.ma.mrecords import MaskedRecords\nfrom numpy.lib._iotools import _is_string_like\n\n\ndef get_fieldstructure(adtype, lastname=None, parents=None): [MASK]\n", "response": "import itertools\nimport numpy as np\nimport numpy.ma as ma\nfrom numpy import ndarray\nfrom numpy.ma import MaskedArray\nfrom numpy.ma.mrecords import MaskedRecords\nfrom numpy.lib._iotools import _is_string_like\ndef get_fieldstructure(adtype, lastname=None, parents=None):\n    \"\"\"\n    Returns a dictionary with fields indexing lists of their parent fields.\n\n    This function is used to simplify access to fields nested in other fields.\n\n    Parameters\n    ----------\n    adtype : np.dtype\n        Input datatype\n    lastname : optional\n        Last processed field name (used internally during recursion).\n    parents : dictionary\n        Dictionary of parent fields (used interbally during recursion).\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> ndtype =  np.dtype([('A', int),\n    ...                     ('B', [('BA', int),\n    ...                            ('BB', [('BBA', int), ('BBB', int)])])])\n    >>> rfn.get_fieldstructure(ndtype)\n    ... # XXX: possible regression, order of BBA and BBB is swapped\n    {'A': [], 'B': [], 'BA': ['B'], 'BB': ['B'], 'BBA': ['B', 'BB'], 'BBB': ['B', 'BB']}\n\n    \"\"\"\n    if parents is None:\n        parents = {}\n    names = adtype.names\n    for name in names:\n        current = adtype[name]\n        if current.names is not None:\n            if lastname:\n                parents[name] = [lastname]\n            else:\n                parents[name] = []\n            parents.update(get_fieldstructure(current, name, parents))\n        else:\n            lastparent = [_ for _ in parents.get(lastname, []) or []]\n            if lastparent:\n                lastparent.append(lastname)\n            elif lastname:\n                lastparent = [lastname]\n            parents[name] = lastparent or []\n    return parents"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "_aligned_zeros", "method_path": "../srcdata/Computation/numpy/numpy/_core/tests/test_multiarray.py", "method_code_mask": "from __future__ import annotations\nimport collections.abc\nimport tempfile\nimport sys\nimport warnings\nimport operator\nimport io\nimport itertools\nimport functools\nimport ctypes\nimport os\nimport gc\nimport re\nimport weakref\nimport pytest\nfrom contextlib import contextmanager\nimport pickle\nimport pathlib\nimport builtins\nfrom decimal import Decimal\nimport mmap\nimport numpy as np\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_warns\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_almost_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises_regex\nfrom numpy.testing import assert_array_almost_equal\nfrom numpy.testing import assert_allclose\nfrom numpy.testing import IS_PYPY\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.testing import assert_array_less\nfrom numpy.testing import runstring\nfrom numpy.testing import temppath\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import break_cycles\nfrom numpy.testing import assert_array_compare\nfrom numpy.testing._private.utils import requires_memory\nfrom numpy.testing._private.utils import _no_tracing\nfrom numpy.lib.recfunctions import repack_fields\nfrom datetime import timedelta\nfrom datetime import datetime\nimport fractions\nfrom fractions import Fraction as F\nimport _testbuffer\n\n\ndef _aligned_zeros(shape, dtype=float, order='C', align=None): [MASK]\n", "response": "from __future__ import annotations\nimport collections.abc\nimport tempfile\nimport sys\nimport warnings\nimport operator\nimport io\nimport itertools\nimport functools\nimport ctypes\nimport os\nimport gc\nimport re\nimport weakref\nimport pytest\nfrom contextlib import contextmanager\nimport pickle\nimport pathlib\nimport builtins\nfrom decimal import Decimal\nimport mmap\nimport numpy as np\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_warns\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_almost_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises_regex\nfrom numpy.testing import assert_array_almost_equal\nfrom numpy.testing import assert_allclose\nfrom numpy.testing import IS_PYPY\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.testing import assert_array_less\nfrom numpy.testing import runstring\nfrom numpy.testing import temppath\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import break_cycles\nfrom numpy.testing import assert_array_compare\nfrom numpy.testing._private.utils import requires_memory\nfrom numpy.testing._private.utils import _no_tracing\nfrom numpy.lib.recfunctions import repack_fields\nfrom datetime import timedelta\nfrom datetime import datetime\nimport fractions\nfrom fractions import Fraction as F\nimport _testbuffer\ndef _aligned_zeros(shape, dtype=float, order='C', align=None):\n    \"\"\"\n    Allocate a new ndarray with aligned memory.\n\n    The ndarray is guaranteed *not* aligned to twice the requested alignment.\n    Eg, if align=4, guarantees it is not aligned to 8. If align=None uses\n    dtype.alignment.\"\"\"\n    dtype = np.dtype(dtype)\n    if dtype == np.dtype(object):\n        if align is not None:\n            raise ValueError('object array alignment not supported')\n        return np.zeros(shape, dtype=dtype, order=order)\n    if align is None:\n        align = dtype.alignment\n    if not hasattr(shape, '__len__'):\n        shape = shape,\n    size = functools.reduce(operator.mul, shape) * dtype.itemsize\n    buf = np.empty(size + 2 * align + 1, np.uint8)\n    ptr = buf.__array_interface__['data'][0]\n    offset = ptr % align\n    if offset != 0:\n        offset = align - offset\n    if ptr % (2 * align) == 0:\n        offset += align\n    buf = buf[offset:offset + size + 1][:-1]\n    buf.fill(0)\n    data = np.ndarray(shape, dtype, buf, order=order)\n    return data"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "_block_dispatcher", "method_path": "../srcdata/Computation/numpy/numpy/_core/shape_base.py", "method_code_mask": "import functools\nimport itertools\nimport operator\nimport warnings\n\n\ndef _block_dispatcher(arrays): [MASK]\n", "response": "import functools\nimport itertools\nimport operator\nimport warnings\ndef _block_dispatcher(arrays):\n    if type(arrays) is list:\n        for subarrays in arrays:\n            yield from _block_dispatcher(subarrays)\n    else:\n        yield arrays"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "get_mat", "method_path": "../srcdata/Computation/numpy/numpy/lib/tests/test_twodim_base.py", "method_code_mask": "from numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_max_ulp\nfrom numpy.testing import assert_array_almost_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_\nfrom numpy import arange\nfrom numpy import add\nfrom numpy import fliplr\nfrom numpy import flipud\nfrom numpy import zeros\nfrom numpy import ones\nfrom numpy import eye\nfrom numpy import array\nfrom numpy import diag\nfrom numpy import histogram2d\nfrom numpy import tri\nfrom numpy import mask_indices\nfrom numpy import triu_indices\nfrom numpy import triu_indices_from\nfrom numpy import tril_indices\nfrom numpy import tril_indices_from\nfrom numpy import vander\nimport numpy as np\nimport pytest\n\n\ndef get_mat(n): [MASK]\n", "response": "from numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_max_ulp\nfrom numpy.testing import assert_array_almost_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_\nfrom numpy import arange\nfrom numpy import add\nfrom numpy import fliplr\nfrom numpy import flipud\nfrom numpy import zeros\nfrom numpy import ones\nfrom numpy import eye\nfrom numpy import array\nfrom numpy import diag\nfrom numpy import histogram2d\nfrom numpy import tri\nfrom numpy import mask_indices\nfrom numpy import triu_indices\nfrom numpy import triu_indices_from\nfrom numpy import tril_indices\nfrom numpy import tril_indices_from\nfrom numpy import vander\nimport numpy as np\nimport pytest\ndef get_mat(n):\n    data = arange(n)\n    data = add.outer(data, data)\n    return data"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "_add_keepdims", "method_path": "../srcdata/Computation/numpy/numpy/lib/tests/test_shape_base.py", "method_code_mask": "import numpy as np\nimport functools\nimport sys\nimport pytest\nfrom numpy import apply_along_axis\nfrom numpy import apply_over_axes\nfrom numpy import array_split\nfrom numpy import split\nfrom numpy import hsplit\nfrom numpy import dsplit\nfrom numpy import vsplit\nfrom numpy import dstack\nfrom numpy import column_stack\nfrom numpy import kron\nfrom numpy import tile\nfrom numpy import expand_dims\nfrom numpy import take_along_axis\nfrom numpy import put_along_axis\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_warns\nfrom numpy.random import rand\nfrom numpy.random import randint\n\n\ndef _add_keepdims(func): [MASK]\n", "response": "import numpy as np\nimport functools\nimport sys\nimport pytest\nfrom numpy import apply_along_axis\nfrom numpy import apply_over_axes\nfrom numpy import array_split\nfrom numpy import split\nfrom numpy import hsplit\nfrom numpy import dsplit\nfrom numpy import vsplit\nfrom numpy import dstack\nfrom numpy import column_stack\nfrom numpy import kron\nfrom numpy import tile\nfrom numpy import expand_dims\nfrom numpy import take_along_axis\nfrom numpy import put_along_axis\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_warns\nfrom numpy.random import rand\nfrom numpy.random import randint\ndef _add_keepdims(func):\n    \"\"\" hack in keepdims behavior into a function taking an axis \"\"\"\n\n    @functools.wraps(func)\n    def wrapped(a, axis, **kwargs):\n        res = func(a, axis=axis, **kwargs)\n        if axis is None:\n            axis = 0\n        return np.expand_dims(res, axis=axis)\n    return wrapped"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "get_mat", "method_path": "../srcdata/Computation/numpy/numpy/lib/tests/test_function_base.py", "method_code_mask": "import operator\nimport warnings\nimport sys\nimport decimal\nfrom fractions import Fraction\nimport math\nimport pytest\nfrom functools import partial\nimport numpy as np\nfrom numpy import ma\nfrom numpy import angle\nfrom numpy import average\nfrom numpy import bartlett\nfrom numpy import blackman\nfrom numpy import corrcoef\nfrom numpy import cov\nfrom numpy import delete\nfrom numpy import diff\nfrom numpy import digitize\nfrom numpy import extract\nfrom numpy import flipud\nfrom numpy import gradient\nfrom numpy import hamming\nfrom numpy import hanning\nfrom numpy import i0\nfrom numpy import insert\nfrom numpy import interp\nfrom numpy import kaiser\nfrom numpy import meshgrid\nfrom numpy import piecewise\nfrom numpy import place\nfrom numpy import rot90\nfrom numpy import select\nfrom numpy import setxor1d\nfrom numpy import sinc\nfrom numpy import trim_zeros\nfrom numpy import unwrap\nfrom numpy import unique\nfrom numpy import vectorize\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_almost_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_allclose\nfrom numpy.testing import assert_warns\nfrom numpy.testing import assert_raises_regex\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.random import rand\nimport random\nimport gc\n\n\ndef get_mat(n): [MASK]\n", "response": "import operator\nimport warnings\nimport sys\nimport decimal\nfrom fractions import Fraction\nimport math\nimport pytest\nfrom functools import partial\nimport numpy as np\nfrom numpy import ma\nfrom numpy import angle\nfrom numpy import average\nfrom numpy import bartlett\nfrom numpy import blackman\nfrom numpy import corrcoef\nfrom numpy import cov\nfrom numpy import delete\nfrom numpy import diff\nfrom numpy import digitize\nfrom numpy import extract\nfrom numpy import flipud\nfrom numpy import gradient\nfrom numpy import hamming\nfrom numpy import hanning\nfrom numpy import i0\nfrom numpy import insert\nfrom numpy import interp\nfrom numpy import kaiser\nfrom numpy import meshgrid\nfrom numpy import piecewise\nfrom numpy import place\nfrom numpy import rot90\nfrom numpy import select\nfrom numpy import setxor1d\nfrom numpy import sinc\nfrom numpy import trim_zeros\nfrom numpy import unwrap\nfrom numpy import unique\nfrom numpy import vectorize\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_almost_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_allclose\nfrom numpy.testing import assert_warns\nfrom numpy.testing import assert_raises_regex\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.random import rand\nimport random\nimport gc\ndef get_mat(n):\n    data = np.arange(n)\n    data = np.add.outer(data, data)\n    return data"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "ones", "method_path": "../srcdata/Computation/numpy/numpy/matlib.py", "method_code_mask": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\n\n\ndef ones(shape, dtype=None, order='C'): [MASK]\n", "response": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\ndef ones(shape, dtype=None, order='C'):\n    \"\"\"\n    Matrix of ones.\n\n    Return a matrix of given shape and type, filled with ones.\n\n    Parameters\n    ----------\n    shape : {sequence of ints, int}\n        Shape of the matrix\n    dtype : data-type, optional\n        The desired data-type for the matrix, default is np.float64.\n    order : {'C', 'F'}, optional\n        Whether to store matrix in C- or Fortran-contiguous order,\n        default is 'C'.\n\n    Returns\n    -------\n    out : matrix\n        Matrix of ones of given shape, dtype, and order.\n\n    See Also\n    --------\n    ones : Array of ones.\n    matlib.zeros : Zero matrix.\n\n    Notes\n    -----\n    If `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,\n    `out` becomes a single row matrix of shape ``(1,N)``.\n\n    Examples\n    --------\n    >>> np.matlib.ones((2,3))\n    matrix([[1.,  1.,  1.],\n            [1.,  1.,  1.]])\n\n    >>> np.matlib.ones(2)\n    matrix([[1.,  1.]])\n\n    \"\"\"\n    a = ndarray.__new__(matrix, shape, dtype, order=order)\n    a.fill(1)\n    return a"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "rand", "method_path": "../srcdata/Computation/numpy/numpy/matlib.py", "method_code_mask": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\n\n\ndef rand(*args): [MASK]\n", "response": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\ndef rand(*args):\n    \"\"\"\n    Return a matrix of random values with given shape.\n\n    Create a matrix of the given shape and propagate it with\n    random samples from a uniform distribution over ``[0, 1)``.\n\n    Parameters\n    ----------\n    \\\\*args : Arguments\n        Shape of the output.\n        If given as N integers, each integer specifies the size of one\n        dimension.\n        If given as a tuple, this tuple gives the complete shape.\n\n    Returns\n    -------\n    out : ndarray\n        The matrix of random values with shape given by `\\\\*args`.\n\n    See Also\n    --------\n    randn, numpy.random.RandomState.rand\n\n    Examples\n    --------\n    >>> np.random.seed(123)\n    >>> import numpy.matlib\n    >>> np.matlib.rand(2, 3)\n    matrix([[0.69646919, 0.28613933, 0.22685145],\n            [0.55131477, 0.71946897, 0.42310646]])\n    >>> np.matlib.rand((2, 3))\n    matrix([[0.9807642 , 0.68482974, 0.4809319 ],\n            [0.39211752, 0.34317802, 0.72904971]])\n\n    If the first argument is a tuple, other arguments are ignored:\n\n    >>> np.matlib.rand((2, 3), 4)\n    matrix([[0.43857224, 0.0596779 , 0.39804426],\n            [0.73799541, 0.18249173, 0.17545176]])\n\n    \"\"\"\n    if isinstance(args[0], tuple):\n        args = args[0]\n    return asmatrix(np.random.rand(*args))"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "iter_iterindices", "method_path": "../srcdata/Computation/numpy/numpy/_core/tests/test_nditer.py", "method_code_mask": "import sys\nimport pytest\nimport textwrap\nimport subprocess\nimport numpy as np\nfrom numpy import array\nfrom numpy import arange\nfrom numpy import nditer\nfrom numpy import all\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import break_cycles\n\n\ndef iter_iterindices(i): [MASK]\n", "response": "import sys\nimport pytest\nimport textwrap\nimport subprocess\nimport numpy as np\nfrom numpy import array\nfrom numpy import arange\nfrom numpy import nditer\nfrom numpy import all\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import break_cycles\ndef iter_iterindices(i):\n    ret = []\n    while not i.finished:\n        ret.append(i.iterindex)\n        i.iternext()\n    return ret"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "repmat", "method_path": "../srcdata/Computation/numpy/numpy/matlib.py", "method_code_mask": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\n\n\ndef repmat(a, m, n): [MASK]\n", "response": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\ndef repmat(a, m, n):\n    \"\"\"\n    Repeat a 0-D to 2-D array or matrix MxN times.\n\n    Parameters\n    ----------\n    a : array_like\n        The array or matrix to be repeated.\n    m, n : int\n        The number of times `a` is repeated along the first and second axes.\n\n    Returns\n    -------\n    out : ndarray\n        The result of repeating `a`.\n\n    Examples\n    --------\n    >>> import numpy.matlib\n    >>> a0 = np.array(1)\n    >>> np.matlib.repmat(a0, 2, 3)\n    array([[1, 1, 1],\n           [1, 1, 1]])\n\n    >>> a1 = np.arange(4)\n    >>> np.matlib.repmat(a1, 2, 2)\n    array([[0, 1, 2, 3, 0, 1, 2, 3],\n           [0, 1, 2, 3, 0, 1, 2, 3]])\n\n    >>> a2 = np.asmatrix(np.arange(6).reshape(2, 3))\n    >>> np.matlib.repmat(a2, 2, 3)\n    matrix([[0, 1, 2, 0, 1, 2, 0, 1, 2],\n            [3, 4, 5, 3, 4, 5, 3, 4, 5],\n            [0, 1, 2, 0, 1, 2, 0, 1, 2],\n            [3, 4, 5, 3, 4, 5, 3, 4, 5]])\n\n    \"\"\"\n    a = asanyarray(a)\n    ndim = a.ndim\n    if ndim == 0:\n        origrows, origcols = 1, 1\n    elif ndim == 1:\n        origrows, origcols = 1, a.shape[0]\n    else:\n        origrows, origcols = a.shape\n    rows = origrows * m\n    cols = origcols * n\n    c = a.reshape(1, a.size).repeat(m, 0).reshape(rows, origcols).repeat(n, 0)\n    return c.reshape(rows, cols)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "zeros", "method_path": "../srcdata/Computation/numpy/numpy/matlib.py", "method_code_mask": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\n\n\ndef zeros(shape, dtype=None, order='C'): [MASK]\n", "response": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\ndef zeros(shape, dtype=None, order='C'):\n    \"\"\"\n    Return a matrix of given shape and type, filled with zeros.\n\n    Parameters\n    ----------\n    shape : int or sequence of ints\n        Shape of the matrix\n    dtype : data-type, optional\n        The desired data-type for the matrix, default is float.\n    order : {'C', 'F'}, optional\n        Whether to store the result in C- or Fortran-contiguous order,\n        default is 'C'.\n\n    Returns\n    -------\n    out : matrix\n        Zero matrix of given shape, dtype, and order.\n\n    See Also\n    --------\n    numpy.zeros : Equivalent array function.\n    matlib.ones : Return a matrix of ones.\n\n    Notes\n    -----\n    If `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,\n    `out` becomes a single row matrix of shape ``(1,N)``.\n\n    Examples\n    --------\n    >>> import numpy.matlib\n    >>> np.matlib.zeros((2, 3))\n    matrix([[0.,  0.,  0.],\n            [0.,  0.,  0.]])\n\n    >>> np.matlib.zeros(2)\n    matrix([[0.,  0.]])\n\n    \"\"\"\n    a = ndarray.__new__(matrix, shape, dtype, order=order)\n    a.fill(0)\n    return a"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "randn", "method_path": "../srcdata/Computation/numpy/numpy/matlib.py", "method_code_mask": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\n\n\ndef randn(*args): [MASK]\n", "response": "import warnings\nimport numpy as np\nfrom numpy.matrixlib.defmatrix import matrix\nfrom numpy.matrixlib.defmatrix import asmatrix\nfrom numpy import *\ndef randn(*args):\n    \"\"\"\n    Return a random matrix with data from the \"standard normal\" distribution.\n\n    `randn` generates a matrix filled with random floats sampled from a\n    univariate \"normal\" (Gaussian) distribution of mean 0 and variance 1.\n\n    Parameters\n    ----------\n    \\\\*args : Arguments\n        Shape of the output.\n        If given as N integers, each integer specifies the size of one\n        dimension. If given as a tuple, this tuple gives the complete shape.\n\n    Returns\n    -------\n    Z : matrix of floats\n        A matrix of floating-point samples drawn from the standard normal\n        distribution.\n\n    See Also\n    --------\n    rand, numpy.random.RandomState.randn\n\n    Notes\n    -----\n    For random samples from the normal distribution with mean ``mu`` and\n    standard deviation ``sigma``, use::\n\n        sigma * np.matlib.randn(...) + mu\n\n    Examples\n    --------\n    >>> np.random.seed(123)\n    >>> import numpy.matlib\n    >>> np.matlib.randn(1)\n    matrix([[-1.0856306]])\n    >>> np.matlib.randn(1, 2, 3)\n    matrix([[ 0.99734545,  0.2829785 , -1.50629471],\n            [-0.57860025,  1.65143654, -2.42667924]])\n\n    Two-by-four matrix of samples from the normal distribution with\n    mean 3 and standard deviation 2.5:\n\n    >>> 2.5 * np.matlib.randn((2, 4)) + 3\n    matrix([[1.92771843, 6.16484065, 0.83314899, 1.30278462],\n            [2.76322758, 6.72847407, 1.40274501, 1.8900451 ]])\n\n    \"\"\"\n    if isinstance(args[0], tuple):\n        args = args[0]\n    return asmatrix(np.random.randn(*args))"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "check_dir", "method_path": "../srcdata/Computation/numpy/numpy/tests/test_public_api.py", "method_code_mask": "import sys\nimport sysconfig\nimport subprocess\nimport pkgutil\nimport types\nimport importlib\nimport inspect\nimport warnings\nimport numpy as np\nimport numpy\nimport pytest\nimport ctypes\nimport numpy.core as core\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import List\nfrom typing import Set\nfrom typing import Tuple\n\n\ndef check_dir(module, module_name=None): [MASK]\n", "response": "import sys\nimport sysconfig\nimport subprocess\nimport pkgutil\nimport types\nimport importlib\nimport inspect\nimport warnings\nimport numpy as np\nimport numpy\nimport pytest\nimport ctypes\nimport numpy.core as core\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import List\nfrom typing import Set\nfrom typing import Tuple\ndef check_dir(module, module_name=None):\n    \"\"\"Returns a mapping of all objects with the wrong __module__ attribute.\"\"\"\n    if module_name is None:\n        module_name = module.__name__\n    results = {}\n    for name in dir(module):\n        if name == 'core':\n            continue\n        item = getattr(module, name)\n        if hasattr(item, '__module__') and hasattr(item, '__name__'\n            ) and item.__module__ != module_name:\n            results[name] = item.__module__ + '.' + item.__name__\n    return results"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "default_fill_value", "method_path": "../srcdata/Computation/numpy/numpy/ma/core.py", "method_code_mask": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\n\n\ndef default_fill_value(obj): [MASK]\n", "response": "import builtins\nimport inspect\nimport operator\nimport warnings\nimport textwrap\nimport re\nfrom functools import reduce\nfrom typing import Dict\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import amax\nfrom numpy import amin\nfrom numpy import iscomplexobj\nfrom numpy import bool_\nfrom numpy import _NoValue\nfrom numpy import angle\nfrom numpy import array as narray\nfrom numpy import expand_dims\nfrom numpy import iinfo\nfrom numpy import finfo\nfrom copy import deepcopy\ndef default_fill_value(obj):\n    \"\"\"\n    Return the default fill value for the argument object.\n\n    The default filling value depends on the datatype of the input\n    array or the type of the input scalar:\n\n       ========  ========\n       datatype  default\n       ========  ========\n       bool      True\n       int       999999\n       float     1.e20\n       complex   1.e20+0j\n       object    '?'\n       string    'N/A'\n       ========  ========\n\n    For structured types, a structured scalar is returned, with each field the\n    default fill value for its type.\n\n    For subarray types, the fill value is an array of the same size containing\n    the default scalar fill value.\n\n    Parameters\n    ----------\n    obj : ndarray, dtype or scalar\n        The array data-type or scalar for which the default fill value\n        is returned.\n\n    Returns\n    -------\n    fill_value : scalar\n        The default fill value.\n\n    Examples\n    --------\n    >>> np.ma.default_fill_value(1)\n    999999\n    >>> np.ma.default_fill_value(np.array([1.1, 2., np.pi]))\n    1e+20\n    >>> np.ma.default_fill_value(np.dtype(complex))\n    (1e+20+0j)\n\n    \"\"\"\n\n    def _scalar_fill_value(dtype):\n        if dtype.kind in 'Mm':\n            return default_filler.get(dtype.str[1:], '?')\n        else:\n            return default_filler.get(dtype.kind, '?')\n    dtype = _get_dtype_of(obj)\n    return _recursive_fill_value(dtype, _scalar_fill_value)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "break_cycles", "method_path": "../srcdata/Computation/numpy/numpy/testing/_private/utils.py", "method_code_mask": "import os\nimport sys\nimport platform\nimport re\nimport gc\nimport operator\nimport warnings\nfrom functools import partial\nfrom functools import wraps\nimport shutil\nimport contextlib\nfrom tempfile import mkdtemp\nfrom tempfile import mkstemp\nfrom unittest.case import SkipTest\nfrom warnings import WarningMessage\nimport pprint\nimport sysconfig\nimport numpy as np\nfrom numpy import isfinite\nfrom numpy import isnan\nfrom numpy import isinf\nimport numpy.linalg._umath_linalg\nfrom io import StringIO\nimport time\nfrom numpy import iscomplexobj\nfrom numpy import real\nfrom numpy import imag\nimport traceback\nimport difflib\nimport doctest\nimport subprocess\nimport unittest\nfrom inspect import isfunction\nimport pytest\nimport psutil\n\n\ndef break_cycles(): [MASK]\n", "response": "import os\nimport sys\nimport platform\nimport re\nimport gc\nimport operator\nimport warnings\nfrom functools import partial\nfrom functools import wraps\nimport shutil\nimport contextlib\nfrom tempfile import mkdtemp\nfrom tempfile import mkstemp\nfrom unittest.case import SkipTest\nfrom warnings import WarningMessage\nimport pprint\nimport sysconfig\nimport numpy as np\nfrom numpy import isfinite\nfrom numpy import isnan\nfrom numpy import isinf\nimport numpy.linalg._umath_linalg\nfrom io import StringIO\nimport time\nfrom numpy import iscomplexobj\nfrom numpy import real\nfrom numpy import imag\nimport traceback\nimport difflib\nimport doctest\nimport subprocess\nimport unittest\nfrom inspect import isfunction\nimport pytest\nimport psutil\ndef break_cycles():\n    \"\"\"\n    Break reference cycles by calling gc.collect\n    Objects can call other objects' methods (for instance, another object's\n     __del__) inside their own __del__. On PyPy, the interpreter only runs\n    between calls to gc.collect, so multiple calls are needed to completely\n    release all cycles.\n    \"\"\"\n    gc.collect()\n    if IS_PYPY:\n        gc.collect()\n        gc.collect()\n        gc.collect()\n        gc.collect()"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "iter_multi_index", "method_path": "../srcdata/Computation/numpy/numpy/_core/tests/test_nditer.py", "method_code_mask": "import sys\nimport pytest\nimport textwrap\nimport subprocess\nimport numpy as np\nfrom numpy import array\nfrom numpy import arange\nfrom numpy import nditer\nfrom numpy import all\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import break_cycles\n\n\ndef iter_multi_index(i): [MASK]\n", "response": "import sys\nimport pytest\nimport textwrap\nimport subprocess\nimport numpy as np\nfrom numpy import array\nfrom numpy import arange\nfrom numpy import nditer\nfrom numpy import all\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import break_cycles\ndef iter_multi_index(i):\n    ret = []\n    while not i.finished:\n        ret.append(i.multi_index)\n        i.iternext()\n    return ret"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "minrelpath", "method_path": "../srcdata/Computation/numpy/numpy/distutils/misc_util.py", "method_code_mask": "import os\nimport re\nimport sys\nimport copy\nimport glob\nimport atexit\nimport tempfile\nimport subprocess\nimport shutil\nimport multiprocessing\nimport textwrap\nimport importlib.util\nfrom threading import local as tlocal\nfrom functools import reduce\nimport distutils\nfrom distutils.errors import DistutilsError\nfrom numpy.distutils.core import get_distribution\nimport warnings\nimport curses\nfrom numpy.distutils.core import Extension\nfrom pprint import pformat\nimport distutils.core\nfrom distutils.errors import DistutilsInternalError\nimport numpy\nfrom numpy.distutils.npy_pkg_config import read_config\nfrom numpy.distutils.npy_pkg_config import parse_flags\nimport builtins\nfrom numpy.distutils.system_info import system_info\nfrom distutils.dir_util import mkpath\nfrom distutils.msvccompiler import get_build_architecture\n\n\ndef minrelpath(path): [MASK]\n", "response": "import os\nimport re\nimport sys\nimport copy\nimport glob\nimport atexit\nimport tempfile\nimport subprocess\nimport shutil\nimport multiprocessing\nimport textwrap\nimport importlib.util\nfrom threading import local as tlocal\nfrom functools import reduce\nimport distutils\nfrom distutils.errors import DistutilsError\nfrom numpy.distutils.core import get_distribution\nimport warnings\nimport curses\nfrom numpy.distutils.core import Extension\nfrom pprint import pformat\nimport distutils.core\nfrom distutils.errors import DistutilsInternalError\nimport numpy\nfrom numpy.distutils.npy_pkg_config import read_config\nfrom numpy.distutils.npy_pkg_config import parse_flags\nimport builtins\nfrom numpy.distutils.system_info import system_info\nfrom distutils.dir_util import mkpath\nfrom distutils.msvccompiler import get_build_architecture\ndef minrelpath(path):\n    \"\"\"Resolve `..` and '.' from path.\n    \"\"\"\n    if not is_string(path):\n        return path\n    if '.' not in path:\n        return path\n    l = path.split(os.sep)\n    while l:\n        try:\n            i = l.index('.', 1)\n        except ValueError:\n            break\n        del l[i]\n    j = 1\n    while l:\n        try:\n            i = l.index('..', j)\n        except ValueError:\n            break\n        if l[i - 1] == '..':\n            j += 1\n        else:\n            del l[i], l[i - 1]\n            j = 1\n    if not l:\n        return ''\n    return os.sep.join(l)"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "parse_flags", "method_path": "../srcdata/Computation/numpy/numpy/distutils/npy_pkg_config.py", "method_code_mask": "import sys\nimport re\nimport os\nfrom configparser import RawConfigParser\nfrom optparse import OptionParser\nimport glob\n\n\ndef parse_flags(line): [MASK]\n", "response": "import sys\nimport re\nimport os\nfrom configparser import RawConfigParser\nfrom optparse import OptionParser\nimport glob\ndef parse_flags(line):\n    \"\"\"\n    Parse a line from a config file containing compile flags.\n\n    Parameters\n    ----------\n    line : str\n        A single line containing one or more compile flags.\n\n    Returns\n    -------\n    d : dict\n        Dictionary of parsed flags, split into relevant categories.\n        These categories are the keys of `d`:\n\n        * 'include_dirs'\n        * 'library_dirs'\n        * 'libraries'\n        * 'macros'\n        * 'ignored'\n\n    \"\"\"\n    d = {'include_dirs': [], 'library_dirs': [], 'libraries': [], 'macros':\n        [], 'ignored': []}\n    flags = (' ' + line).split(' -')\n    for flag in flags:\n        flag = '-' + flag\n        if len(flag) > 0:\n            if flag.startswith('-I'):\n                d['include_dirs'].append(flag[2:].strip())\n            elif flag.startswith('-L'):\n                d['library_dirs'].append(flag[2:].strip())\n            elif flag.startswith('-l'):\n                d['libraries'].append(flag[2:].strip())\n            elif flag.startswith('-D'):\n                d['macros'].append(flag[2:].strip())\n            else:\n                d['ignored'].append(flag)\n    return d"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "get_shared_lib_extension", "method_path": "../srcdata/Computation/numpy/numpy/distutils/misc_util.py", "method_code_mask": "import os\nimport re\nimport sys\nimport copy\nimport glob\nimport atexit\nimport tempfile\nimport subprocess\nimport shutil\nimport multiprocessing\nimport textwrap\nimport importlib.util\nfrom threading import local as tlocal\nfrom functools import reduce\nimport distutils\nfrom distutils.errors import DistutilsError\nfrom numpy.distutils.core import get_distribution\nimport warnings\nimport curses\nfrom numpy.distutils.core import Extension\nfrom pprint import pformat\nimport distutils.core\nfrom distutils.errors import DistutilsInternalError\nimport numpy\nfrom numpy.distutils.npy_pkg_config import read_config\nfrom numpy.distutils.npy_pkg_config import parse_flags\nimport builtins\nfrom numpy.distutils.system_info import system_info\nfrom distutils.dir_util import mkpath\nfrom distutils.msvccompiler import get_build_architecture\n\n\ndef get_shared_lib_extension(is_python_ext=False): [MASK]\n", "response": "import os\nimport re\nimport sys\nimport copy\nimport glob\nimport atexit\nimport tempfile\nimport subprocess\nimport shutil\nimport multiprocessing\nimport textwrap\nimport importlib.util\nfrom threading import local as tlocal\nfrom functools import reduce\nimport distutils\nfrom distutils.errors import DistutilsError\nfrom numpy.distutils.core import get_distribution\nimport warnings\nimport curses\nfrom numpy.distutils.core import Extension\nfrom pprint import pformat\nimport distutils.core\nfrom distutils.errors import DistutilsInternalError\nimport numpy\nfrom numpy.distutils.npy_pkg_config import read_config\nfrom numpy.distutils.npy_pkg_config import parse_flags\nimport builtins\nfrom numpy.distutils.system_info import system_info\nfrom distutils.dir_util import mkpath\nfrom distutils.msvccompiler import get_build_architecture\ndef get_shared_lib_extension(is_python_ext=False):\n    \"\"\"Return the correct file extension for shared libraries.\n\n    Parameters\n    ----------\n    is_python_ext : bool, optional\n        Whether the shared library is a Python extension.  Default is False.\n\n    Returns\n    -------\n    so_ext : str\n        The shared library extension.\n\n    Notes\n    -----\n    For Python shared libs, `so_ext` will typically be '.so' on Linux and OS X,\n    and '.pyd' on Windows.  For Python >= 3.2 `so_ext` has a tag prepended on\n    POSIX systems according to PEP 3149.\n\n    \"\"\"\n    confvars = distutils.sysconfig.get_config_vars()\n    so_ext = confvars.get('EXT_SUFFIX', '')\n    if not is_python_ext:\n        if sys.platform.startswith('linux') or sys.platform.startswith(\n            'gnukfreebsd'):\n            so_ext = '.so'\n        elif sys.platform.startswith('darwin'):\n            so_ext = '.dylib'\n        elif sys.platform.startswith('win'):\n            so_ext = '.dll'\n        elif 'SOABI' in confvars:\n            so_ext = so_ext.replace('.' + confvars.get('SOABI'), '', 1)\n    return so_ext"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "_as_pairs", "method_path": "../srcdata/Computation/numpy/numpy/lib/_arraypad_impl.py", "method_code_mask": "import numpy as np\n\n\ndef _as_pairs(x, ndim, as_index=False): [MASK]\n", "response": "import numpy as np\ndef _as_pairs(x, ndim, as_index=False):\n    \"\"\"\n    Broadcast `x` to an array with the shape (`ndim`, 2).\n\n    A helper function for `pad` that prepares and validates arguments like\n    `pad_width` for iteration in pairs.\n\n    Parameters\n    ----------\n    x : {None, scalar, array-like}\n        The object to broadcast to the shape (`ndim`, 2).\n    ndim : int\n        Number of pairs the broadcasted `x` will have.\n    as_index : bool, optional\n        If `x` is not None, try to round each element of `x` to an integer\n        (dtype `np.intp`) and ensure every element is positive.\n\n    Returns\n    -------\n    pairs : nested iterables, shape (`ndim`, 2)\n        The broadcasted version of `x`.\n\n    Raises\n    ------\n    ValueError\n        If `as_index` is True and `x` contains negative elements.\n        Or if `x` is not broadcastable to the shape (`ndim`, 2).\n    \"\"\"\n    if x is None:\n        return ((None, None),) * ndim\n    x = np.array(x)\n    if as_index:\n        x = np.round(x).astype(np.intp, copy=False)\n    if x.ndim < 3:\n        if x.size == 1:\n            x = x.ravel()\n            if as_index and x < 0:\n                raise ValueError(\"index can't contain negative values\")\n            return ((x[0], x[0]),) * ndim\n        if x.size == 2 and x.shape != (2, 1):\n            x = x.ravel()\n            if as_index and (x[0] < 0 or x[1] < 0):\n                raise ValueError(\"index can't contain negative values\")\n            return ((x[0], x[1]),) * ndim\n    if as_index and x.min() < 0:\n        raise ValueError(\"index can't contain negative values\")\n    return np.broadcast_to(x, (ndim, 2)).tolist()"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "requires_memory", "method_path": "../srcdata/Computation/numpy/numpy/testing/_private/utils.py", "method_code_mask": "import os\nimport sys\nimport platform\nimport re\nimport gc\nimport operator\nimport warnings\nfrom functools import partial\nfrom functools import wraps\nimport shutil\nimport contextlib\nfrom tempfile import mkdtemp\nfrom tempfile import mkstemp\nfrom unittest.case import SkipTest\nfrom warnings import WarningMessage\nimport pprint\nimport sysconfig\nimport numpy as np\nfrom numpy import isfinite\nfrom numpy import isnan\nfrom numpy import isinf\nimport numpy.linalg._umath_linalg\nfrom io import StringIO\nimport time\nfrom numpy import iscomplexobj\nfrom numpy import real\nfrom numpy import imag\nimport traceback\nimport difflib\nimport doctest\nimport subprocess\nimport unittest\nfrom inspect import isfunction\nimport pytest\nimport psutil\n\n\ndef requires_memory(free_bytes): [MASK]\n", "response": "import os\nimport sys\nimport platform\nimport re\nimport gc\nimport operator\nimport warnings\nfrom functools import partial\nfrom functools import wraps\nimport shutil\nimport contextlib\nfrom tempfile import mkdtemp\nfrom tempfile import mkstemp\nfrom unittest.case import SkipTest\nfrom warnings import WarningMessage\nimport pprint\nimport sysconfig\nimport numpy as np\nfrom numpy import isfinite\nfrom numpy import isnan\nfrom numpy import isinf\nimport numpy.linalg._umath_linalg\nfrom io import StringIO\nimport time\nfrom numpy import iscomplexobj\nfrom numpy import real\nfrom numpy import imag\nimport traceback\nimport difflib\nimport doctest\nimport subprocess\nimport unittest\nfrom inspect import isfunction\nimport pytest\nimport psutil\ndef requires_memory(free_bytes):\n    \"\"\"Decorator to skip a test if not enough memory is available\"\"\"\n    import pytest\n\n    def decorator(func):\n\n        @wraps(func)\n        def wrapper(*a, **kw):\n            msg = check_free_memory(free_bytes)\n            if msg is not None:\n                pytest.skip(msg)\n            try:\n                return func(*a, **kw)\n            except MemoryError:\n                pytest.xfail('MemoryError raised')\n        return wrapper\n    return decorator"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "ndpointer", "method_path": "../srcdata/Computation/numpy/numpy/ctypeslib.py", "method_code_mask": "import os\nfrom numpy import integer\nfrom numpy import ndarray\nfrom numpy import dtype as _dtype\nfrom numpy import asarray\nfrom numpy import frombuffer\nimport ctypes\nfrom numpy import intp as c_intp\nimport sys\nimport sysconfig\n\n\ndef ndpointer(dtype=None, ndim=None, shape=None, flags=None): [MASK]\n", "response": "import os\nfrom numpy import integer\nfrom numpy import ndarray\nfrom numpy import dtype as _dtype\nfrom numpy import asarray\nfrom numpy import frombuffer\nimport ctypes\nfrom numpy import intp as c_intp\nimport sys\nimport sysconfig\ndef ndpointer(dtype=None, ndim=None, shape=None, flags=None):\n    \"\"\"\n    Array-checking restype/argtypes.\n\n    An ndpointer instance is used to describe an ndarray in restypes\n    and argtypes specifications.  This approach is more flexible than\n    using, for example, ``POINTER(c_double)``, since several restrictions\n    can be specified, which are verified upon calling the ctypes function.\n    These include data type, number of dimensions, shape and flags.  If a\n    given array does not satisfy the specified restrictions,\n    a ``TypeError`` is raised.\n\n    Parameters\n    ----------\n    dtype : data-type, optional\n        Array data-type.\n    ndim : int, optional\n        Number of array dimensions.\n    shape : tuple of ints, optional\n        Array shape.\n    flags : str or tuple of str\n        Array flags; may be one or more of:\n\n        - C_CONTIGUOUS / C / CONTIGUOUS\n        - F_CONTIGUOUS / F / FORTRAN\n        - OWNDATA / O\n        - WRITEABLE / W\n        - ALIGNED / A\n        - WRITEBACKIFCOPY / X\n\n    Returns\n    -------\n    klass : ndpointer type object\n        A type object, which is an ``_ndtpr`` instance containing\n        dtype, ndim, shape and flags information.\n\n    Raises\n    ------\n    TypeError\n        If a given array does not satisfy the specified restrictions.\n\n    Examples\n    --------\n    >>> clib.somefunc.argtypes = [np.ctypeslib.ndpointer(dtype=np.float64,\n    ...                                                  ndim=1,\n    ...                                                  flags='C_CONTIGUOUS')]\n    ... #doctest: +SKIP\n    >>> clib.somefunc(np.array([1, 2, 3], dtype=np.float64))\n    ... #doctest: +SKIP\n\n    \"\"\"\n    if dtype is not None:\n        dtype = _dtype(dtype)\n    num = None\n    if flags is not None:\n        if isinstance(flags, str):\n            flags = flags.split(',')\n        elif isinstance(flags, (int, integer)):\n            num = flags\n            flags = _flags_fromnum(num)\n        elif isinstance(flags, flagsobj):\n            num = flags.num\n            flags = _flags_fromnum(num)\n        if num is None:\n            try:\n                flags = [x.strip().upper() for x in flags]\n            except Exception as e:\n                raise TypeError('invalid flags specification') from e\n            num = _num_fromflags(flags)\n    if shape is not None:\n        try:\n            shape = tuple(shape)\n        except TypeError:\n            shape = shape,\n    cache_key = dtype, ndim, shape, num\n    try:\n        return _pointer_type_cache[cache_key]\n    except KeyError:\n        pass\n    if dtype is None:\n        name = 'any'\n    elif dtype.names is not None:\n        name = str(id(dtype))\n    else:\n        name = dtype.str\n    if ndim is not None:\n        name += '_%dd' % ndim\n    if shape is not None:\n        name += '_' + 'x'.join(str(x) for x in shape)\n    if flags is not None:\n        name += '_' + '_'.join(flags)\n    if dtype is not None and shape is not None:\n        base = _concrete_ndptr\n    else:\n        base = _ndptr\n    klass = type('ndpointer_%s' % name, (base,), {'_dtype_': dtype,\n        '_shape_': shape, '_ndim_': ndim, '_flags_': num})\n    _pointer_type_cache[cache_key] = klass\n    return klass"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "iter_indices", "method_path": "../srcdata/Computation/numpy/numpy/_core/tests/test_nditer.py", "method_code_mask": "import sys\nimport pytest\nimport textwrap\nimport subprocess\nimport numpy as np\nfrom numpy import array\nfrom numpy import arange\nfrom numpy import nditer\nfrom numpy import all\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import break_cycles\n\n\ndef iter_indices(i): [MASK]\n", "response": "import sys\nimport pytest\nimport textwrap\nimport subprocess\nimport numpy as np\nfrom numpy import array\nfrom numpy import arange\nfrom numpy import nditer\nfrom numpy import all\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_equal\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_raises\nfrom numpy.testing import HAS_REFCOUNT\nfrom numpy.testing import suppress_warnings\nfrom numpy.testing import break_cycles\ndef iter_indices(i):\n    ret = []\n    while not i.finished:\n        ret.append(i.index)\n        i.iternext()\n    return ret"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "eq", "method_path": "../srcdata/Computation/numpy/numpy/ma/tests/test_old_ma.py", "method_code_mask": "from functools import reduce\nimport pickle\nimport pytest\nimport numpy as np\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_equal\nfrom numpy.ma import MaskType\nfrom numpy.ma import MaskedArray\nfrom numpy.ma import absolute\nfrom numpy.ma import add\nfrom numpy.ma import all\nfrom numpy.ma import allclose\nfrom numpy.ma import allequal\nfrom numpy.ma import alltrue\nfrom numpy.ma import arange\nfrom numpy.ma import arccos\nfrom numpy.ma import arcsin\nfrom numpy.ma import arctan\nfrom numpy.ma import arctan2\nfrom numpy.ma import array\nfrom numpy.ma import average\nfrom numpy.ma import choose\nfrom numpy.ma import concatenate\nfrom numpy.ma import conjugate\nfrom numpy.ma import cos\nfrom numpy.ma import cosh\nfrom numpy.ma import count\nfrom numpy.ma import divide\nfrom numpy.ma import equal\nfrom numpy.ma import exp\nfrom numpy.ma import filled\nfrom numpy.ma import getmask\nfrom numpy.ma import greater\nfrom numpy.ma import greater_equal\nfrom numpy.ma import inner\nfrom numpy.ma import isMaskedArray\nfrom numpy.ma import less\nfrom numpy.ma import less_equal\nfrom numpy.ma import log\nfrom numpy.ma import log10\nfrom numpy.ma import make_mask\nfrom numpy.ma import masked\nfrom numpy.ma import masked_array\nfrom numpy.ma import masked_equal\nfrom numpy.ma import masked_greater\nfrom numpy.ma import masked_greater_equal\nfrom numpy.ma import masked_inside\nfrom numpy.ma import masked_less\nfrom numpy.ma import masked_less_equal\nfrom numpy.ma import masked_not_equal\nfrom numpy.ma import masked_outside\nfrom numpy.ma import masked_print_option\nfrom numpy.ma import masked_values\nfrom numpy.ma import masked_where\nfrom numpy.ma import maximum\nfrom numpy.ma import minimum\nfrom numpy.ma import multiply\nfrom numpy.ma import nomask\nfrom numpy.ma import nonzero\nfrom numpy.ma import not_equal\nfrom numpy.ma import ones\nfrom numpy.ma import outer\nfrom numpy.ma import product\nfrom numpy.ma import put\nfrom numpy.ma import ravel\nfrom numpy.ma import repeat\nfrom numpy.ma import resize\nfrom numpy.ma import shape\nfrom numpy.ma import sin\nfrom numpy.ma import sinh\nfrom numpy.ma import sometrue\nfrom numpy.ma import sort\nfrom numpy.ma import sqrt\nfrom numpy.ma import subtract\nfrom numpy.ma import sum\nfrom numpy.ma import take\nfrom numpy.ma import tan\nfrom numpy.ma import tanh\nfrom numpy.ma import transpose\nfrom numpy.ma import where\nfrom numpy.ma import zeros\n\n\ndef eq(v, w, msg=''): [MASK]\n", "response": "from functools import reduce\nimport pickle\nimport pytest\nimport numpy as np\nfrom numpy.testing import assert_\nfrom numpy.testing import assert_raises\nfrom numpy.testing import assert_equal\nfrom numpy.ma import MaskType\nfrom numpy.ma import MaskedArray\nfrom numpy.ma import absolute\nfrom numpy.ma import add\nfrom numpy.ma import all\nfrom numpy.ma import allclose\nfrom numpy.ma import allequal\nfrom numpy.ma import alltrue\nfrom numpy.ma import arange\nfrom numpy.ma import arccos\nfrom numpy.ma import arcsin\nfrom numpy.ma import arctan\nfrom numpy.ma import arctan2\nfrom numpy.ma import array\nfrom numpy.ma import average\nfrom numpy.ma import choose\nfrom numpy.ma import concatenate\nfrom numpy.ma import conjugate\nfrom numpy.ma import cos\nfrom numpy.ma import cosh\nfrom numpy.ma import count\nfrom numpy.ma import divide\nfrom numpy.ma import equal\nfrom numpy.ma import exp\nfrom numpy.ma import filled\nfrom numpy.ma import getmask\nfrom numpy.ma import greater\nfrom numpy.ma import greater_equal\nfrom numpy.ma import inner\nfrom numpy.ma import isMaskedArray\nfrom numpy.ma import less\nfrom numpy.ma import less_equal\nfrom numpy.ma import log\nfrom numpy.ma import log10\nfrom numpy.ma import make_mask\nfrom numpy.ma import masked\nfrom numpy.ma import masked_array\nfrom numpy.ma import masked_equal\nfrom numpy.ma import masked_greater\nfrom numpy.ma import masked_greater_equal\nfrom numpy.ma import masked_inside\nfrom numpy.ma import masked_less\nfrom numpy.ma import masked_less_equal\nfrom numpy.ma import masked_not_equal\nfrom numpy.ma import masked_outside\nfrom numpy.ma import masked_print_option\nfrom numpy.ma import masked_values\nfrom numpy.ma import masked_where\nfrom numpy.ma import maximum\nfrom numpy.ma import minimum\nfrom numpy.ma import multiply\nfrom numpy.ma import nomask\nfrom numpy.ma import nonzero\nfrom numpy.ma import not_equal\nfrom numpy.ma import ones\nfrom numpy.ma import outer\nfrom numpy.ma import product\nfrom numpy.ma import put\nfrom numpy.ma import ravel\nfrom numpy.ma import repeat\nfrom numpy.ma import resize\nfrom numpy.ma import shape\nfrom numpy.ma import sin\nfrom numpy.ma import sinh\nfrom numpy.ma import sometrue\nfrom numpy.ma import sort\nfrom numpy.ma import sqrt\nfrom numpy.ma import subtract\nfrom numpy.ma import sum\nfrom numpy.ma import take\nfrom numpy.ma import tan\nfrom numpy.ma import tanh\nfrom numpy.ma import transpose\nfrom numpy.ma import where\nfrom numpy.ma import zeros\ndef eq(v, w, msg=''):\n    result = allclose(v, w)\n    if not result:\n        print(f'Not eq:{msg}\\n{v}\\n----{w}')\n    return result"}
{"result": "passed", "model_name": "std", "repository": "numpy", "full_method_name": "median", "method_path": "../srcdata/Computation/numpy/numpy/ma/extras.py", "method_code_mask": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\n\n\ndef median(a, axis=None, out=None, overwrite_input=False, keepdims=False): [M\n    ASK]\n", "response": "import itertools\nimport warnings\nimport numpy as np\nfrom numpy import ndarray\nfrom numpy import array as nxarray\ndef median(a, axis=None, out=None, overwrite_input=False, keepdims=False):\n    \"\"\"\n    Compute the median along the specified axis.\n\n    Returns the median of the array elements.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    axis : int, optional\n        Axis along which the medians are computed. The default (None) is\n        to compute the median along a flattened version of the array.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output\n        but the type will be cast if necessary.\n    overwrite_input : bool, optional\n        If True, then allow use of memory of input array (a) for\n        calculations. The input array will be modified by the call to\n        median. This will save memory when you do not need to preserve\n        the contents of the input array. Treat the input as undefined,\n        but it will probably be fully or partially sorted. Default is\n        False. Note that, if `overwrite_input` is True, and the input\n        is not already an `ndarray`, an error will be raised.\n    keepdims : bool, optional\n        If this is set to True, the axes which are reduced are left\n        in the result as dimensions with size one. With this option,\n        the result will broadcast correctly against the input array.\n\n        .. versionadded:: 1.10.0\n\n    Returns\n    -------\n    median : ndarray\n        A new array holding the result is returned unless out is\n        specified, in which case a reference to out is returned.\n        Return data-type is `float64` for integers and floats smaller than\n        `float64`, or the input data-type, otherwise.\n\n    See Also\n    --------\n    mean\n\n    Notes\n    -----\n    Given a vector ``V`` with ``N`` non masked values, the median of ``V``\n    is the middle value of a sorted copy of ``V`` (``Vs``) - i.e.\n    ``Vs[(N-1)/2]``, when ``N`` is odd, or ``{Vs[N/2 - 1] + Vs[N/2]}/2``\n    when ``N`` is even.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(8), mask=[0]*4 + [1]*4)\n    >>> np.ma.median(x)\n    1.5\n\n    >>> x = np.ma.array(np.arange(10).reshape(2, 5), mask=[0]*6 + [1]*4)\n    >>> np.ma.median(x)\n    2.5\n    >>> np.ma.median(x, axis=-1, overwrite_input=True)\n    masked_array(data=[2.0, 5.0],\n                 mask=[False, False],\n           fill_value=1e+20)\n\n    \"\"\"\n    if not hasattr(a, 'mask'):\n        m = np.median(getdata(a, subok=True), axis=axis, out=out,\n            overwrite_input=overwrite_input, keepdims=keepdims)\n        if isinstance(m, np.ndarray) and 1 <= m.ndim:\n            return masked_array(m, copy=False)\n        else:\n            return m\n    return _ureduce(a, func=_median, keepdims=keepdims, axis=axis, out=out,\n        overwrite_input=overwrite_input)"}

{"result": "passed", "model_name": "std", "repository": "bokeh", "full_method_name": "ls_modules", "method_path": "../srcdata/Visualization/bokeh/tests/support/util/project.py", "method_code_mask": "from __future__ import annotations\nimport logging\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Sequence\n\n\ndef ls_files(*patterns: str) ->list[str]:\n    proc = run(['git', 'ls-files', '--', *patterns], capture_output=True)\n    return proc.stdout.decode('utf-8').split('\\n')\n\n\ndef ls_modules(*, skip_prefixes: Sequence[str]=[], skip_main: bool=True\n    ) ->list[str]: [MASK]\n", "response": "from __future__ import annotations\nimport logging\nfrom pathlib import Path\nfrom subprocess import run\nfrom typing import Sequence\ndef ls_files(*patterns: str) ->list[str]:\n    proc = run(['git', 'ls-files', '--', *patterns], capture_output=True)\n    return proc.stdout.decode('utf-8').split('\\n')\ndef ls_modules(*, skip_prefixes: Sequence[str]=[], skip_main: bool=True\n    ) ->list[str]:\n    modules: list[str] = []\n    files = ls_files('src/bokeh/**.py')\n    for file in files:\n        if not file:\n            continue\n        if file.endswith('__main__.py') and skip_main:\n            continue\n        module = file.strip('src/').replace('/', '.').replace('.py', ''\n            ).replace('.__init__', '')\n        if any(module.startswith(prefix) for prefix in skip_prefixes):\n            continue\n        modules.append(module)\n    return modules"}
{"result": "passed", "model_name": "std", "repository": "bokeh", "full_method_name": "compute_sha256", "method_path": "../srcdata/Visualization/bokeh/tests/unit/bokeh/core/test_templates.py", "method_code_mask": "from __future__ import annotations\nimport pytest\nimport hashlib\nimport re\nimport sys\nfrom os.path import abspath\nfrom os.path import join\nfrom os.path import split\nfrom bokeh.embed import file_html\nfrom bokeh.plotting import figure\nfrom bokeh.resources import Resources\nfrom bokeh.resources import ResourcesMode\nimport bokeh.core.templates as bct\n\n\ndef compute_sha256(data): [MASK]\n", "response": "from __future__ import annotations\nimport pytest\nimport hashlib\nimport re\nimport sys\nfrom os.path import abspath\nfrom os.path import join\nfrom os.path import split\nfrom bokeh.embed import file_html\nfrom bokeh.plotting import figure\nfrom bokeh.resources import Resources\nfrom bokeh.resources import ResourcesMode\nimport bokeh.core.templates as bct\ndef compute_sha256(data):\n    sha256 = hashlib.sha256()\n    sha256.update(data)\n    return sha256.hexdigest()"}
{"result": "passed", "model_name": "std", "repository": "bokeh", "full_method_name": "get_html_lines", "method_path": "../srcdata/Visualization/bokeh/tests/unit/bokeh/core/test_templates.py", "method_code_mask": "from __future__ import annotations\nimport pytest\nimport hashlib\nimport re\nimport sys\nfrom os.path import abspath\nfrom os.path import join\nfrom os.path import split\nfrom bokeh.embed import file_html\nfrom bokeh.plotting import figure\nfrom bokeh.resources import Resources\nfrom bokeh.resources import ResourcesMode\nimport bokeh.core.templates as bct\n\n\ndef get_html_lines(resource_mode: ResourcesMode) ->list[str]: [MASK]\n", "response": "from __future__ import annotations\nimport pytest\nimport hashlib\nimport re\nimport sys\nfrom os.path import abspath\nfrom os.path import join\nfrom os.path import split\nfrom bokeh.embed import file_html\nfrom bokeh.plotting import figure\nfrom bokeh.resources import Resources\nfrom bokeh.resources import ResourcesMode\nimport bokeh.core.templates as bct\ndef get_html_lines(resource_mode: ResourcesMode) ->list[str]:\n    p = figure()\n    p.scatter(x=[], y=[])\n    html = file_html(p, resources=Resources(resource_mode))\n    return html.split('\\n')"}
{"result": "passed", "model_name": "std", "repository": "bokeh", "full_method_name": "mathstring_major_label_overrides_partial", "method_path": "../srcdata/Visualization/bokeh/tests/unit/bokeh/embed/test_bundle.py", "method_code_mask": "from __future__ import annotations\nimport pytest\nfrom os.path import dirname\nfrom os.path import join\nfrom bokeh import models\nfrom bokeh.core.has_props import _default_resolver\nfrom bokeh.document import Document\nfrom bokeh.embed.bundle import URL\nfrom bokeh.embed.bundle import extension_dirs\nfrom bokeh.ext import build\nfrom bokeh.resources import CDN\nfrom bokeh.resources import INLINE\nfrom bokeh.resources import Resources\nimport bokeh.embed.bundle as beb\nfrom bokeh.plotting import figure\n\n\ndef mathstring_major_label_overrides() ->models.LinearAxis:\n    return models.LinearAxis(major_label_overrides={(0): '\\\\[sin(x)\\\\]'})\n\n\ndef plot() ->models.Plot:\n    from bokeh.plotting import figure\n    plot = figure()\n    plot.scatter([1, 2], [2, 3])\n    return plot\n\n\ndef mathstring_major_label_overrides_partial() ->models.LinearAxis: [MASK]\n", "response": "from __future__ import annotations\nimport pytest\nfrom os.path import dirname\nfrom os.path import join\nfrom bokeh import models\nfrom bokeh.core.has_props import _default_resolver\nfrom bokeh.document import Document\nfrom bokeh.embed.bundle import URL\nfrom bokeh.embed.bundle import extension_dirs\nfrom bokeh.ext import build\nfrom bokeh.resources import CDN\nfrom bokeh.resources import INLINE\nfrom bokeh.resources import Resources\nimport bokeh.embed.bundle as beb\nfrom bokeh.plotting import figure\ndef mathstring_major_label_overrides() ->models.LinearAxis:\n    return models.LinearAxis(major_label_overrides={(0): '\\\\[sin(x)\\\\]'})\ndef plot() ->models.Plot:\n    from bokeh.plotting import figure\n    plot = figure()\n    plot.scatter([1, 2], [2, 3])\n    return plot\ndef mathstring_major_label_overrides_partial() ->models.LinearAxis:\n    return models.LinearAxis(major_label_overrides={(0):\n        'Sine \\\\[sin(x)\\\\] function'})"}
{"result": "passed", "model_name": "std", "repository": "bokeh", "full_method_name": "_collector", "method_path": "../srcdata/Visualization/bokeh/tests/unit/bokeh/test_driving.py", "method_code_mask": "from __future__ import annotations\nimport pytest\nfrom numpy.testing import assert_allclose\nimport bokeh.driving as bd\n\n\ndef _collector(results): [MASK]\n", "response": "from __future__ import annotations\nimport pytest\nfrom numpy.testing import assert_allclose\nimport bokeh.driving as bd\ndef _collector(results):\n\n    def foo(val):\n        results.append(val)\n    return foo"}
{"result": "passed", "model_name": "std", "repository": "bokeh", "full_method_name": "envset", "method_path": "../srcdata/Visualization/bokeh/tests/support/util/env.py", "method_code_mask": "from __future__ import annotations\nimport logging\nimport os\nfrom contextlib import contextmanager\nfrom typing import Any\nfrom typing import Iterator\nfrom typing import Mapping\n\n\n@contextmanager\ndef envset(value: (Mapping[str, str] | None)=None, **kw: Any) ->Iterator[None\n    ]: [MASK]\n", "response": "from __future__ import annotations\nimport logging\nimport os\nfrom contextlib import contextmanager\nfrom typing import Any\nfrom typing import Iterator\nfrom typing import Mapping\n@contextmanager\ndef envset(value: (Mapping[str, str] | None)=None, **kw: Any) ->Iterator[None]:\n    \"\"\" Temporarily set environment variables and undo the updates on exit.\n\n    Args:\n        value (optional) :\n            A mapping of strings to strings to apply to os.environ\n\n    Any remaining keywoard args are applied to os.environ\n\n    \"\"\"\n    old = os.environ.copy()\n    if value:\n        os.environ.update(value)\n    os.environ.update(**kw)\n    yield\n    os.environ.clear()\n    os.environ.update(old)"}
{"result": "passed", "model_name": "std", "repository": "bokeh", "full_method_name": "_make_invocation_counter", "method_path": "../srcdata/Visualization/bokeh/tests/unit/bokeh/server/test_callbacks__server.py", "method_code_mask": "from __future__ import annotations\nimport pytest\nfrom concurrent.futures import ThreadPoolExecutor\nfrom itertools import repeat\nfrom tornado.ioloop import IOLoop\nfrom bokeh.util.serialization import make_id\nfrom bokeh.util.tornado import _CallbackGroup\nfrom types import MethodType\n\n\ndef _make_invocation_counter(loop, stop_after=1): [MASK]\n", "response": "from __future__ import annotations\nimport pytest\nfrom concurrent.futures import ThreadPoolExecutor\nfrom itertools import repeat\nfrom tornado.ioloop import IOLoop\nfrom bokeh.util.serialization import make_id\nfrom bokeh.util.tornado import _CallbackGroup\nfrom types import MethodType\ndef _make_invocation_counter(loop, stop_after=1):\n    from types import MethodType\n    counter = {'count': 0}\n\n    def func():\n        counter['count'] += 1\n        if stop_after is not None and counter['count'] >= stop_after:\n            loop.stop()\n\n    def count(self):\n        return self.counter['count']\n    func.count = MethodType(count, func)\n    func.counter = counter\n    return func"}
{"result": "passed", "model_name": "std", "repository": "bokeh", "full_method_name": "glplot", "method_path": "../srcdata/Visualization/bokeh/tests/unit/bokeh/embed/test_bundle.py", "method_code_mask": "from __future__ import annotations\nimport pytest\nfrom os.path import dirname\nfrom os.path import join\nfrom bokeh import models\nfrom bokeh.core.has_props import _default_resolver\nfrom bokeh.document import Document\nfrom bokeh.embed.bundle import URL\nfrom bokeh.embed.bundle import extension_dirs\nfrom bokeh.ext import build\nfrom bokeh.resources import CDN\nfrom bokeh.resources import INLINE\nfrom bokeh.resources import Resources\nimport bokeh.embed.bundle as beb\nfrom bokeh.plotting import figure\n\n\ndef plot() ->models.Plot:\n    from bokeh.plotting import figure\n    plot = figure()\n    plot.scatter([1, 2], [2, 3])\n    return plot\n\n\ndef glplot() ->models.Plot: [MASK]\n", "response": "from __future__ import annotations\nimport pytest\nfrom os.path import dirname\nfrom os.path import join\nfrom bokeh import models\nfrom bokeh.core.has_props import _default_resolver\nfrom bokeh.document import Document\nfrom bokeh.embed.bundle import URL\nfrom bokeh.embed.bundle import extension_dirs\nfrom bokeh.ext import build\nfrom bokeh.resources import CDN\nfrom bokeh.resources import INLINE\nfrom bokeh.resources import Resources\nimport bokeh.embed.bundle as beb\nfrom bokeh.plotting import figure\ndef plot() ->models.Plot:\n    from bokeh.plotting import figure\n    plot = figure()\n    plot.scatter([1, 2], [2, 3])\n    return plot\ndef glplot() ->models.Plot:\n    from bokeh.plotting import figure\n    glplot = figure(output_backend='webgl')\n    glplot.scatter([1, 2], [2, 3])\n    return glplot"}
{"result": "passed", "model_name": "std", "repository": "bokeh", "full_method_name": "plot", "method_path": "../srcdata/Visualization/bokeh/tests/unit/bokeh/embed/test_bundle.py", "method_code_mask": "from __future__ import annotations\nimport pytest\nfrom os.path import dirname\nfrom os.path import join\nfrom bokeh import models\nfrom bokeh.core.has_props import _default_resolver\nfrom bokeh.document import Document\nfrom bokeh.embed.bundle import URL\nfrom bokeh.embed.bundle import extension_dirs\nfrom bokeh.ext import build\nfrom bokeh.resources import CDN\nfrom bokeh.resources import INLINE\nfrom bokeh.resources import Resources\nimport bokeh.embed.bundle as beb\nfrom bokeh.plotting import figure\n\n\ndef plot() ->models.Plot: [MASK]\n", "response": "from __future__ import annotations\nimport pytest\nfrom os.path import dirname\nfrom os.path import join\nfrom bokeh import models\nfrom bokeh.core.has_props import _default_resolver\nfrom bokeh.document import Document\nfrom bokeh.embed.bundle import URL\nfrom bokeh.embed.bundle import extension_dirs\nfrom bokeh.ext import build\nfrom bokeh.resources import CDN\nfrom bokeh.resources import INLINE\nfrom bokeh.resources import Resources\nimport bokeh.embed.bundle as beb\nfrom bokeh.plotting import figure\ndef plot() ->models.Plot:\n    from bokeh.plotting import figure\n    plot = figure()\n    plot.scatter([1, 2], [2, 3])\n    return plot"}

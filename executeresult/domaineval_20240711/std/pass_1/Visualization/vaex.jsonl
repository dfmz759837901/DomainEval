{"result": "passed", "model_name": "std", "repository": "vaex", "full_method_name": "translate_options", "method_path": "../srcdata/Visualization/vaex/packages/vaex-core/vaex/file/s3fs.py", "method_code_mask": "import pyarrow.fs\nimport warnings\n\n\ndef translate_options(fs_options): [MASK]\n", "response": "import pyarrow.fs\nimport warnings\ndef translate_options(fs_options):\n    fs_options = fs_options.copy()\n    not_supported = {'role_arn', 'session_name', 'external_id',\n        'load_frequency', 'background_writes', 'profile', 'profile_name'}\n    for key in not_supported:\n        if key in fs_options:\n            warnings.warn(\n                f'The option {key} is not supported using s3fs instead of arrow, so it will be ignored'\n                )\n            fs_options.pop(key)\n    if 'endpoint_override' in fs_options.keys():\n        if 'scheme' in fs_options.keys():\n            fs_options['endpoint_override'] = fs_options.pop('scheme'\n                ) + '://' + fs_options.pop('endpoint_override')\n        else:\n            fs_options['endpoint_override'] = 'https://' + fs_options.pop(\n                'endpoint_override')\n    mapping = {'anonymous': 'anon'}\n    for key in list(fs_options):\n        if key in mapping:\n            fs_options[mapping[key]] = fs_options.pop(key)\n    mapping = {'access_key': 'aws_access_key_id', 'secret_key':\n        'aws_secret_access_key', 'session_token': 'aws_session_token',\n        'region': 'region_name', 'endpoint_override': 'endpoint_url'}\n    fs_options['client_kwargs'] = fs_options.get('client_kwargs', {})\n    for key in list(fs_options):\n        if key in mapping:\n            fs_options['client_kwargs'][mapping[key]] = fs_options.pop(key)\n    return fs_options"}

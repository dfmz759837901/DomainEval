{"result": "passed", "model_name": "std", "repository": "matplotlib", "full_method_name": "draw_quiver", "method_path": "../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_quiver.py", "method_code_mask": "import platform\nimport sys\nimport numpy as np\nimport pytest\nfrom matplotlib import pyplot as plt\nfrom matplotlib.testing.decorators import image_comparison\n\n\ndef draw_quiver(ax, **kwargs): [MASK]\n", "response": "import platform\nimport sys\nimport numpy as np\nimport pytest\nfrom matplotlib import pyplot as plt\nfrom matplotlib.testing.decorators import image_comparison\ndef draw_quiver(ax, **kwargs):\n    X, Y = np.meshgrid(np.arange(0, 2 * np.pi, 1), np.arange(0, 2 * np.pi, 1))\n    U = np.cos(X)\n    V = np.sin(Y)\n    Q = ax.quiver(U, V, **kwargs)\n    return Q"}
{"result": "passed", "model_name": "std", "repository": "matplotlib", "full_method_name": "_sph2cart", "method_path": "../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_colors.py", "method_code_mask": "import copy\nimport itertools\nimport unittest.mock\nfrom io import BytesIO\nimport numpy as np\nfrom PIL import Image\nimport pytest\nimport base64\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom matplotlib import cbook\nfrom matplotlib import cm\nimport matplotlib\nimport matplotlib as mpl\nimport matplotlib.colors as mcolors\nimport matplotlib.colorbar as mcolorbar\nimport matplotlib.pyplot as plt\nimport matplotlib.scale as mscale\nfrom matplotlib.rcsetup import cycler\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.testing.decorators import check_figures_equal\nfrom matplotlib.colors import is_color_like\nfrom matplotlib.colors import to_rgba_array\n\n\ndef _sph2cart(theta, phi): [MASK]\n", "response": "import copy\nimport itertools\nimport unittest.mock\nfrom io import BytesIO\nimport numpy as np\nfrom PIL import Image\nimport pytest\nimport base64\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom matplotlib import cbook\nfrom matplotlib import cm\nimport matplotlib\nimport matplotlib as mpl\nimport matplotlib.colors as mcolors\nimport matplotlib.colorbar as mcolorbar\nimport matplotlib.pyplot as plt\nimport matplotlib.scale as mscale\nfrom matplotlib.rcsetup import cycler\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.testing.decorators import check_figures_equal\nfrom matplotlib.colors import is_color_like\nfrom matplotlib.colors import to_rgba_array\ndef _sph2cart(theta, phi):\n    x = np.cos(theta) * np.sin(phi)\n    y = np.sin(theta) * np.sin(phi)\n    z = np.cos(phi)\n    return x, y, z"}
{"result": "passed", "model_name": "std", "repository": "matplotlib", "full_method_name": "_azimuth2math", "method_path": "../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_colors.py", "method_code_mask": "import copy\nimport itertools\nimport unittest.mock\nfrom io import BytesIO\nimport numpy as np\nfrom PIL import Image\nimport pytest\nimport base64\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom matplotlib import cbook\nfrom matplotlib import cm\nimport matplotlib\nimport matplotlib as mpl\nimport matplotlib.colors as mcolors\nimport matplotlib.colorbar as mcolorbar\nimport matplotlib.pyplot as plt\nimport matplotlib.scale as mscale\nfrom matplotlib.rcsetup import cycler\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.testing.decorators import check_figures_equal\nfrom matplotlib.colors import is_color_like\nfrom matplotlib.colors import to_rgba_array\n\n\ndef _azimuth2math(azimuth, elevation): [MASK]\n", "response": "import copy\nimport itertools\nimport unittest.mock\nfrom io import BytesIO\nimport numpy as np\nfrom PIL import Image\nimport pytest\nimport base64\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom matplotlib import cbook\nfrom matplotlib import cm\nimport matplotlib\nimport matplotlib as mpl\nimport matplotlib.colors as mcolors\nimport matplotlib.colorbar as mcolorbar\nimport matplotlib.pyplot as plt\nimport matplotlib.scale as mscale\nfrom matplotlib.rcsetup import cycler\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.testing.decorators import check_figures_equal\nfrom matplotlib.colors import is_color_like\nfrom matplotlib.colors import to_rgba_array\ndef _azimuth2math(azimuth, elevation):\n    \"\"\"\n    Convert from clockwise-from-north and up-from-horizontal to mathematical\n    conventions.\n    \"\"\"\n    theta = np.radians((90 - azimuth) % 360)\n    phi = np.radians(90 - elevation)\n    return theta, phi"}
{"result": "passed", "model_name": "std", "repository": "matplotlib", "full_method_name": "example_plot", "method_path": "../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_constrainedlayout.py", "method_code_mask": "import gc\nimport platform\nimport numpy as np\nimport pytest\nimport matplotlib as mpl\nfrom matplotlib.testing.decorators import image_comparison\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\nfrom matplotlib import gridspec\nfrom matplotlib import ticker\n\n\ndef example_plot(ax, fontsize=12, nodec=False): [MASK]\n", "response": "import gc\nimport platform\nimport numpy as np\nimport pytest\nimport matplotlib as mpl\nfrom matplotlib.testing.decorators import image_comparison\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\nfrom matplotlib import gridspec\nfrom matplotlib import ticker\ndef example_plot(ax, fontsize=12, nodec=False):\n    ax.plot([1, 2])\n    ax.locator_params(nbins=3)\n    if not nodec:\n        ax.set_xlabel('x-label', fontsize=fontsize)\n        ax.set_ylabel('y-label', fontsize=fontsize)\n        ax.set_title('Title', fontsize=fontsize)\n    else:\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])"}
{"result": "passed", "model_name": "std", "repository": "matplotlib", "full_method_name": "meshgrid_triangles", "method_path": "../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_triangulation.py", "method_code_mask": "import numpy as np\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom numpy.testing import assert_array_less\nimport numpy.ma.testutils as matest\nimport pytest\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as mtri\nfrom matplotlib.path import Path\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.testing.decorators import check_figures_equal\nfrom matplotlib import _tri\n\n\ndef meshgrid_triangles(n): [MASK]\n", "response": "import numpy as np\nfrom numpy.testing import assert_array_equal\nfrom numpy.testing import assert_array_almost_equal\nfrom numpy.testing import assert_array_less\nimport numpy.ma.testutils as matest\nimport pytest\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as mtri\nfrom matplotlib.path import Path\nfrom matplotlib.testing.decorators import image_comparison\nfrom matplotlib.testing.decorators import check_figures_equal\nfrom matplotlib import _tri\ndef meshgrid_triangles(n):\n    \"\"\"\n    Return (2*(N-1)**2, 3) array of triangles to mesh (N, N)-point np.meshgrid.\n    \"\"\"\n    tri = []\n    for i in range(n - 1):\n        for j in range(n - 1):\n            a = i + j * n\n            b = i + 1 + j * n\n            c = i + (j + 1) * n\n            d = i + 1 + (j + 1) * n\n            tri += [[a, b, d], [a, d, c]]\n    return np.array(tri, dtype=np.int32)"}
{"result": "passed", "model_name": "std", "repository": "matplotlib", "full_method_name": "example_pcolor", "method_path": "../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_constrainedlayout.py", "method_code_mask": "import gc\nimport platform\nimport numpy as np\nimport pytest\nimport matplotlib as mpl\nfrom matplotlib.testing.decorators import image_comparison\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\nfrom matplotlib import gridspec\nfrom matplotlib import ticker\n\n\ndef example_pcolor(ax, fontsize=12): [MASK]\n", "response": "import gc\nimport platform\nimport numpy as np\nimport pytest\nimport matplotlib as mpl\nfrom matplotlib.testing.decorators import image_comparison\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\nfrom matplotlib import gridspec\nfrom matplotlib import ticker\ndef example_pcolor(ax, fontsize=12):\n    dx, dy = 0.6, 0.6\n    y, x = np.mgrid[slice(-3, 3 + dy, dy), slice(-3, 3 + dx, dx)]\n    z = (1 - x / 2.0 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)\n    pcm = ax.pcolormesh(x, y, z[:-1, :-1], cmap='RdBu_r', vmin=-1.0, vmax=\n        1.0, rasterized=True)\n    ax.set_xlabel('x-label', fontsize=fontsize)\n    ax.set_ylabel('y-label', fontsize=fontsize)\n    ax.set_title('Title', fontsize=fontsize)\n    return pcm"}
{"result": "passed", "model_name": "std", "repository": "matplotlib", "full_method_name": "temp_style", "method_path": "../srcdata/Visualization/matplotlib/lib/matplotlib/tests/test_style.py", "method_code_mask": "from contextlib import contextmanager\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\nimport sys\nimport numpy as np\nimport pytest\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\nfrom matplotlib.style.core import USER_LIBRARY_PATHS\nfrom matplotlib.style.core import STYLE_EXTENSION\nVALUE = 'pink'\nPARAM = 'image.cmap'\nDUMMY_SETTINGS = {PARAM: VALUE}\n\n\n@contextmanager\ndef temp_style(style_name, settings=None): [MASK]\n", "response": "from contextlib import contextmanager\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\nimport sys\nimport numpy as np\nimport pytest\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\nfrom matplotlib.style.core import USER_LIBRARY_PATHS\nfrom matplotlib.style.core import STYLE_EXTENSION\nVALUE = 'pink'\nPARAM = 'image.cmap'\nDUMMY_SETTINGS = {PARAM: VALUE}\n@contextmanager\ndef temp_style(style_name, settings=None):\n    \"\"\"Context manager to create a style sheet in a temporary directory.\"\"\"\n    if not settings:\n        settings = DUMMY_SETTINGS\n    temp_file = f'{style_name}.{STYLE_EXTENSION}'\n    try:\n        with TemporaryDirectory() as tmpdir:\n            Path(tmpdir, temp_file).write_text('\\n'.join(f'{k}: {v}' for k,\n                v in settings.items()), encoding='utf-8')\n            USER_LIBRARY_PATHS.append(tmpdir)\n            style.reload_library()\n            yield\n    finally:\n        style.reload_library()"}

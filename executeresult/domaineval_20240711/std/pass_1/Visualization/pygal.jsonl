{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "unparse_color", "method_path": "../srcdata/Visualization/pygal/pygal/colors.py", "method_code_mask": "from __future__ import division\n\n\ndef unparse_color(r, g, b, a, type): [MASK]\n", "response": "from __future__ import division\ndef unparse_color(r, g, b, a, type):\n    \"\"\"\n    Take the r, g, b, a color values and give back\n    a type css color string. This is the inverse function of parse_color\n    \"\"\"\n    if type == '#rgb':\n        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n        type = '#rrggbb'\n    if type == '#rgba':\n        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n            return '#%x%x%x%x' % (int(r / 17), int(g / 17), int(b / 17),\n                int(a * 15))\n        type = '#rrggbbaa'\n    if type == '#rrggbb':\n        return '#%02x%02x%02x' % (r, g, b)\n    if type == '#rrggbbaa':\n        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n    if type == 'rgb':\n        return 'rgb(%d, %d, %d)' % (r, g, b)\n    if type == 'rgba':\n        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)"}
{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "round_to_int", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef round_to_int(number, precision): [MASK]\n", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef round_to_int(number, precision):\n    \"\"\"Round a number to a precision\"\"\"\n    precision = int(precision)\n    rounded = (int(number) + precision / 2) // precision * precision\n    return rounded"}
{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "_swap_curly", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef _swap_curly(string): [MASK]\n", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef _swap_curly(string):\n    \"\"\"Swap single and double curly brackets\"\"\"\n    return string.replace('{{ ', '{{').replace('{{', '\\x00').replace('{', '{{'\n        ).replace('\\x00', '{').replace(' }}', '}}').replace('}}', '\\x00'\n        ).replace('}', '}}').replace('\\x00', '}')"}
{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "round_to_float", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef round_to_float(number, precision): [MASK]\n", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef round_to_float(number, precision):\n    \"\"\"Round a float to a precision\"\"\"\n    rounded = Decimal(str(floor((number + precision / 2) // precision))\n        ) * Decimal(str(precision))\n    return float(rounded)"}
{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "minify_css", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ncss_comments = re.compile('/\\\\*.*?\\\\*/', re.MULTILINE | re.DOTALL)\n\n\ndef minify_css(css): [MASK]\n", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ncss_comments = re.compile('/\\\\*.*?\\\\*/', re.MULTILINE | re.DOTALL)\ndef minify_css(css):\n    \"\"\"Little css minifier\"\"\"\n    remove_next_comment = 1\n    for css_comment in css_comments.findall(css):\n        if css_comment[-3:] == '\\\\*/':\n            remove_next_comment = 0\n            continue\n        if remove_next_comment:\n            css = css.replace(css_comment, '')\n        else:\n            remove_next_comment = 1\n    css = re.sub('\\\\s\\\\s+', ' ', css)\n    css = re.sub('\\\\s+\\\\n', '', css)\n    for char in ('{', '}', ':', ';', ','):\n        css = re.sub(char + '\\\\s', char, css)\n        css = re.sub('\\\\s' + char, char, css)\n    css = re.sub('}\\\\s(#|\\\\w)', '}\\\\1', css)\n    css = re.sub(';}', '}', css)\n    css = re.sub('}//-->', '}\\\\n//-->', css)\n    return css.strip()"}
{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "majorize", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef majorize(values): [MASK]\n", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef majorize(values):\n    \"\"\"Filter sequence to return only major considered numbers\"\"\"\n    sorted_values = sorted(values)\n    if len(values) <= 3 or abs(2 * sorted_values[1] - sorted_values[0] -\n        sorted_values[2]) > abs(1.5 * (sorted_values[1] - sorted_values[0])):\n        return []\n    values_step = sorted_values[1] - sorted_values[0]\n    full_range = sorted_values[-1] - sorted_values[0]\n    step = 10 ** int(log10(full_range))\n    if step == values_step:\n        step *= 10\n    step_factor = 10 ** (int(log10(step)) + 1)\n    if round(step * step_factor) % (round(values_step * step_factor) or 1):\n        step *= values_step\n    if full_range <= 2 * step:\n        step *= 0.5\n    elif full_range >= 5 * step:\n        step *= 5\n    major_values = [value for value in values if value / step == round(\n        value / step)]\n    return [value for value in sorted_values if value in major_values]"}
{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "truncate", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef truncate(string, index): [MASK]\n", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef truncate(string, index):\n    \"\"\"Truncate a string at index and add ...\"\"\"\n    if len(string) > index and index > 0:\n        string = string[:index - 1] + '\u2026'\n    return string"}
{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "mergextend", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef mergextend(list1, list2): [MASK]\n", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef mergextend(list1, list2):\n    if list1 is None or Ellipsis not in list1:\n        return list1\n    index = list1.index(Ellipsis)\n    return list(list1[:index]) + list(list2) + list(list1[index + 1:])"}
{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "rgb_to_hsl", "method_path": "../srcdata/Visualization/pygal/pygal/colors.py", "method_code_mask": "from __future__ import division\n\n\ndef normalize_float(f):\n    \"\"\"Round float errors\"\"\"\n    if abs(f - round(f)) < 1e-13:\n        return round(f)\n    return f\n\n\ndef rgb_to_hsl(r, g, b): [MASK]\n", "response": "from __future__ import division\ndef normalize_float(f):\n    \"\"\"Round float errors\"\"\"\n    if abs(f - round(f)) < 1e-13:\n        return round(f)\n    return f\ndef rgb_to_hsl(r, g, b):\n    \"\"\"Convert a color in r, g, b to a color in h, s, l\"\"\"\n    r = r or 0\n    g = g or 0\n    b = b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n    d = max_ - min_\n    if not d:\n        h = 0\n    elif r is max_:\n        h = 60 * (g - b) / d\n    elif g is max_:\n        h = 60 * (b - r) / d + 120\n    else:\n        h = 60 * (r - g) / d + 240\n    l = 0.5 * (max_ + min_)\n    if not d:\n        s = 0\n    elif l < 0.5:\n        s = 0.5 * d / l\n    else:\n        s = 0.5 * d / (1 - l)\n    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))"}
{"result": "passed", "model_name": "std", "repository": "pygal", "full_method_name": "hsl_to_rgb", "method_path": "../srcdata/Visualization/pygal/pygal/colors.py", "method_code_mask": "from __future__ import division\n\n\ndef hsl_to_rgb(h, s, l): [MASK]\n", "response": "from __future__ import division\ndef hsl_to_rgb(h, s, l):\n    \"\"\"Convert a color in h, s, l to a color in r, g, b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n    m2 = l * (s + 1) if l <= 0.5 else l + s - l * s\n    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n        h = h % 1\n        if 6 * h < 1:\n            return m1 + 6 * h * (m2 - m1)\n        if 2 * h < 1:\n            return m2\n        if 3 * h < 2:\n            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n        return m1\n    r, g, b = map(lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h -\n        1 / 3)))\n    return r, g, b"}

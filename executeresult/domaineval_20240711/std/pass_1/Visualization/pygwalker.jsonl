{"result": "passed", "model_name": "std", "repository": "pygwalker", "full_method_name": "base36decode", "method_path": "../srcdata/Visualization/pygwalker/pygwalker/services/fname_encodings.py", "method_code_mask": "from typing import List\nfrom math import ceil\nfrom collections import defaultdict\n\n\ndef base36decode(s: str) ->str: [MASK]\n", "response": "from typing import List\nfrom math import ceil\nfrom collections import defaultdict\ndef base36decode(s: str) ->str:\n    \"\"\"Converts a base36 string to an string.\"\"\"\n    number = int(s, 36)\n    return number.to_bytes(ceil(number.bit_length() / 8), 'big').decode()"}
{"result": "passed", "model_name": "std", "repository": "pygwalker", "full_method_name": "base36encode", "method_path": "../srcdata/Visualization/pygwalker/pygwalker/services/fname_encodings.py", "method_code_mask": "from typing import List\nfrom math import ceil\nfrom collections import defaultdict\n\n\ndef base36encode(s: str) ->str: [MASK]\n", "response": "from typing import List\nfrom math import ceil\nfrom collections import defaultdict\ndef base36encode(s: str) ->str:\n    \"\"\"Converts an string to a base36 string.\"\"\"\n    alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    number = int.from_bytes(s.encode(), 'big')\n    if not isinstance(number, int):\n        raise TypeError('number must be an integer')\n    base36 = ''\n    if 0 <= number < len(alphabet):\n        return alphabet[number]\n    while number != 0:\n        number, i = divmod(number, len(alphabet))\n        base36 = alphabet[i] + base36\n    return base36"}
{"result": "passed", "model_name": "std", "repository": "pygwalker", "full_method_name": "get_formated_spec_params_code", "method_path": "../srcdata/Visualization/pygwalker/pygwalker/services/format_invoke_walk_code.py", "method_code_mask": "from typing import Optional\nfrom typing import List\nfrom types import FrameType\nimport logging\nimport inspect\nimport ast\nfrom astor.source_repr import split_lines\nimport astor\n_MAX_LINE = 150\n\n\ndef _private_astor_pretty_source(source: List[str]) ->str:\n    return ''.join(split_lines(source, maxline=_MAX_LINE))\n\n\ndef _repalce_spec_params_code(func: 'ast.Call') ->str:\n    replace_value = ast.Constant(value='____pyg_walker_spec_params____')\n    spec_index = -1\n    for index, keyword in enumerate(func.keywords):\n        if keyword.arg == 'spec':\n            spec_index = index\n    if spec_index != -1:\n        func.keywords[spec_index].value = replace_value\n    else:\n        func.keywords.insert(0, ast.keyword(arg='spec', value=replace_value))\n    return astor.to_source(func, pretty_source=_private_astor_pretty_source)\n\n\ndef _find_walk_func_node(code: str) ->Optional['ast.Call']:\n    node_list = [ast.parse(code)]\n    while node_list:\n        cur_node = node_list.pop()\n        if isinstance(cur_node, ast.Call):\n            if isinstance(cur_node.func, ast.Name):\n                func_name = cur_node.func.id\n            else:\n                func_name = cur_node.func.attr\n            if func_name == 'walk':\n                return cur_node\n        for node_info in astor.iter_node(cur_node):\n            if isinstance(node_info[0], list):\n                nodes = node_info[0]\n            else:\n                nodes = [node_info[0]]\n            for children_node in nodes:\n                node_list.append(children_node)\n\n\ndef get_formated_spec_params_code(code: str) ->str: [MASK]\n", "response": "from typing import Optional\nfrom typing import List\nfrom types import FrameType\nimport logging\nimport inspect\nimport ast\nfrom astor.source_repr import split_lines\nimport astor\n_MAX_LINE = 150\ndef _private_astor_pretty_source(source: List[str]) ->str:\n    return ''.join(split_lines(source, maxline=_MAX_LINE))\ndef _repalce_spec_params_code(func: 'ast.Call') ->str:\n    replace_value = ast.Constant(value='____pyg_walker_spec_params____')\n    spec_index = -1\n    for index, keyword in enumerate(func.keywords):\n        if keyword.arg == 'spec':\n            spec_index = index\n    if spec_index != -1:\n        func.keywords[spec_index].value = replace_value\n    else:\n        func.keywords.insert(0, ast.keyword(arg='spec', value=replace_value))\n    return astor.to_source(func, pretty_source=_private_astor_pretty_source)\ndef _find_walk_func_node(code: str) ->Optional['ast.Call']:\n    node_list = [ast.parse(code)]\n    while node_list:\n        cur_node = node_list.pop()\n        if isinstance(cur_node, ast.Call):\n            if isinstance(cur_node.func, ast.Name):\n                func_name = cur_node.func.id\n            else:\n                func_name = cur_node.func.attr\n            if func_name == 'walk':\n                return cur_node\n        for node_info in astor.iter_node(cur_node):\n            if isinstance(node_info[0], list):\n                nodes = node_info[0]\n            else:\n                nodes = [node_info[0]]\n            for children_node in nodes:\n                node_list.append(children_node)\ndef get_formated_spec_params_code(code: str) ->str:\n    call_func = _find_walk_func_node(code.strip())\n    if call_func is None:\n        return ''\n    return _repalce_spec_params_code(call_func)"}

{"result": "passed", "model_name": "std", "repository": "plotly.py", "full_method_name": "return_prop_descriptions", "method_path": "../srcdata/Visualization/plotly.py/packages/python/plotly/plotly/tests/test_core/test_graph_objs/test_frames.py", "method_code_mask": "from unittest import TestCase\nfrom plotly.graph_objs import Bar\nfrom plotly.graph_objs import Frames\nfrom plotly.graph_objs import Frame\nfrom plotly.graph_objs import Layout\nimport pytest\nimport re\n\n\ndef return_prop_descriptions(prop_descrip_text): [MASK]\n", "response": "from unittest import TestCase\nfrom plotly.graph_objs import Bar\nfrom plotly.graph_objs import Frames\nfrom plotly.graph_objs import Frame\nfrom plotly.graph_objs import Layout\nimport pytest\nimport re\ndef return_prop_descriptions(prop_descrip_text):\n    raw_matches = re.findall(\"\"\"\n        [a-z]+|        [a-z]+\n\"\"\",\n        prop_descrip_text)\n    matches = []\n    for r in raw_matches:\n        r = r.replace(' ', '')\n        r = r.replace('\\n', '')\n        matches.append(r)\n    return matches"}
{"result": "passed", "model_name": "std", "repository": "plotly.py", "full_method_name": "replace_div_id", "method_path": "../srcdata/Visualization/plotly.py/packages/python/plotly/plotly/tests/test_io/test_pathlib.py", "method_code_mask": "from unittest import mock\nimport plotly.io as pio\nfrom io import StringIO\nfrom pathlib import Path\nimport re\nfrom unittest.mock import Mock\n\n\ndef replace_div_id(s): [MASK]\n", "response": "from unittest import mock\nimport plotly.io as pio\nfrom io import StringIO\nfrom pathlib import Path\nimport re\nfrom unittest.mock import Mock\ndef replace_div_id(s):\n    uuid = re.search('<div id=\"([^\"]*)\"', s).groups()[0]\n    return s.replace(uuid, 'XXXX')"}
{"result": "passed", "model_name": "std", "repository": "plotly.py", "full_method_name": "make_writeable_mocks", "method_path": "../srcdata/Visualization/plotly.py/packages/python/plotly/plotly/tests/test_optional/test_kaleido/test_kaleido.py", "method_code_mask": "import plotly.io as pio\nimport plotly.io.kaleido\nfrom contextlib import contextmanager\nfrom io import BytesIO\nfrom pathlib import Path\nfrom unittest.mock import Mock\n\n\ndef make_writeable_mocks(): [MASK]\n", "response": "import plotly.io as pio\nimport plotly.io.kaleido\nfrom contextlib import contextmanager\nfrom io import BytesIO\nfrom pathlib import Path\nfrom unittest.mock import Mock\ndef make_writeable_mocks():\n    \"\"\"Produce some mocks which we will use for testing the `write_image()` function.\n\n    These mocks should be passed as the `file=` argument to `write_image()`.\n\n    The tests should verify that the method specified in the `active_write_function`\n    attribute is called once, and that scope.transform is called with the `format=`\n    argument specified by the `.expected_format` attribute.\n\n    In total we provide two mocks: one for a writable file descriptor, and other for a\n    pathlib.Path object.\n    \"\"\"\n    mock_file_descriptor = Mock()\n    del mock_file_descriptor.write_bytes\n    mock_file_descriptor.active_write_function = mock_file_descriptor.write\n    mock_file_descriptor.expected_format = None\n    mock_pathlib_path = Mock(spec=Path)\n    del mock_pathlib_path.write\n    mock_pathlib_path.active_write_function = mock_pathlib_path.write_bytes\n    mock_pathlib_path.suffix = '.png'\n    mock_pathlib_path.expected_format = 'png'\n    return mock_file_descriptor, mock_pathlib_path"}
{"result": "passed", "model_name": "std", "repository": "plotly.py", "full_method_name": "all_combos", "method_path": "../srcdata/Visualization/plotly.py/packages/python/plotly/plotly/tests/test_core/test_subplots/test_find_nonempty_subplots.py", "method_code_mask": "import pytest\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom itertools import combinations\nfrom itertools import product\nfrom functools import reduce\n\n\ndef all_combos(it): [MASK]\n", "response": "import pytest\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom itertools import combinations\nfrom itertools import product\nfrom functools import reduce\ndef all_combos(it):\n    return list(reduce(lambda a, b: a + b, [list(combinations(it, r)) for r in\n        range(1, len(it))], []))"}
{"result": "passed", "model_name": "std", "repository": "plotly.py", "full_method_name": "get_non_empty_subplots", "method_path": "../srcdata/Visualization/plotly.py/packages/python/plotly/plotly/tests/test_core/test_subplots/test_find_nonempty_subplots.py", "method_code_mask": "import pytest\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom itertools import combinations\nfrom itertools import product\nfrom functools import reduce\n\n\ndef translate_layout_keys(t):\n    xr, yr = t\n    xr = xr.replace('axis', '')\n    yr = yr.replace('axis', '')\n    return xr, yr\n\n\ndef get_non_empty_subplots(fig, selector): [MASK]\n", "response": "import pytest\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom itertools import combinations\nfrom itertools import product\nfrom functools import reduce\ndef translate_layout_keys(t):\n    xr, yr = t\n    xr = xr.replace('axis', '')\n    yr = yr.replace('axis', '')\n    return xr, yr\ndef get_non_empty_subplots(fig, selector):\n    gr = fig._validate_get_grid_ref()\n    nrows = len(gr)\n    ncols = len(gr[0])\n    sp_addresses = product(range(nrows), range(ncols))\n    ret = list(filter(lambda sp: fig._subplot_not_empty(*\n        translate_layout_keys(sp.layout_keys), selector=selector), [gr[r][c\n        ][0] for r, c in sp_addresses]))\n    return ret"}
{"result": "passed", "model_name": "std", "repository": "plotly.py", "full_method_name": "build_invalid_fig", "method_path": "../srcdata/Visualization/plotly.py/packages/python/plotly/plotly/tests/test_core/test_graph_objs/test_validate.py", "method_code_mask": "import plotly.graph_objs as go\nimport json\nimport pytest\nimport plotly.io as pio\n\n\ndef build_invalid_fig(): [MASK]\n", "response": "import plotly.graph_objs as go\nimport json\nimport pytest\nimport plotly.io as pio\ndef build_invalid_fig():\n    return dict(data=[{'type': 'bar', 'y': 'not_a_list', 'bogus': 23}],\n        layout_title_text='valid title', layout_colorway='not a dict')"}
{"result": "passed", "model_name": "std", "repository": "plotly.py", "full_method_name": "mocked_scope", "method_path": "../srcdata/Visualization/plotly.py/packages/python/plotly/plotly/tests/test_optional/test_kaleido/test_kaleido.py", "method_code_mask": "import plotly.io as pio\nimport plotly.io.kaleido\nfrom contextlib import contextmanager\nfrom io import BytesIO\nfrom pathlib import Path\nfrom unittest.mock import Mock\n\n\n@contextmanager\ndef mocked_scope(): [MASK]\n", "response": "import plotly.io as pio\nimport plotly.io.kaleido\nfrom contextlib import contextmanager\nfrom io import BytesIO\nfrom pathlib import Path\nfrom unittest.mock import Mock\n@contextmanager\ndef mocked_scope():\n    scope_mock = Mock()\n    original_scope = pio._kaleido.scope\n    pio._kaleido.scope = scope_mock\n    try:\n        yield scope_mock\n    finally:\n        pio._kaleido.scope = original_scope"}

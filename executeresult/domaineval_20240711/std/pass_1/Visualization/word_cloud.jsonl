{"result": "passed", "model_name": "std", "repository": "word_cloud", "full_method_name": "get_single_color_func", "method_path": "../srcdata/Visualization/word_cloud/wordcloud/wordcloud.py", "method_code_mask": "from __future__ import division\nimport warnings\nfrom random import Random\nimport io\nimport os\nimport re\nimport base64\nimport sys\nimport colorsys\nimport matplotlib\nimport numpy as np\nfrom operator import itemgetter\nfrom xml.sax import saxutils\nfrom PIL import Image\nfrom PIL import ImageColor\nfrom PIL import ImageDraw\nfrom PIL import ImageFilter\nfrom PIL import ImageFont\nimport matplotlib.pyplot as plt\nimport fontTools\nimport fontTools.subset\n\n\ndef get_single_color_func(color): [MASK]\n", "response": "from __future__ import division\nimport warnings\nfrom random import Random\nimport io\nimport os\nimport re\nimport base64\nimport sys\nimport colorsys\nimport matplotlib\nimport numpy as np\nfrom operator import itemgetter\nfrom xml.sax import saxutils\nfrom PIL import Image\nfrom PIL import ImageColor\nfrom PIL import ImageDraw\nfrom PIL import ImageFilter\nfrom PIL import ImageFont\nimport matplotlib.pyplot as plt\nimport fontTools\nimport fontTools.subset\ndef get_single_color_func(color):\n    \"\"\"Create a color function which returns a single hue and saturation with.\n    different values (HSV). Accepted values are color strings as usable by\n    PIL/Pillow.\n\n    >>> color_func1 = get_single_color_func('deepskyblue')\n    >>> color_func2 = get_single_color_func('#00b4d2')\n    \"\"\"\n    old_r, old_g, old_b = ImageColor.getrgb(color)\n    rgb_max = 255.0\n    h, s, v = colorsys.rgb_to_hsv(old_r / rgb_max, old_g / rgb_max, old_b /\n        rgb_max)\n\n    def single_color_func(word=None, font_size=None, position=None,\n        orientation=None, font_path=None, random_state=None):\n        \"\"\"Random color generation.\n\n        Additional coloring method. It picks a random value with hue and\n        saturation based on the color given to the generating function.\n\n        Parameters\n        ----------\n        word, font_size, position, orientation  : ignored.\n\n        random_state : random.Random object or None, (default=None)\n          If a random object is given, this is used for generating random\n          numbers.\n\n        \"\"\"\n        if random_state is None:\n            random_state = Random()\n        r, g, b = colorsys.hsv_to_rgb(h, s, random_state.uniform(0.2, 1))\n        return 'rgb({:.0f}, {:.0f}, {:.0f})'.format(r * rgb_max, g *\n            rgb_max, b * rgb_max)\n    return single_color_func"}

{"result": "passed", "model_name": "std", "repository": "poetry", "full_method_name": "flatten_dict", "method_path": "../srcdata/System/poetry/tests/helpers.py", "method_code_mask": "from __future__ import annotations\nimport contextlib\nimport os\nimport re\nimport shutil\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING\nfrom collections.abc import Iterator\nfrom typing import Any\nfrom typing import Mapping\nfrom tomlkit.toml_document import TOMLDocument\n\n\ndef flatten_dict(obj: Mapping[str, Any], delimiter: str='.') ->Mapping[str, Any\n    ]: [MASK]\n", "response": "from __future__ import annotations\nimport contextlib\nimport os\nimport re\nimport shutil\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING\nfrom collections.abc import Iterator\nfrom typing import Any\nfrom typing import Mapping\nfrom tomlkit.toml_document import TOMLDocument\ndef flatten_dict(obj: Mapping[str, Any], delimiter: str='.') ->Mapping[str, Any\n    ]:\n    \"\"\"\n    Flatten a nested dict.\n\n    A flatdict replacement.\n\n    :param obj: A nested dict to be flattened\n    :delimiter str: A delimiter used in the key path\n    :return: Flattened dict\n    \"\"\"\n\n    def recurse_keys(obj: Mapping[str, Any]) ->Iterator[tuple[list[str], Any]]:\n        \"\"\"\n        A recursive generator to yield key paths and their values\n\n        :param obj: A nested dict to be flattened\n        :return:  dict\n        \"\"\"\n        if isinstance(obj, dict):\n            for key in obj:\n                for leaf in recurse_keys(obj[key]):\n                    leaf_path, leaf_value = leaf\n                    leaf_path.insert(0, key)\n                    yield leaf_path, leaf_value\n        else:\n            yield [], obj\n    return {delimiter.join(path): value for path, value in recurse_keys(obj)}"}

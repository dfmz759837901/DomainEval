{"result": "passed", "model_name": "std", "repository": "sentry", "full_method_name": "_glob_to_re", "method_path": "../srcdata/System/sentry/tools/mypy_helpers/check_stronglist.py", "method_code_mask": "import argparse\nimport glob\nimport os.path\nimport re\nfrom collections.abc import Sequence\n\n\ndef _glob_to_re(s: str) ->str: [MASK]\n", "response": "import argparse\nimport glob\nimport os.path\nimport re\nfrom collections.abc import Sequence\ndef _glob_to_re(s: str) ->str:\n    if s.endswith('.*'):\n        pat = f\"{re.escape(s.removesuffix('.*'))}(?:|\\\\..*+)\"\n    else:\n        pat = re.escape(s)\n    return f'^{pat}$'"}
{"result": "passed", "model_name": "std", "repository": "sentry", "full_method_name": "color", "method_path": "../srcdata/System/sentry/tools/docker_memory_check.py", "method_code_mask": "from __future__ import annotations\nimport argparse\nimport json\nimport os.path\nimport sys\nfrom collections.abc import Sequence\n\n\ndef color(s: str, color: str, *, use_color: bool) ->str: [MASK]\n", "response": "from __future__ import annotations\nimport argparse\nimport json\nimport os.path\nimport sys\nfrom collections.abc import Sequence\ndef color(s: str, color: str, *, use_color: bool) ->str:\n    if use_color:\n        return f'{color}{s}\\x1b[m'\n    else:\n        return s"}

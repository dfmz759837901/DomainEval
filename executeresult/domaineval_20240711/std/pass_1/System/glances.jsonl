{"result": "passed", "model_name": "std", "repository": "glances", "full_method_name": "is_admin", "method_path": "../srcdata/System/glances/glances/globals.py", "method_code_mask": "import base64\nimport errno\nimport functools\nimport os\nimport platform\nimport queue\nimport re\nimport subprocess\nimport sys\nimport weakref\nfrom configparser import ConfigParser\nfrom configparser import NoOptionError\nfrom configparser import NoSectionError\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom operator import methodcaller\nfrom statistics import mean\nfrom urllib.error import HTTPError\nfrom urllib.error import URLError\nfrom urllib.parse import urlparse\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom xmlrpc.client import Fault\nfrom xmlrpc.client import ProtocolError\nfrom xmlrpc.client import Server\nfrom xmlrpc.client import ServerProxy\nfrom xmlrpc.client import Transport\nfrom xmlrpc.server import SimpleXMLRPCRequestHandler\nfrom xmlrpc.server import SimpleXMLRPCServer\nimport ctypes\nimport traceback\n\n\ndef is_admin(): [MASK]\n", "response": "import base64\nimport errno\nimport functools\nimport os\nimport platform\nimport queue\nimport re\nimport subprocess\nimport sys\nimport weakref\nfrom configparser import ConfigParser\nfrom configparser import NoOptionError\nfrom configparser import NoSectionError\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom operator import methodcaller\nfrom statistics import mean\nfrom urllib.error import HTTPError\nfrom urllib.error import URLError\nfrom urllib.parse import urlparse\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom xmlrpc.client import Fault\nfrom xmlrpc.client import ProtocolError\nfrom xmlrpc.client import Server\nfrom xmlrpc.client import ServerProxy\nfrom xmlrpc.client import Transport\nfrom xmlrpc.server import SimpleXMLRPCRequestHandler\nfrom xmlrpc.server import SimpleXMLRPCServer\nimport ctypes\nimport traceback\ndef is_admin():\n    \"\"\"\n    https://stackoverflow.com/a/19719292\n    @return: True if the current user is an 'Admin' whatever that\n    means (root on Unix), otherwise False.\n    Warning: The inner function fails unless you have Windows XP SP2 or\n    higher. The failure causes a traceback to be printed and this\n    function to return False.\n    \"\"\"\n    if os.name == 'nt':\n        import ctypes\n        import traceback\n        try:\n            return ctypes.windll.shell32.IsUserAnAdmin()\n        except Exception as e:\n            print(f'Admin check failed with error: {e}')\n            traceback.print_exc()\n            return False\n    else:\n        return os.getuid() == 0"}
{"result": "passed", "model_name": "std", "repository": "glances", "full_method_name": "string_value_to_float", "method_path": "../srcdata/System/glances/glances/globals.py", "method_code_mask": "import base64\nimport errno\nimport functools\nimport os\nimport platform\nimport queue\nimport re\nimport subprocess\nimport sys\nimport weakref\nfrom configparser import ConfigParser\nfrom configparser import NoOptionError\nfrom configparser import NoSectionError\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom operator import methodcaller\nfrom statistics import mean\nfrom urllib.error import HTTPError\nfrom urllib.error import URLError\nfrom urllib.parse import urlparse\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom xmlrpc.client import Fault\nfrom xmlrpc.client import ProtocolError\nfrom xmlrpc.client import Server\nfrom xmlrpc.client import ServerProxy\nfrom xmlrpc.client import Transport\nfrom xmlrpc.server import SimpleXMLRPCRequestHandler\nfrom xmlrpc.server import SimpleXMLRPCServer\nimport ctypes\nimport traceback\n\n\ndef string_value_to_float(s): [MASK]\n", "response": "import base64\nimport errno\nimport functools\nimport os\nimport platform\nimport queue\nimport re\nimport subprocess\nimport sys\nimport weakref\nfrom configparser import ConfigParser\nfrom configparser import NoOptionError\nfrom configparser import NoSectionError\nfrom datetime import datetime\nfrom operator import itemgetter\nfrom operator import methodcaller\nfrom statistics import mean\nfrom urllib.error import HTTPError\nfrom urllib.error import URLError\nfrom urllib.parse import urlparse\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom xmlrpc.client import Fault\nfrom xmlrpc.client import ProtocolError\nfrom xmlrpc.client import Server\nfrom xmlrpc.client import ServerProxy\nfrom xmlrpc.client import Transport\nfrom xmlrpc.server import SimpleXMLRPCRequestHandler\nfrom xmlrpc.server import SimpleXMLRPCServer\nimport ctypes\nimport traceback\ndef string_value_to_float(s):\n    \"\"\"Convert a string with a value and an unit to a float.\n    Example:\n    '12.5 MB' -> 12500000.0\n    '32.5 GB' -> 32500000000.0\n    Args:\n        s (string): Input string with value and unit\n    Output:\n        float: The value in float\n    \"\"\"\n    convert_dict = {None: 1, 'B': 1, 'KB': 1000, 'MB': 1000000, 'GB': \n        1000000000, 'TB': 1000000000000, 'PB': 1000000000000000}\n    unpack_string = [(i[0] if i[1] == '' else i[1].upper()) for i in re.\n        findall('([\\\\d.]+)|([^\\\\d.]+)', s.replace(' ', ''))]\n    if len(unpack_string) == 2:\n        value, unit = unpack_string\n    elif len(unpack_string) == 1:\n        value = unpack_string[0]\n        unit = None\n    else:\n        return None\n    try:\n        value = float(unpack_string[0])\n    except ValueError:\n        return None\n    return value * convert_dict[unit]"}

{"result": "passed", "model_name": "std", "repository": "xlwt", "full_method_name": "upack1", "method_path": "../srcdata/System/xlwt/xlwt/UnicodeUtils.py", "method_code_mask": "from __future__ import unicode_literals\nfrom struct import pack\nimport six\n\n\ndef upack1(s, encoding='ascii'): [MASK]\n", "response": "from __future__ import unicode_literals\nfrom struct import pack\nimport six\ndef upack1(s, encoding='ascii'):\n    if isinstance(s, six.text_type):\n        us = s\n    else:\n        us = s.decode(encoding)\n    len_us = len(us)\n    if len_us > 255:\n        raise Exception('String longer than 255 characters')\n    try:\n        encs = us.encode('latin1')\n        flag = 0\n        n_items = len_us\n    except UnicodeEncodeError:\n        encs = us.encode('utf_16_le')\n        flag = 1\n        n_items = len(encs) // 2\n    return pack('<BB', n_items, flag) + encs"}
{"result": "passed", "model_name": "std", "repository": "xlwt", "full_method_name": "upack2rt", "method_path": "../srcdata/System/xlwt/xlwt/UnicodeUtils.py", "method_code_mask": "from __future__ import unicode_literals\nfrom struct import pack\nimport six\n\n\ndef upack2rt(rt, encoding='ascii'): [MASK]\n", "response": "from __future__ import unicode_literals\nfrom struct import pack\nimport six\ndef upack2rt(rt, encoding='ascii'):\n    us = ''\n    fr = b''\n    offset = 0\n    for s, fontx in rt:\n        if not isinstance(s, six.text_type):\n            s = s.decode(encoding)\n        us += s\n        if fontx is not None:\n            fr += pack('<HH', offset, fontx)\n        offset += len(s.encode('utf_16_le')) // 2\n    num_fr = len(fr) // 4\n    if offset > 32767:\n        raise Exception('String longer than 32767 characters')\n    try:\n        encs = us.encode('latin1')\n        flag = 0 | 8\n        n_items = len(encs)\n    except UnicodeEncodeError:\n        encs = us.encode('utf_16_le')\n        flag = 1 | 8\n        n_items = len(encs) // 2\n    return pack('<HBH', n_items, flag, num_fr) + encs, fr"}
{"result": "passed", "model_name": "std", "repository": "xlwt", "full_method_name": "upack2", "method_path": "../srcdata/System/xlwt/xlwt/UnicodeUtils.py", "method_code_mask": "from __future__ import unicode_literals\nfrom struct import pack\nimport six\n\n\ndef upack2(s, encoding='ascii'): [MASK]\n", "response": "from __future__ import unicode_literals\nfrom struct import pack\nimport six\ndef upack2(s, encoding='ascii'):\n    if isinstance(s, six.text_type):\n        us = s\n    else:\n        us = s.decode(encoding)\n    len_us = len(us)\n    if len_us > 32767:\n        raise Exception('String longer than 32767 characters')\n    try:\n        encs = us.encode('latin1')\n        flag = 0\n        n_items = len_us\n    except UnicodeEncodeError:\n        encs = us.encode('utf_16_le')\n        flag = 1\n        n_items = len(encs) // 2\n    return pack('<HB', n_items, flag) + encs"}

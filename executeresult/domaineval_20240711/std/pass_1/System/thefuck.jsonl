{"result": "passed", "model_name": "std", "repository": "thefuck", "full_method_name": "_get_suggestions", "method_path": "../srcdata/System/thefuck/thefuck/rules/brew_install.py", "method_code_mask": "import re\n\n\ndef _get_suggestions(str): [MASK]\n", "response": "import re\ndef _get_suggestions(str):\n    suggestions = str.replace(' or ', ', ').split(', ')\n    return suggestions"}
{"result": "passed", "model_name": "std", "repository": "thefuck", "full_method_name": "get_closest", "method_path": "../srcdata/System/thefuck/thefuck/utils.py", "method_code_mask": "import atexit\nimport os\nimport pickle\nimport re\nimport shelve\nimport sys\nimport six\nfrom decorator import decorator\nfrom difflib import get_close_matches as difflib_get_close_matches\nfrom functools import wraps\nimport dbm\nfrom shutil import which\nfrom importlib.metadata import version\nimport pkg_resources\n\n\ndef get_closest(word, possibilities, cutoff=0.6, fallback_to_first=True): [MASK\n    ]\n", "response": "import atexit\nimport os\nimport pickle\nimport re\nimport shelve\nimport sys\nimport six\nfrom decorator import decorator\nfrom difflib import get_close_matches as difflib_get_close_matches\nfrom functools import wraps\nimport dbm\nfrom shutil import which\nfrom importlib.metadata import version\nimport pkg_resources\ndef get_closest(word, possibilities, cutoff=0.6, fallback_to_first=True):\n    \"\"\"Returns closest match or just first from possibilities.\"\"\"\n    possibilities = list(possibilities)\n    try:\n        return difflib_get_close_matches(word, possibilities, 1, cutoff)[0]\n    except IndexError:\n        if fallback_to_first:\n            return possibilities[0]"}

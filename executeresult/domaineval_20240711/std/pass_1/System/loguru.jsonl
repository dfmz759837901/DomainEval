{"result": "passed", "model_name": "std", "repository": "loguru", "full_method_name": "get_frame_fallback", "method_path": "../srcdata/System/loguru/loguru/_get_frame.py", "method_code_mask": "import sys\nfrom sys import exc_info\n\n\ndef get_frame_fallback(n): [MASK]\n", "response": "import sys\nfrom sys import exc_info\ndef get_frame_fallback(n):\n    try:\n        raise Exception\n    except Exception:\n        frame = exc_info()[2].tb_frame.f_back\n        for _ in range(n):\n            frame = frame.f_back\n        return frame"}
{"result": "passed", "model_name": "std", "repository": "loguru", "full_method_name": "should_colorize", "method_path": "../srcdata/System/loguru/loguru/_colorama.py", "method_code_mask": "import builtins\nimport os\nimport sys\nimport IPython\nfrom colorama.win32 import winapi_test\nfrom colorama import AnsiToWin32\n\n\ndef should_colorize(stream): [MASK]\n", "response": "import builtins\nimport os\nimport sys\nimport IPython\nfrom colorama.win32 import winapi_test\nfrom colorama import AnsiToWin32\ndef should_colorize(stream):\n    if stream is None:\n        return False\n    if getattr(builtins, '__IPYTHON__', False) and (stream is sys.stdout or\n        stream is sys.stderr):\n        try:\n            import ipykernel\n            import IPython\n            ipython = IPython.get_ipython()\n            is_jupyter_stream = isinstance(stream, ipykernel.iostream.OutStream\n                )\n            is_jupyter_shell = isinstance(ipython, ipykernel.zmqshell.\n                ZMQInteractiveShell)\n        except Exception:\n            pass\n        else:\n            if is_jupyter_stream and is_jupyter_shell:\n                return True\n    if stream is sys.__stdout__ or stream is sys.__stderr__:\n        if 'CI' in os.environ and any(ci in os.environ for ci in ['TRAVIS',\n            'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS']):\n            return True\n        if 'PYCHARM_HOSTED' in os.environ:\n            return True\n        if os.name == 'nt' and 'TERM' in os.environ:\n            return True\n    try:\n        return stream.isatty()\n    except Exception:\n        return False"}

{"result": "passed", "model_name": "std", "repository": "pycryptodome", "full_method_name": "der2pem", "method_path": "../srcdata/Cryptography/pycryptodome/lib/Crypto/SelfTest/PublicKey/test_import_RSA.py", "method_code_mask": "import os\nimport re\nimport errno\nimport warnings\nimport unittest\nfrom unittest import SkipTest\nfrom Crypto.PublicKey import RSA\nfrom Crypto.SelfTest.st_common import a2b_hex\nfrom Crypto.SelfTest.st_common import list_test_cases\nfrom Crypto.IO import PEM\nfrom Crypto.Util.py3compat import b\nfrom Crypto.Util.py3compat import tostr\nfrom Crypto.Util.py3compat import FileNotFoundError\nfrom Crypto.Util.number import inverse\nfrom Crypto.Util import asn1\nimport binascii\n\n\ndef der2pem(der, text='PUBLIC'): [MASK]\n", "response": "import os\nimport re\nimport errno\nimport warnings\nimport unittest\nfrom unittest import SkipTest\nfrom Crypto.PublicKey import RSA\nfrom Crypto.SelfTest.st_common import a2b_hex\nfrom Crypto.SelfTest.st_common import list_test_cases\nfrom Crypto.IO import PEM\nfrom Crypto.Util.py3compat import b\nfrom Crypto.Util.py3compat import tostr\nfrom Crypto.Util.py3compat import FileNotFoundError\nfrom Crypto.Util.number import inverse\nfrom Crypto.Util import asn1\nimport binascii\ndef der2pem(der, text='PUBLIC'):\n    import binascii\n    chunks = [binascii.b2a_base64(der[i:i + 48]) for i in range(0, len(der),\n        48)]\n    pem = b('-----BEGIN %s KEY-----\\n' % text)\n    pem += b('').join(chunks)\n    pem += b('-----END %s KEY-----' % text)\n    return pem"}
{"result": "passed", "model_name": "std", "repository": "pycryptodome", "full_method_name": "chunked", "method_path": "../srcdata/Cryptography/pycryptodome/lib/Crypto/SelfTest/Hash/test_KangarooTwelve.py", "method_code_mask": "import unittest\nfrom binascii import unhexlify\nfrom Crypto.SelfTest.st_common import list_test_cases\nfrom Crypto.Hash import KangarooTwelve as K12\nfrom Crypto.Util.py3compat import b\nfrom Crypto.Util.py3compat import bchr\n\n\ndef chunked(source, size): [MASK]\n", "response": "import unittest\nfrom binascii import unhexlify\nfrom Crypto.SelfTest.st_common import list_test_cases\nfrom Crypto.Hash import KangarooTwelve as K12\nfrom Crypto.Util.py3compat import b\nfrom Crypto.Util.py3compat import bchr\ndef chunked(source, size):\n    for i in range(0, len(source), size):\n        yield source[i:i + size]"}
{"result": "passed", "model_name": "std", "repository": "pycryptodome", "full_method_name": "txt2bin", "method_path": "../srcdata/Cryptography/pycryptodome/lib/Crypto/SelfTest/Hash/test_KangarooTwelve.py", "method_code_mask": "import unittest\nfrom binascii import unhexlify\nfrom Crypto.SelfTest.st_common import list_test_cases\nfrom Crypto.Hash import KangarooTwelve as K12\nfrom Crypto.Util.py3compat import b\nfrom Crypto.Util.py3compat import bchr\n\n\ndef txt2bin(txt): [MASK]\n", "response": "import unittest\nfrom binascii import unhexlify\nfrom Crypto.SelfTest.st_common import list_test_cases\nfrom Crypto.Hash import KangarooTwelve as K12\nfrom Crypto.Util.py3compat import b\nfrom Crypto.Util.py3compat import bchr\ndef txt2bin(txt):\n    clean = txt.replace(' ', '').replace('\\n', '').replace('\\r', '')\n    return unhexlify(clean)"}

{"result": "passed", "model_name": "std", "repository": "crypto-attacks", "full_method_name": "factorize", "method_path": "../srcdata/Cryptography/crypto-attacks/attacks/factorization/twin_primes.py", "method_code_mask": "from math import isqrt\n\n\ndef factorize(N): [MASK]\n", "response": "from math import isqrt\ndef factorize(N):\n    \"\"\"\n    Recovers the prime factors from a modulus if the factors are twin primes.\n    :param N: the modulus\n    :return: a tuple containing the prime factors, or None if there is no factorization\n    \"\"\"\n    p = isqrt(N + 1) - 1\n    q = isqrt(N + 1) + 1\n    return p, q if p * q == N else None"}
{"result": "passed", "model_name": "std", "repository": "crypto-attacks", "full_method_name": "attack", "method_path": "../srcdata/Cryptography/crypto-attacks/attacks/elgamal_encryption/nonce_reuse.py", "method_code_mask": "def attack(p, m, c1, c2, c1_, c2_): [MASK]\n", "response": "\ndef attack(p, m, c1, c2, c1_, c2_):\n    \"\"\"\n    Recovers a secret plaintext encrypted using the same nonce as a previous, known plaintext.\n    :param p: the prime used in the ElGamal scheme\n    :param m: the known plaintext\n    :param c1: the ciphertext of the known plaintext\n    :param c2: the ciphertext of the known plaintext\n    :param c1_: the ciphertext of the secret plaintext\n    :param c2_: the ciphertext of the secret plaintext\n    :return: the secret plaintext\n    \"\"\"\n    s = c2 * pow(m, -1, p) % p\n    m_ = c2_ * pow(s, -1, p) % p\n    return int(m_)"}
{"result": "passed", "model_name": "std", "repository": "crypto-attacks", "full_method_name": "attack", "method_path": "../srcdata/Cryptography/crypto-attacks/attacks/rsa/known_d.py", "method_code_mask": "from math import gcd\nfrom random import randrange\n\n\ndef attack(N, e, d): [MASK]\n", "response": "from math import gcd\nfrom random import randrange\ndef attack(N, e, d):\n    \"\"\"\n    Recovers the prime factors from a modulus if the public exponent and private exponent are known.\n    :param N: the modulus\n    :param e: the public exponent\n    :param d: the private exponent\n    :return: a tuple containing the prime factors\n    \"\"\"\n    k = e * d - 1\n    t = 0\n    while k % 2 ** t == 0:\n        t += 1\n    while True:\n        g = randrange(1, N)\n        for s in range(1, t + 1):\n            x = pow(g, k // 2 ** s, N)\n            p = gcd(x - 1, N)\n            if 1 < p < N and N % p == 0:\n                return p, N // p"}

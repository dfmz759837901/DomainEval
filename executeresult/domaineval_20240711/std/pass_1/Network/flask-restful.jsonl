{"result": "passed", "model_name": "std", "repository": "flask-restful", "full_method_name": "iso8601interval", "method_path": "../srcdata/Network/flask-restful/flask_restful/inputs.py", "method_code_mask": "from calendar import timegm\nfrom datetime import datetime\nfrom datetime import time\nfrom datetime import timedelta\nfrom email.utils import parsedate_tz\nfrom email.utils import mktime_tz\nimport re\nimport aniso8601\nimport pytz\n\n\ndef iso8601interval(value, argument='argument'): [MASK]\n", "response": "from calendar import timegm\nfrom datetime import datetime\nfrom datetime import time\nfrom datetime import timedelta\nfrom email.utils import parsedate_tz\nfrom email.utils import mktime_tz\nimport re\nimport aniso8601\nimport pytz\ndef iso8601interval(value, argument='argument'):\n    \"\"\"Parses ISO 8601-formatted datetime intervals into tuples of datetimes.\n\n    Accepts both a single date(time) or a full interval using either start/end\n    or start/duration notation, with the following behavior:\n\n    - Intervals are defined as inclusive start, exclusive end\n    - Single datetimes are translated into the interval spanning the\n      largest resolution not specified in the input value, up to the day.\n    - The smallest accepted resolution is 1 second.\n    - All timezones are accepted as values; returned datetimes are\n      localized to UTC. Naive inputs and date inputs will are assumed UTC.\n\n    Examples::\n\n        \"2013-01-01\" -> datetime(2013, 1, 1), datetime(2013, 1, 2)\n        \"2013-01-01T12\" -> datetime(2013, 1, 1, 12), datetime(2013, 1, 1, 13)\n        \"2013-01-01/2013-02-28\" -> datetime(2013, 1, 1), datetime(2013, 2, 28)\n        \"2013-01-01/P3D\" -> datetime(2013, 1, 1), datetime(2013, 1, 4)\n        \"2013-01-01T12:00/PT30M\" -> datetime(2013, 1, 1, 12), datetime(2013, 1, 1, 12, 30)\n        \"2013-01-01T06:00/2013-01-01T12:00\" -> datetime(2013, 1, 1, 6), datetime(2013, 1, 1, 12)\n\n    :param str value: The ISO8601 date time as a string\n    :return: Two UTC datetimes, the start and the end of the specified interval\n    :rtype: A tuple (datetime, datetime)\n    :raises: ValueError, if the interval is invalid.\n    \"\"\"\n    try:\n        start, end = _parse_interval(value)\n        if end is None:\n            end = _expand_datetime(start, value)\n        start, end = _normalize_interval(start, end, value)\n    except ValueError:\n        raise ValueError(\n            'Invalid {arg}: {value}. {arg} must be a valid ISO8601 date/time interval.'\n            .format(arg=argument, value=value))\n    return start, end"}
{"result": "passed", "model_name": "std", "repository": "flask-restful", "full_method_name": "url", "method_path": "../srcdata/Network/flask-restful/flask_restful/inputs.py", "method_code_mask": "from calendar import timegm\nfrom datetime import datetime\nfrom datetime import time\nfrom datetime import timedelta\nfrom email.utils import parsedate_tz\nfrom email.utils import mktime_tz\nimport re\nimport aniso8601\nimport pytz\n\n\ndef url(value): [MASK]\n", "response": "from calendar import timegm\nfrom datetime import datetime\nfrom datetime import time\nfrom datetime import timedelta\nfrom email.utils import parsedate_tz\nfrom email.utils import mktime_tz\nimport re\nimport aniso8601\nimport pytz\ndef url(value):\n    \"\"\"Validate a URL.\n\n    :param string value: The URL to validate\n    :returns: The URL if valid.\n    :raises: ValueError\n    \"\"\"\n    if not url_regex.search(value):\n        message = u'{0} is not a valid URL'.format(value)\n        if url_regex.search('http://' + value):\n            message += u'. Did you mean: http://{0}'.format(value)\n        raise ValueError(message)\n    return value"}
{"result": "passed", "model_name": "std", "repository": "flask-restful", "full_method_name": "to_marshallable_type", "method_path": "../srcdata/Network/flask-restful/flask_restful/fields.py", "method_code_mask": "from calendar import timegm\nfrom decimal import Decimal as MyDecimal\nfrom decimal import ROUND_HALF_EVEN\nfrom email.utils import formatdate\nimport six\nfrom urllib.parse import urlparse\nfrom urllib.parse import urlunparse\nfrom flask_restful import marshal\nfrom flask import url_for\nfrom flask import request\n\n\ndef to_marshallable_type(obj): [MASK]\n", "response": "from calendar import timegm\nfrom decimal import Decimal as MyDecimal\nfrom decimal import ROUND_HALF_EVEN\nfrom email.utils import formatdate\nimport six\nfrom urllib.parse import urlparse\nfrom urllib.parse import urlunparse\nfrom flask_restful import marshal\nfrom flask import url_for\nfrom flask import request\ndef to_marshallable_type(obj):\n    \"\"\"Helper for converting an object to a dictionary only if it is not\n    dictionary already or an indexable object nor a simple type\"\"\"\n    if obj is None:\n        return None\n    if hasattr(obj, '__marshallable__'):\n        return obj.__marshallable__()\n    if hasattr(obj, '__getitem__'):\n        return obj\n    return dict(obj.__dict__)"}
{"result": "passed", "model_name": "std", "repository": "flask-restful", "full_method_name": "get_value", "method_path": "../srcdata/Network/flask-restful/flask_restful/fields.py", "method_code_mask": "from calendar import timegm\nfrom decimal import Decimal as MyDecimal\nfrom decimal import ROUND_HALF_EVEN\nfrom email.utils import formatdate\nimport six\nfrom urllib.parse import urlparse\nfrom urllib.parse import urlunparse\nfrom flask_restful import marshal\nfrom flask import url_for\nfrom flask import request\n\n\ndef is_indexable_but_not_string(obj):\n    return not hasattr(obj, 'strip') and hasattr(obj, '__iter__')\n\n\ndef _get_value_for_key(key, obj, default):\n    if is_indexable_but_not_string(obj):\n        try:\n            return obj[key]\n        except (IndexError, TypeError, KeyError):\n            pass\n    return getattr(obj, key, default)\n\n\ndef _get_value_for_keys(keys, obj, default):\n    if len(keys) == 1:\n        return _get_value_for_key(keys[0], obj, default)\n    else:\n        return _get_value_for_keys(keys[1:], _get_value_for_key(keys[0],\n            obj, default), default)\n\n\ndef get_value(key, obj, default=None): [MASK]\n", "response": "from calendar import timegm\nfrom decimal import Decimal as MyDecimal\nfrom decimal import ROUND_HALF_EVEN\nfrom email.utils import formatdate\nimport six\nfrom urllib.parse import urlparse\nfrom urllib.parse import urlunparse\nfrom flask_restful import marshal\nfrom flask import url_for\nfrom flask import request\ndef is_indexable_but_not_string(obj):\n    return not hasattr(obj, 'strip') and hasattr(obj, '__iter__')\ndef _get_value_for_key(key, obj, default):\n    if is_indexable_but_not_string(obj):\n        try:\n            return obj[key]\n        except (IndexError, TypeError, KeyError):\n            pass\n    return getattr(obj, key, default)\ndef _get_value_for_keys(keys, obj, default):\n    if len(keys) == 1:\n        return _get_value_for_key(keys[0], obj, default)\n    else:\n        return _get_value_for_keys(keys[1:], _get_value_for_key(keys[0],\n            obj, default), default)\ndef get_value(key, obj, default=None):\n    \"\"\"Helper for pulling a keyed value off various types of objects\"\"\"\n    if isinstance(key, int):\n        return _get_value_for_key(key, obj, default)\n    elif callable(key):\n        return key(obj)\n    else:\n        return _get_value_for_keys(key.split('.'), obj, default)"}

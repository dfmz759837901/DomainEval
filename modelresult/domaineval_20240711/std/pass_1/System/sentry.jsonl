{"model_name": "std", "repository": "sentry", "full_method_name": "color", "method_path": "../srcdata/System/sentry/tools/docker_memory_check.py", "response": "from __future__ import annotations\nimport argparse\nimport json\nimport os.path\nimport sys\nfrom collections.abc import Sequence\ndef color(s: str, color: str, *, use_color: bool) ->str:\n    if use_color:\n        return f'{color}{s}\\x1b[m'\n    else:\n        return s", "test_code_list": [{"test_code": "import os\nfrom unittest import mock\nimport pytest\ndef test_color_using_color():\n    ret = color('hello hello', '\\x1b[33m', use_color=True)\n    assert ret == '\\x1b[33mhello hello\\x1b[m'\n\ntest_color_using_color()\n", "code_start": "", "test_path": "../srcdata/System/sentry/tests/tools/test_docker_memory_check.py"}, {"test_code": "import os\nfrom unittest import mock\nimport pytest\ndef test_color_not_using_color():\n    ret = color('hello hello', '\\x1b[33m', use_color=False)\n    assert ret == 'hello hello'\n\ntest_color_not_using_color()\n", "code_start": "", "test_path": "../srcdata/System/sentry/tests/tools/test_docker_memory_check.py"}], "method_code_mask": "from __future__ import annotations\nimport argparse\nimport json\nimport os.path\nimport sys\nfrom collections.abc import Sequence\n\n\ndef color(s: str, color: str, *, use_color: bool) ->str: [MASK]\n"}
{"model_name": "std", "repository": "sentry", "full_method_name": "_glob_to_re", "method_path": "../srcdata/System/sentry/tools/mypy_helpers/check_stronglist.py", "response": "import argparse\nimport glob\nimport os.path\nimport re\nfrom collections.abc import Sequence\ndef _glob_to_re(s: str) ->str:\n    if s.endswith('.*'):\n        pat = f\"{re.escape(s.removesuffix('.*'))}(?:|\\\\..*+)\"\n    else:\n        pat = re.escape(s)\n    return f'^{pat}$'", "test_code_list": [{"test_code": "import re\ndef test_glob_to_re_exact_matches():\n    pat = re.compile(_glob_to_re('a.b.c'))\n    assert pat.fullmatch('a.b.c')\n    assert not pat.fullmatch('a.b.c.d')\n    assert not pat.fullmatch('a_b_c')\n\ntest_glob_to_re_exact_matches()\n", "code_start": "", "test_path": "../srcdata/System/sentry/tests/tools/mypy_helpers/test_check_stronglist.py"}], "method_code_mask": "import argparse\nimport glob\nimport os.path\nimport re\nfrom collections.abc import Sequence\n\n\ndef _glob_to_re(s: str) ->str: [MASK]\n"}

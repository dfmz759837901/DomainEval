{"model_name": "std", "repository": "anaconda", "full_method_name": "check_ip_address", "method_path": "../srcdata/System/anaconda/pyanaconda/network.py", "response": "import shutil\nimport socket\nimport itertools\nimport os\nimport time\nimport threading\nimport re\nimport ipaddress\ndef check_ip_address(address, version=None):\n    \"\"\"Check if the given IP address is valid in given version if set.\n\n    :param str address: IP address for testing\n    :param int version: ``4`` for IPv4, ``6`` for IPv6 or\n                        ``None`` to allow either format\n    :returns: ``True`` if IP address is valid or ``False`` if not\n    :rtype: bool\n    \"\"\"\n    try:\n        if version == 4:\n            ipaddress.IPv4Address(address)\n        elif version == 6:\n            ipaddress.IPv6Address(address)\n        elif not version:\n            ipaddress.ip_address(address)\n        else:\n            log.error('IP version %s is not supported', version)\n            return False\n        return True\n    except ValueError:\n        return False", "test_code_list": [{"test_code": "import unittest\n\nclass NetworkTests(unittest.TestCase):\n    def test_nm_check_ip_address(self):\n        \"\"\"Test IPv4 and IPv6 address checks.\"\"\"\n        good_IPv4_tests = ['1.2.3.4', '0.0.0.0', '10.20.30.40',\n            '255.255.255.255', '249.249.249.249']\n        good_IPv6_tests = ['0000:0000:0000:0000:0000:0000:0000:0000',\n            '0000:0000:0000:0000:0000:0000:1.2.3.4', '::a:b:c:d:e:f:1',\n            '::a:b:c:d:e:255.255.255.255', '1::a:b:c:d:e:f',\n            '1::a:b:c:d:255.255.255.255', '1:12::a:b:c:d:e',\n            '1:12::a:b:c:10.20.30.40', '12::a:b:c:d:e', '12::a:b:c:10.20.30.40',\n            '1:12:123::a:b:c:d', '1:12:123::a:b:100.200.250.249',\n            '12:123::a:b:c:d', '12:123::a:b:100.200.250.249', '123::a:b:c:d',\n            '123::a:b:100.200.250.249', '::a:b:c:d', '::a:b:100.200.250.249',\n            '1:12:123:1234::a:b:c', '1:12:123:1234::a:1.20.30.99',\n            '12:123:1234::a:b:c', '12:123:1234::a:1.20.30.99',\n            '123:1234::a:b:c', '123:1234::a:1.20.30.99', '1234::a:b:c',\n            '1234::a:1.20.30.99', '::a:b:c', '::a:1.20.30.99',\n            '1:12:123:1234:abcd::a:b', '1:12:123:1234:abcd::0.0.0.0',\n            '12:123:1234:abcd::a:b', '12:123:1234:abcd::0.0.0.0',\n            '123:1234:abcd::a:b', '123:1234:abcd::0.0.0.0', '1234:abcd::a:b',\n            '1234:abcd::0.0.0.0', 'abcd::a:b', 'abcd::0.0.0.0', '::a:b',\n            '::0.0.0.0', '1:12:123:1234:dead:beef::aaaa',\n            '12:123:1234:dead:beef::aaaa', '123:1234:dead:beef::aaaa',\n            '1234:dead:beef::aaaa', 'dead:beef::aaaa', 'beef::aaaa', '::aaaa', '::'\n            ]\n        bad_IPv4_tests = ['1.2.3.', '1.2.3', '256.2.3.4', 'a.b.c.d',\n            '1.2.3.400....', '1..2.3']\n        bad_IPv6_tests = [\n            '0000:0000:0000:0000:0000:0000:0000:0000:00000000:0000:0000:0000:0000:0000:0000:1.2.3.4'\n            , '0000:0000:0000:0000:0000:0000:1.2.3.4.5',\n            '0000:0000:0000:0000:0000:0000:0000',\n            '0000:0000:0000:0000:0000:1.2.3.4',\n            '0000::0000:0000:0000:0000:0000:1.2.3.4',\n            '0000:0000::0000:0000:0000:0000:1.2.3.4',\n            '0000:0000:0000::0000:0000:0000:1.2.3.4',\n            '0000:0000:0000:0000::0000:0000:1.2.3.4',\n            '0000:0000:0000:0000:0000::0000:1.2.3.4',\n            '0000:0000:0000:0000:0000:0000::1.2.3.4',\n            '123::4567:89:a:bcde:f0f0:aaaa:8',\n            '123:4567::89:a:bcde:f0f0:aaaa:8',\n            '123:4567:89::a:bcde:f0f0:aaaa:8',\n            '123:4567:89:a:bcde::f0f0:aaaa:8',\n            '123:4567:89:a:bcde:f0f0::aaaa:8',\n            '123:4567:89:a:bcde:f0f0:aaaa::8', 'a::b::c', '::a::b', 'a::b::',\n            '00000::0000', 'defg::', '12345::abcd', 'ffff::0x1e']\n        for i in good_IPv4_tests:\n            assert check_ip_address(i, version=4)\n            assert check_ip_address(i)\n            assert not check_ip_address(i, version=6)\n        for i in bad_IPv4_tests:\n            assert not check_ip_address(i)\n            assert not check_ip_address(i, version=4)\n            assert not check_ip_address(i, version=6)\n        for i in good_IPv6_tests:\n            assert check_ip_address(i, version=6)\n            assert check_ip_address(i)\n            assert not check_ip_address(i, version=4)\n        for i in bad_IPv6_tests:\n            assert not check_ip_address(i)\n            assert not check_ip_address(i, version=6)\n            assert not check_ip_address(i, version=4)\n    \nNetworkTests().test_nm_check_ip_address()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/test_network.py"}], "method_code_mask": "import shutil\nimport socket\nimport itertools\nimport os\nimport time\nimport threading\nimport re\nimport ipaddress\n\n\ndef check_ip_address(address, version=None): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "join_layout_variant", "method_path": "../srcdata/System/anaconda/pyanaconda/keyboard.py", "response": "import re\ndef join_layout_variant(layout, variant=''):\n    \"\"\"\n    Join layout and variant to form the commonly used 'layout (variant)'\n    or 'layout' (if variant is missing) format.\n\n    :type layout: string\n    :type variant: string\n    :return: 'layout (variant)' or 'layout' string\n    :rtype: string\n\n    \"\"\"\n    if variant:\n        return '%s (%s)' % (layout, variant)\n    else:\n        return layout", "test_code_list": [{"test_code": "import unittest\nimport pytest\nfrom unittest.mock import patch\n\nclass ParsingAndJoiningTests(unittest.TestCase):\n    def test_layout_variant_joining(self):\n        \"\"\"Should correctly join keyboard layout and variant to a string spec.\"\"\"\n        assert join_layout_variant('cz', 'qwerty') == 'cz (qwerty)'\n        assert join_layout_variant('cz') == 'cz'\n    \nParsingAndJoiningTests().test_layout_variant_joining()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/test_keyboard.py"}], "method_code_mask": "import re\n\n\ndef join_layout_variant(layout, variant=''): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "normalize_layout_variant", "method_path": "../srcdata/System/anaconda/pyanaconda/keyboard.py", "response": "import re\ndef join_layout_variant(layout, variant=''):\n    \"\"\"\n    Join layout and variant to form the commonly used 'layout (variant)'\n    or 'layout' (if variant is missing) format.\n\n    :type layout: string\n    :type variant: string\n    :return: 'layout (variant)' or 'layout' string\n    :rtype: string\n\n    \"\"\"\n    if variant:\n        return '%s (%s)' % (layout, variant)\n    else:\n        return layout\nLAYOUT_VARIANT_RE = re.compile(\n    '^\\\\s*([/\\\\w]+)\\\\s*(?:(?:\\\\(\\\\s*([-\\\\w]+)\\\\s*\\\\))|(?:$))\\\\s*')\ndef parse_layout_variant(layout_variant_str):\n    \"\"\"\n    Parse layout and variant from the string that may look like 'layout' or\n    'layout (variant)'.\n    :param layout_variant_str: keyboard layout and variant string specification\n    :type layout_variant_str: str\n    :return: the (layout, variant) pair, where variant can be \"\"\n    :rtype: tuple\n    :raise InvalidLayoutVariantSpec: if the given string isn't a valid layout\n                                     and variant specification string\n    \"\"\"\n    match = LAYOUT_VARIANT_RE.match(layout_variant_str)\n    if not match:\n        msg = (\n            \"'%s' is not a valid keyboard layout and variant specification\" %\n            layout_variant_str)\n        raise InvalidLayoutVariantSpec(msg)\n    layout, variant = match.groups()\n    return layout, variant or ''\ndef normalize_layout_variant(layout_str):\n    \"\"\"\n    Normalize keyboard layout and variant specification given as a single\n    string. E.g. for a 'layout(variant) string missing the space between the\n    left parenthesis return 'layout (variant)' which is a proper layout and\n    variant specification we use.\n    :param layout_str: a string specifying keyboard layout and its variant\n    :type layout_str: string\n    \"\"\"\n    layout, variant = parse_layout_variant(layout_str)\n    return join_layout_variant(layout, variant)", "test_code_list": [{"test_code": "import unittest\nimport pytest\nfrom unittest.mock import patch\n\nclass ParsingAndJoiningTests(unittest.TestCase):\n    def test_layout_variant_normalize(self):\n        \"\"\"Normalizing layout and variant strings should work as expected.\"\"\"\n        assert normalize_layout_variant('cz (qwerty)') == 'cz (qwerty)'\n        assert normalize_layout_variant('cz') == 'cz'\n        assert normalize_layout_variant('cz(qwerty)') == 'cz (qwerty)'\n        assert normalize_layout_variant('cz ( qwerty )') == 'cz (qwerty)'\n        assert normalize_layout_variant('cz ') == 'cz'\n    \nParsingAndJoiningTests().test_layout_variant_normalize()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/test_keyboard.py"}], "method_code_mask": "import re\n\n\ndef join_layout_variant(layout, variant=''):\n    \"\"\"\n    Join layout and variant to form the commonly used 'layout (variant)'\n    or 'layout' (if variant is missing) format.\n\n    :type layout: string\n    :type variant: string\n    :return: 'layout (variant)' or 'layout' string\n    :rtype: string\n\n    \"\"\"\n    if variant:\n        return '%s (%s)' % (layout, variant)\n    else:\n        return layout\n\n\nLAYOUT_VARIANT_RE = re.compile(\n    '^\\\\s*([/\\\\w]+)\\\\s*(?:(?:\\\\(\\\\s*([-\\\\w]+)\\\\s*\\\\))|(?:$))\\\\s*')\n\n\ndef parse_layout_variant(layout_variant_str):\n    \"\"\"\n    Parse layout and variant from the string that may look like 'layout' or\n    'layout (variant)'.\n    :param layout_variant_str: keyboard layout and variant string specification\n    :type layout_variant_str: str\n    :return: the (layout, variant) pair, where variant can be \"\"\n    :rtype: tuple\n    :raise InvalidLayoutVariantSpec: if the given string isn't a valid layout\n                                     and variant specification string\n    \"\"\"\n    match = LAYOUT_VARIANT_RE.match(layout_variant_str)\n    if not match:\n        msg = (\n            \"'%s' is not a valid keyboard layout and variant specification\" %\n            layout_variant_str)\n        raise InvalidLayoutVariantSpec(msg)\n    layout, variant = match.groups()\n    return layout, variant or ''\n\n\ndef normalize_layout_variant(layout_str): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "parse_nfs_url", "method_path": "../srcdata/System/anaconda/pyanaconda/core/payload.py", "response": "from collections import namedtuple\nfrom functools import cmp_to_key\nfrom urllib.parse import quote\nfrom urllib.parse import unquote\nNFSUrl = namedtuple('NFSUrl', ['options', 'host', 'path'])\ndef parse_nfs_url(nfs_url):\n    \"\"\"Parse NFS URL into components.\n    :param str nfs_url: a URL with the nfs: or nfs:// prefix\n    :return NFSUrl: a tuple with options, host and path\n    \"\"\"\n    host, path, options = '', '', ''\n    if nfs_url.startswith('nfs://'):\n        args = nfs_url.removeprefix('nfs://').split(':')\n        if len(args) >= 2:\n            host, path = args[:2]\n        elif len(args) >= 1:\n            host = args[0]\n    elif nfs_url.startswith('nfs:'):\n        args = nfs_url.removeprefix('nfs:').split(':')\n        if len(args) >= 3:\n            options, host, path = args[:3]\n        elif len(args) >= 2:\n            host, path = args[:2]\n        elif len(args) >= 1:\n            host = args[0]\n    return NFSUrl(options=options, host=host, path=path)", "test_code_list": [{"test_code": "import unittest\nfrom functools import partial\nimport pytest\n\nclass PayloadUtilsTests(unittest.TestCase):\n    def test_parse_nfs_url(self):\n        \"\"\"Test parseNfsUrl.\"\"\"\n        assert parse_nfs_url('') == ('', '', '')\n        assert parse_nfs_url('nfs:options:host:path') == ('options',\n            'host', 'path')\n        assert parse_nfs_url('nfs:options:host:path:foo:bar') == ('options',\n            'host', 'path')\n        assert parse_nfs_url('nfs://host:path') == ('', 'host', 'path')\n        assert parse_nfs_url('nfs:host:path') == ('', 'host', 'path')\n        assert parse_nfs_url('nfs://host') == ('', 'host', '')\n        assert parse_nfs_url('nfs:host') == ('', 'host', '')\n    \nPayloadUtilsTests().test_parse_nfs_url()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/test_payload.py"}], "method_code_mask": "from collections import namedtuple\nfrom functools import cmp_to_key\nfrom urllib.parse import quote\nfrom urllib.parse import unquote\nNFSUrl = namedtuple('NFSUrl', ['options', 'host', 'path'])\n\n\ndef parse_nfs_url(nfs_url): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "create_nfs_url", "method_path": "../srcdata/System/anaconda/pyanaconda/core/payload.py", "response": "from collections import namedtuple\nfrom functools import cmp_to_key\nfrom urllib.parse import quote\nfrom urllib.parse import unquote\ndef create_nfs_url(host, path, options=None):\n    \"\"\"Compose NFS url from components.\n\n    :param str host: NFS server\n    :param str path: path on the NFS server to the shared folder\n    :param options: NFS mount options\n    :type options: str or None if not set\n    :return: NFS url created from the components given\n    :rtype: str\n    \"\"\"\n    if not host:\n        return ''\n    if options:\n        return ':'.join(['nfs', options, host, path])\n    elif path:\n        return ':'.join(['nfs', host, path])\n    else:\n        return ':'.join(['nfs', host])", "test_code_list": [{"test_code": "import unittest\nfrom functools import partial\nimport pytest\n\nclass PayloadUtilsTests(unittest.TestCase):\n    def test_create_nfs_url(self):\n        \"\"\"Test create_nfs_url.\"\"\"\n        assert create_nfs_url('', '') == ''\n        assert create_nfs_url('', '', None) == ''\n        assert create_nfs_url('', '', '') == ''\n        assert create_nfs_url('host', '') == 'nfs:host'\n        assert create_nfs_url('host', '', 'options') == 'nfs:options:host:'\n        assert create_nfs_url('host', 'path') == 'nfs:host:path'\n        assert create_nfs_url('host', '/path', 'options'\n            ) == 'nfs:options:host:/path'\n        assert create_nfs_url('host', '/path/to/something'\n            ) == 'nfs:host:/path/to/something'\n        assert create_nfs_url('host', '/path/to/something', 'options'\n            ) == 'nfs:options:host:/path/to/something'\n    \nPayloadUtilsTests().test_create_nfs_url()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/test_payload.py"}], "method_code_mask": "from collections import namedtuple\nfrom functools import cmp_to_key\nfrom urllib.parse import quote\nfrom urllib.parse import unquote\n\n\ndef create_nfs_url(host, path, options=None): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "split_protocol", "method_path": "../srcdata/System/anaconda/pyanaconda/core/payload.py", "response": "from collections import namedtuple\nfrom functools import cmp_to_key\nfrom urllib.parse import quote\nfrom urllib.parse import unquote\ndef split_protocol(url):\n    \"\"\"Split protocol from url\n\n    The function will look for ://.\n\n    - If found more than once in the url then raising an error.\n    - If found exactly once it will return tuple with [protocol, rest_of_url].\n    - If an empty string is given it will return tuple with empty strings (\"\", \"\").\n\n    :param str url: base url we want to split protocol from\n    :return: tuple of (protocol, rest of url)\n    :raise: ValueError if url is invalid\n    \"\"\"\n    ret = url.split('://')\n    if len(ret) > 2:\n        raise ValueError(\"Invalid url to split protocol '{}'\".format(url))\n    if len(ret) == 2:\n        return ret[0] + '://', ret[1]\n    if len(ret) == 1:\n        return '', ret[0]\n    return '', ''", "test_code_list": [{"test_code": "import unittest\nfrom functools import partial\nimport pytest\n\nclass PayloadUtilsTests(unittest.TestCase):\n    def test_split_protocol(self):\n        \"\"\"Test split protocol test.\"\"\"\n        assert split_protocol('http://abc/cde') == ('http://', 'abc/cde')\n        assert split_protocol('https://yay/yay') == ('https://', 'yay/yay')\n        assert split_protocol('ftp://ups/spu') == ('ftp://', 'ups/spu')\n        assert split_protocol('file:///test/file') == ('file://', '/test/file'\n            )\n        assert split_protocol('nfs:ups/spu:/abc:opts') == ('',\n            'nfs:ups/spu:/abc:opts')\n        assert split_protocol('http:/typo/test') == ('', 'http:/typo/test')\n        assert split_protocol('') == ('', '')\n        with pytest.raises(ValueError):\n            split_protocol('http://ftp://ups/this/is/not/correct')\n    \nPayloadUtilsTests().test_split_protocol()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/test_payload.py"}], "method_code_mask": "from collections import namedtuple\nfrom functools import cmp_to_key\nfrom urllib.parse import quote\nfrom urllib.parse import unquote\n\n\ndef split_protocol(url): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "create_hdd_url", "method_path": "../srcdata/System/anaconda/pyanaconda/core/payload.py", "response": "from collections import namedtuple\nfrom functools import cmp_to_key\nfrom urllib.parse import quote\nfrom urllib.parse import unquote\ndef create_hdd_url(device, path=None):\n    \"\"\"Compose the HDD URL from components.\n\n    :param str device: a device spec\n    :param str path: a path or None\n    \"\"\"\n    if not device:\n        return ''\n    if path:\n        return ':'.join(['hd', device, path])\n    else:\n        return ':'.join(['hd', device])", "test_code_list": [{"test_code": "import unittest\nfrom functools import partial\nimport pytest\n\nclass PayloadUtilsTests(unittest.TestCase):\n    def test_create_hdd_url(self):\n        \"\"\"Test the create_hdd_url function.\"\"\"\n        assert create_hdd_url('') == ''\n        assert create_hdd_url('', '') == ''\n        assert create_hdd_url('test') == 'hd:test'\n        assert create_hdd_url('/dev/test') == 'hd:/dev/test'\n        assert create_hdd_url('/dev/test', 'relative') == 'hd:/dev/test:relative'\n        assert create_hdd_url('/dev/test', '/absolute') == 'hd:/dev/test:/absolute'\n        assert create_hdd_url('/dev/test', 'relative/path'\n            ) == 'hd:/dev/test:relative/path'\n        assert create_hdd_url('/dev/test', '/absolute/path'\n            ) == 'hd:/dev/test:/absolute/path'\n    \nPayloadUtilsTests().test_create_hdd_url()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/test_payload.py"}], "method_code_mask": "from collections import namedtuple\nfrom functools import cmp_to_key\nfrom urllib.parse import quote\nfrom urllib.parse import unquote\n\n\ndef create_hdd_url(device, path=None): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "get_unique_repo_name", "method_path": "../srcdata/System/anaconda/pyanaconda/ui/gui/spokes/lib/installation_source_helpers.py", "response": "import os\nimport re\nimport signal\nfrom functools import partial\ndef get_unique_repo_name(existing_names=None):\n    \"\"\"Return a unique repo name.\n\n    The returned name will be 1 greater than any other entry in the store\n    with a _%d at the end of it.\n\n    :param [str] existing_names: a list of existing names\n    :returns: a unique repo name\n    \"\"\"\n    existing_names = existing_names or []\n    name = 'New_Repository'\n    if name not in existing_names:\n        return name\n    match = re.match('(.*)_\\\\d+$', name)\n    if match:\n        name = match.group(1)\n    name_re = re.compile('(' + re.escape(name) + ')_(\\\\d+)')\n    matches = tuple(map(name_re.match, existing_names))\n    matches = [int(m.group(2)) for m in matches if m is not None]\n    highest_index = max(matches) if matches else 0\n    return name + '_%d' % (highest_index + 1)", "test_code_list": [{"test_code": "import unittest\nfrom textwrap import dedent\n\nclass InstallationSourceUtilsTestCase(unittest.TestCase):\n    def test_get_unique_repo_name(self):\n        \"\"\"Test the get_unique_repo_name function.\"\"\"\n        assert 'New_Repository' == get_unique_repo_name()\n        assert 'New_Repository' == get_unique_repo_name(['New_Repository_1'])\n        assert 'New_Repository' == get_unique_repo_name(['New_Repository_1',\n            'New_Repository_2'])\n        assert 'New_Repository_1' == get_unique_repo_name(['New_Repository'])\n        assert 'New_Repository_2' == get_unique_repo_name(['New_Repository',\n            'New_Repository_1'])\n        assert 'New_Repository_3' == get_unique_repo_name(['New_Repository',\n            'New_Repository_1', 'New_Repository_2'])\n        assert 'New_Repository_4' == get_unique_repo_name(['New_Repository',\n            'New_Repository_3'])\n    \nInstallationSourceUtilsTestCase().test_get_unique_repo_name()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/ui/test_ui_source_spoke.py"}], "method_code_mask": "import os\nimport re\nimport signal\nfrom functools import partial\n\n\ndef get_unique_repo_name(existing_names=None): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "is_tar", "method_path": "../srcdata/System/anaconda/pyanaconda/modules/payloads/source/utils.py", "response": "import os\nimport os.path\nimport stat\ndef is_tar(url):\n    \"\"\"Is the given URL a path to the tarball?\n\n    :param url: a string with URL\n    :return: True or False\n    \"\"\"\n    if not url:\n        return False\n    tar_suffixes = ('.tar', '.tbz', '.tgz', '.txz', '.tar.bz2', '.tar.gz',\n        '.tar.xz')\n    return any(url.endswith(s) for s in tar_suffixes)", "test_code_list": [{"test_code": "from io import StringIO\nimport unittest\nfrom unittest.mock import patch\n\nclass SourceUtilsTestCase(unittest.TestCase):\n    def test_is_tar(self):\n        \"\"\"Test the is_tar function.\"\"\"\n        assert not is_tar(None)\n        assert not is_tar('')\n        assert not is_tar('/my/path')\n        assert not is_tar('file://my/path.')\n        assert not is_tar('http://my/path.img')\n        assert not is_tar('https://my/path.tarball')\n        assert not is_tar('/my/tar')\n        assert not is_tar('file://my/tbz')\n        assert not is_tar('http://my/tgz')\n        assert not is_tar('https://my/txz')\n        assert not is_tar('/my/tar.bz2')\n        assert not is_tar('file://my/tar.gz')\n        assert not is_tar('http://my/tar.xz')\n        assert is_tar('/my/path.tar')\n        assert is_tar('file://my/path.tbz')\n        assert is_tar('http://my/path.tgz')\n        assert is_tar('https://my/path.txz')\n        assert is_tar('/my/path.tar.bz2')\n        assert is_tar('file://my/path.tar.gz')\n        assert is_tar('http://my/path.tar.xz')\n    \nSourceUtilsTestCase().test_is_tar()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/modules/payloads/source/test_source_utils.py"}], "method_code_mask": "import os\nimport os.path\nimport stat\n\n\ndef is_tar(url): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "_match_field", "method_path": "../srcdata/System/anaconda/pyanaconda/modules/subscription/system_purpose.py", "response": "import os\nimport json\ndef _normalize_field(raw_field):\n    \"\"\"Normalize a field for matching.\n\n    Fields specified in free form by users can have different case or trailing white space,\n    while still technically being a match on a valid field.\n\n    So convert the field to lower case and strip any trailing white space and return the result.\n\n    :param str raw_field: raw not normalized field\n    :return: normalized field suitable for matching\n    :rtype: str\n    \"\"\"\n    return raw_field.strip().lower()\ndef _match_field(raw_field, valid_fields):\n    \"\"\"Try to match the field on an item in a list of fields.\n    If a match is found return the first matching item from the list.\n    If no match is found, return None.\n    :param raw_field str: field to match\n    :param list valid_fields: list of valid fields to match against\n    :return: a matching valid field or None if no match is found\n    :rtype: str or None\n    \"\"\"\n    matching_valid_field = None\n    normalized_field = _normalize_field(raw_field)\n    for valid_field in valid_fields:\n        if normalized_field == _normalize_field(valid_field):\n            matching_valid_field = valid_field\n            break\n    return matching_valid_field", "test_code_list": [{"test_code": "import os\nimport unittest\nfrom unittest.mock import Mock\nimport tempfile\n\nclass SystemPurposeLibraryTestCase(unittest.TestCase):\n    def test_match_field(self):\n        \"\"\"Test that the system purpose valid field matching works.\"\"\"\n        assert _match_field('production', ['Production', 'Development', 'Testing']\n            ) == 'Production'\n        assert _match_field('Production', ['Production', 'Development', 'Testing']\n            ) == 'Production'\n        assert _match_field('DEVELOPMENT', ['Production', 'Development', 'Testing']\n            ) == 'Development'\n        assert _match_field('custom', ['Production', 'Development', 'Testing']\n            ) is None\n        assert _match_field('Prod', ['Production', 'Development', 'Testing']\n            ) is None\n        assert _match_field('Production 1', ['Production', 'Development',\n            'Testing']) is None\n        assert _match_field('Production Development', ['Production',\n            'Development', 'Testing']) is None\n    \nSystemPurposeLibraryTestCase().test_match_field()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/modules/subscription/test_system_purpose.py"}], "method_code_mask": "import os\nimport json\n\n\ndef _normalize_field(raw_field):\n    \"\"\"Normalize a field for matching.\n\n    Fields specified in free form by users can have different case or trailing white space,\n    while still technically being a match on a valid field.\n\n    So convert the field to lower case and strip any trailing white space and return the result.\n\n    :param str raw_field: raw not normalized field\n    :return: normalized field suitable for matching\n    :rtype: str\n    \"\"\"\n    return raw_field.strip().lower()\n\n\ndef _match_field(raw_field, valid_fields): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "trim_product_version_for_ui", "method_path": "../srcdata/System/anaconda/pyanaconda/core/product.py", "response": "import os\nimport configparser\nfrom functools import cache\nfrom collections import namedtuple\ndef trim_product_version_for_ui(version):\n    \"\"\"Trim off parts of version that should not be displayed in UI.\n\n    Example: 8.0.1 -> 8.0\n\n    :param str version: Version as read from the system\n    :return str: Shortened version\n    \"\"\"\n    if version.count('.') >= 2:\n        version = '.'.join(version.split('.')[:2])\n    if version == 'development':\n        version = 'rawhide'\n    return version", "test_code_list": [{"test_code": "from textwrap import dedent\nimport unittest\nfrom unittest.mock import patch\nfrom unittest.mock import mock_open\n\nclass ProductHelperTestCase(unittest.TestCase):\n    def test_trim_product_version_for_ui(self):\n        \"\"\"Test version shortening.\"\"\"\n        trimmed_versions = [('8.0.0', '8.0'), ('rawhide', 'rawhide'), (\n            'development', 'rawhide'), ('7.6', '7.6'), ('7', '7'), ('8.0.0.1',\n            '8.0')]\n        for original, trimmed in trimmed_versions:\n            assert trimmed == trim_product_version_for_ui(original)\n    \nProductHelperTestCase().test_trim_product_version_for_ui()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_product.py"}], "method_code_mask": "import os\nimport configparser\nfrom functools import cache\nfrom collections import namedtuple\n\n\ndef trim_product_version_for_ui(version): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "shorten_product_name", "method_path": "../srcdata/System/anaconda/pyanaconda/core/product.py", "response": "import os\nimport configparser\nfrom functools import cache\nfrom collections import namedtuple\ndef shorten_product_name(long_name):\n    \"\"\"Shorten a product name.\n\n    This is used in device names. eg. \"fedora\", \"rhel\".\n\n    :param str long_name: Name of the product, as read from the system\n    :return str: Short name for the product\n    \"\"\"\n    product_short_name = long_name.lower()\n    if long_name.count(' '):\n        product_short_name = ''.join(s[0] for s in product_short_name.split())\n    return product_short_name", "test_code_list": [{"test_code": "from textwrap import dedent\nimport unittest\nfrom unittest.mock import patch\nfrom unittest.mock import mock_open\n\nclass ProductHelperTestCase(unittest.TestCase):\n    def test_short_product_name(self):\n        \"\"\"Test shortening product names.\"\"\"\n        assert shorten_product_name('UPPERCASE') == 'uppercase'\n        assert shorten_product_name('lowercase') == 'lowercase'\n        assert shorten_product_name('CamelCase') == 'camelcase'\n        assert shorten_product_name('Name With Spaces') == 'nws'\n        assert shorten_product_name('lowercase spaces') == 'ls'\n        assert shorten_product_name('something-WITH-dashes'\n            ) == 'something-with-dashes'\n        assert shorten_product_name('Fedora') == 'fedora'\n        assert shorten_product_name('Red Hat Enterprise Linux') == 'rhel'\n    \nProductHelperTestCase().test_short_product_name()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_product.py"}], "method_code_mask": "import os\nimport configparser\nfrom functools import cache\nfrom collections import namedtuple\n\n\ndef shorten_product_name(long_name): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "upcase_first_letter", "method_path": "../srcdata/System/anaconda/pyanaconda/core/string.py", "response": "import string\nimport unicodedata\ndef upcase_first_letter(text):\n    \"\"\"Upcase first letter of a string.\n\n    Helper function that upcases the first letter of the string. Python's\n    standard string.capitalize() not only upcases the first letter but also\n    lowercases all the others. string.title() capitalizes all words in the\n    string.\n\n    Note: Never use on translated strings!\n\n    :param str text: text to upcase\n    :return str: the given text with the first letter upcased\n    \"\"\"\n    if not text:\n        return text\n    elif len(text) == 1:\n        return text.upper()\n    else:\n        return text[0].upper() + text[1:]", "test_code_list": [{"test_code": "import unittest\n\nclass UpcaseFirstLetterTests(unittest.TestCase):\n    def test_upcase_first_letter(self):\n        \"\"\"Upcasing first letter should work as expected.\"\"\"\n        assert upcase_first_letter('Czech RePuBliC') == 'Czech RePuBliC'\n        assert upcase_first_letter('czech') == 'Czech'\n        assert upcase_first_letter('czech republic') == 'Czech republic'\n        assert upcase_first_letter('czech Republic') == 'Czech Republic'\n        assert upcase_first_letter('q') == 'Q'\n        assert upcase_first_letter('') == ''\n    \nUpcaseFirstLetterTests().test_upcase_first_letter()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}], "method_code_mask": "import string\nimport unicodedata\n\n\ndef upcase_first_letter(text): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "strip_accents", "method_path": "../srcdata/System/anaconda/pyanaconda/core/string.py", "response": "import string\nimport unicodedata\ndef strip_accents(s):\n    \"\"\"Remove diacritics from a string.\n\n    This function takes arbitrary unicode string and returns it with all the diacritics removed.\n\n    :param str s: arbitrary string\n    :return str: s with diacritics removed\n    \"\"\"\n    return ''.join(c for c in unicodedata.normalize('NFD', s) if \n        unicodedata.category(c) != 'Mn')", "test_code_list": [{"test_code": "import unittest\n\nclass StripAccentsTests(unittest.TestCase):\n    def test_strip_accents_empty(self):\n        \"\"\"Test strip_accents - empty string.\"\"\"\n        assert strip_accents('') == ''\n    \nStripAccentsTests().test_strip_accents_empty()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}, {"test_code": "import unittest\n\nclass StripAccentsTests(unittest.TestCase):\n    def test_strip_accents_czech(self):\n        \"\"\"Test strip_accents - Czech accents.\"\"\"\n        assert strip_accents('\u011b\u0161\u010d\u0159\u017e\u00fd\u00e1\u00ed\u00e9\u00fa\u016f') == 'escrzyaieuu'\n        assert strip_accents('v \u010de\u0161tin\u011b') == 'v cestine'\n        assert strip_accents('m\u011b\u0161\u0165\u00e1nek roz\u0161\u00ed\u0159\u00ed H\u00c1\u010cKY') == 'mestanek rozsiri HACKY'\n        assert strip_accents('nejneobhospoda\u0159ov\u00e1vateln\u011bj\u0161\u00edmu'\n            ) == 'nejneobhospodarovavatelnejsimu'\n    \nStripAccentsTests().test_strip_accents_czech()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}, {"test_code": "import unittest\n\nclass StripAccentsTests(unittest.TestCase):\n    def test_strip_accents_german(self):\n        \"\"\"Test strip_accents - German umlauts.\"\"\"\n        assert strip_accents('L\u00e4rm\u00fcberh\u00f6rer') == 'Larmuberhorer'\n        assert strip_accents('Heiz\u00f6lr\u00fccksto\u00dfabd\u00e4mpfung'\n            ) == 'Heizolrucksto\u00dfabdampfung'\n    \nStripAccentsTests().test_strip_accents_german()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}, {"test_code": "import unittest\n\nclass StripAccentsTests(unittest.TestCase):\n    def test_strip_accents_japanese(self):\n        \"\"\"Test strip_accents - Japanese.\"\"\"\n        assert strip_accents('\u65e5\u672c\u8a9e') == '\u65e5\u672c\u8a9e'\n        assert strip_accents('\u30a2\u30ca\u30b3\u30f3\u30c0') == '\u30a2\u30ca\u30b3\u30f3\u30bf'\n    \nStripAccentsTests().test_strip_accents_japanese()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}, {"test_code": "import unittest\n\nclass StripAccentsTests(unittest.TestCase):\n    def test_strip_accents_combined(self):\n        \"\"\"Test strip_accents - combined.\"\"\"\n        input_string = 'ASCI m\u011b\u0161\u0165\u00e1nek \u30a2\u30ca\u30b3\u30f3\u30c0 Heiz\u00f6lr\u00fccksto\u00dfabd\u00e4mpfung'\n        output_string = 'ASCI mestanek \u30a2\u30ca\u30b3\u30f3\u30bf Heizolrucksto\u00dfabdampfung'\n        assert strip_accents(input_string) == output_string\n    \nStripAccentsTests().test_strip_accents_combined()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}], "method_code_mask": "import string\nimport unicodedata\n\n\ndef strip_accents(s): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "_to_ascii", "method_path": "../srcdata/System/anaconda/pyanaconda/core/string.py", "response": "import string\nimport unicodedata\ndef _to_ascii(s):\n    \"\"\"Convert a unicode string to ASCII\n\n    :param str s: input string\n    :return str: string with only ASCII characters\n    \"\"\"\n    if isinstance(s, str):\n        s = unicodedata.normalize('NFKD', s).encode('ascii', 'ignore').decode(\n            'ascii')\n    elif not isinstance(s, bytes):\n        s = ''\n    return s", "test_code_list": [{"test_code": "import unittest\n\nclass AsciiConversionTests(unittest.TestCase):\n    def test_to_ascii_str(self):\n        \"\"\"Test _to_ascii str conversions.\"\"\"\n        assert _to_ascii('') == ''\n        assert _to_ascii(' ') == ' '\n        assert _to_ascii(\"&@`'\u0142\u0141!@#$%^&*{}[]$'<>*\") == \"&@`'!@#$%^&*{}[]$'<>*\"\n        assert _to_ascii('ABC') == 'ABC'\n        assert _to_ascii('aBC') == 'aBC'\n        _out = 'Heizolruckstoabdampfung'\n        assert _to_ascii('Heiz\u00f6lr\u00fccksto\u00dfabd\u00e4mpfung') == _out\n    \nAsciiConversionTests().test_to_ascii_str()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}, {"test_code": "import unittest\n\nclass AsciiConversionTests(unittest.TestCase):\n    def test_to_ascii_bytes(self):\n        \"\"\"Test _to_ascii bytes handling.\"\"\"\n        in_bytes = b'bytes'\n        output = _to_ascii(in_bytes)\n        assert in_bytes == output\n        assert id(in_bytes) == id(output)\n    \nAsciiConversionTests().test_to_ascii_bytes()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}, {"test_code": "import unittest\n\nclass AsciiConversionTests(unittest.TestCase):\n    def test_to_ascii_other(self):\n        \"\"\"Test _to_ascii handling of other types.\"\"\"\n        assert _to_ascii(None) == ''\n        assert _to_ascii(132456) == ''\n    \nAsciiConversionTests().test_to_ascii_other()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}], "method_code_mask": "import string\nimport unicodedata\n\n\ndef _to_ascii(s): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "have_word_match", "method_path": "../srcdata/System/anaconda/pyanaconda/core/string.py", "response": "import string\nimport unicodedata\ndef have_word_match(str1, str2):\n    \"\"\"Tells if all words from str1 exist in str2 or not.\n\n    :param str str1: list of words to look for\n    :param str str2: list of words to search in\n    :return bool: does str2 contain all the words from str1\n    \"\"\"\n    if str1 is None or str2 is None:\n        return False\n    if str1 == '':\n        return True\n    if str2 == '':\n        return False\n    str1 = str1.lower()\n    str1_words = str1.split()\n    str2 = str2.lower()\n    return all(word in str2 for word in str1_words)", "test_code_list": [{"test_code": "import unittest\n\nclass HaveWordMatchTests(unittest.TestCase):\n    def test_have_word_match_positive(self):\n        \"\"\"Test have_word_match positive results.\"\"\"\n        assert have_word_match('word1 word2', 'word1 word2 word3')\n        assert have_word_match('word1 word2', 'word2 word1 word3')\n        assert have_word_match('word2 word1', 'word3 word1 word2')\n        assert have_word_match('word1', 'word1 word2')\n        assert have_word_match('word1 word2', 'word2word1 word3')\n        assert have_word_match('word2 word1', 'word3 word1word2')\n        assert have_word_match('word1', 'word1word2')\n        assert have_word_match('', 'word1')\n    \nHaveWordMatchTests().test_have_word_match_positive()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}, {"test_code": "import unittest\n\nclass HaveWordMatchTests(unittest.TestCase):\n    def test_have_word_match_negative(self):\n        \"\"\"Test have_word_match negative results.\"\"\"\n        assert not have_word_match('word3 word1', 'word1')\n        assert not have_word_match('word1 word3', 'word1 word2')\n        assert not have_word_match('word3 word2', 'word1 word2')\n        assert not have_word_match('word1word2', 'word1 word2 word3')\n        assert not have_word_match('word1', '')\n        assert not have_word_match('word1', None)\n        assert not have_word_match(None, 'word1')\n        assert not have_word_match('', None)\n        assert not have_word_match(None, '')\n        assert not have_word_match(None, None)\n    \nHaveWordMatchTests().test_have_word_match_negative()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}, {"test_code": "import unittest\n\nclass HaveWordMatchTests(unittest.TestCase):\n    def test_have_word_match_unicode(self):\n        \"\"\"Test have_word_match with unicode.\n    \n            Compare designated unicode and \"standard\" unicode string and make sure nothing crashes.\n            \"\"\"\n        assert have_word_match('f\u00eate', 'f\u00eate champ\u00eatre')\n        assert have_word_match('f\u00eate', 'f\u00eate champ\u00eatre')\n    \nHaveWordMatchTests().test_have_word_match_unicode()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}], "method_code_mask": "import string\nimport unicodedata\n\n\ndef have_word_match(str1, str2): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "split_in_two", "method_path": "../srcdata/System/anaconda/pyanaconda/core/string.py", "response": "import string\nimport unicodedata\ndef split_in_two(text, delimiter=None):\n    \"\"\"Split the given string into two strings.\n\n    This function is useful for safe tuple unpacking.\n    The functionality is similar to str.partition(),\n    but it supports the delimiter of str.split().\n\n    If the delimiter is None, the string is split by\n    a group of whitespace characters that are treated\n    as a single separator.\n\n    For example:\n\n        first, second = split_in_two(text)\n\n    :param text: a string to split\n    :param delimiter: a delimiter for splitting\n    :return: a tuple of exactly two strings\n    \"\"\"\n    items = iter(text.split(sep=delimiter, maxsplit=1))\n    return next(items, ''), next(items, '')", "test_code_list": [{"test_code": "import unittest\n\nclass SplitInTwoTests(unittest.TestCase):\n    def test_split_in_two_whitespace(self):\n        \"\"\"Test the split_in_two function with whitespaces.\"\"\"\n        assert split_in_two('') == ('', '')\n        assert split_in_two('a') == ('a', '')\n        assert split_in_two('a ') == ('a', '')\n        assert split_in_two('a  ') == ('a', '')\n        assert split_in_two('a  b') == ('a', 'b')\n        assert split_in_two('a  b ') == ('a', 'b ')\n        assert split_in_two('a  b  c') == ('a', 'b  c')\n        assert split_in_two('a  b  c ') == ('a', 'b  c ')\n    \nSplitInTwoTests().test_split_in_two_whitespace()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}, {"test_code": "import unittest\n\nclass SplitInTwoTests(unittest.TestCase):\n    def test_split_in_two_delimiter(self):\n        \"\"\"Test the split_in_two function with a special delimiter.\"\"\"\n        assert split_in_two('', delimiter=':') == ('', '')\n        assert split_in_two(':', delimiter=':') == ('', '')\n        assert split_in_two('a', delimiter=':') == ('a', '')\n        assert split_in_two('a:', delimiter=':') == ('a', '')\n        assert split_in_two('a:b', delimiter=':') == ('a', 'b')\n        assert split_in_two('a:b', delimiter=':') == ('a', 'b')\n        assert split_in_two('a:b:', delimiter=':') == ('a', 'b:')\n        assert split_in_two('a:b:c', delimiter=':') == ('a', 'b:c')\n        assert split_in_two('a:b:c:', delimiter=':') == ('a', 'b:c:')\n    \nSplitInTwoTests().test_split_in_two_delimiter()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_string.py"}], "method_code_mask": "import string\nimport unicodedata\n\n\ndef split_in_two(text, delimiter=None): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "isConsoleOnVirtualTerminal", "method_path": "../srcdata/System/anaconda/pyanaconda/core/util.py", "response": "import os\nimport os.path\nimport subprocess\nimport tempfile\nimport re\nimport signal\nimport sys\nimport types\nimport inspect\nimport functools\nimport importlib.util\nimport importlib.machinery\nimport requests\ndef get_active_console(dev='console'):\n    \"\"\"Find the active console device.\n\n    Some tty devices (/dev/console, /dev/tty0) aren't actual devices;\n    they just redirect input and output to the real console device(s).\n\n    These 'fake' ttys have an 'active' sysfs attribute, which lists the real\n    console device(s). (If there's more than one, the *last* one in the list\n    is the primary console.)\n    \"\"\"\n    while os.path.exists('/sys/class/tty/%s/active' % dev):\n        console_path = '/sys/class/tty/%s/active' % dev\n        active = open(console_path, 'rt').read()\n        if active.split():\n            dev = active.split()[-1]\n        else:\n            log.warning('%s is empty while console name is expected',\n                console_path)\n            dev = ''\n            break\n    return dev\ndef isConsoleOnVirtualTerminal(dev='console'):\n    console = get_active_console(dev)\n    consoletype = console.rstrip('0123456789')\n    return consoletype == 'tty'", "test_code_list": [{"test_code": "import unittest\nimport os\nimport tempfile\nimport signal\nimport sys\nimport pytest\nfrom threading import Lock\nfrom unittest.mock import Mock\nfrom unittest.mock import patch\n\nclass MiscTests(unittest.TestCase):\n    def test_is_console_on_vt(self):\n        \"\"\"Test isConsoleOnVirtualTerminal.\"\"\"\n        assert isinstance(isConsoleOnVirtualTerminal(), bool)\n    \nMiscTests().test_is_console_on_vt()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_util.py"}], "method_code_mask": "import os\nimport os.path\nimport subprocess\nimport tempfile\nimport re\nimport signal\nimport sys\nimport types\nimport inspect\nimport functools\nimport importlib.util\nimport importlib.machinery\nimport requests\n\n\ndef get_active_console(dev='console'):\n    \"\"\"Find the active console device.\n\n    Some tty devices (/dev/console, /dev/tty0) aren't actual devices;\n    they just redirect input and output to the real console device(s).\n\n    These 'fake' ttys have an 'active' sysfs attribute, which lists the real\n    console device(s). (If there's more than one, the *last* one in the list\n    is the primary console.)\n    \"\"\"\n    while os.path.exists('/sys/class/tty/%s/active' % dev):\n        console_path = '/sys/class/tty/%s/active' % dev\n        active = open(console_path, 'rt').read()\n        if active.split():\n            dev = active.split()[-1]\n        else:\n            log.warning('%s is empty while console name is expected',\n                console_path)\n            dev = ''\n            break\n    return dev\n\n\ndef isConsoleOnVirtualTerminal(dev='console'): [MASK]\n"}
{"model_name": "std", "repository": "anaconda", "full_method_name": "item_counter", "method_path": "../srcdata/System/anaconda/pyanaconda/core/util.py", "response": "import os\nimport os.path\nimport subprocess\nimport tempfile\nimport re\nimport signal\nimport sys\nimport types\nimport inspect\nimport functools\nimport importlib.util\nimport importlib.machinery\nimport requests\ndef item_counter(item_count):\n    \"\"\"A generator for easy counting of items.\n\n    :param int item_count: number of items\n\n    The general idea is to initialize the generator with the number\n    of items and then activating it every time an item is being\n    processed.\n\n    The generator produces strings in the <index>/<item count> format,\n    for example:\n    1/20\n    2/20\n    3/20\n    And so on.\n\n    Such strings can be easily used to add a current/total counter\n    to log messages when tasks and task queues are processed.\n    \"\"\"\n    if item_count < 0:\n        raise ValueError(\"Item count can't be negative.\")\n    index = 1\n    while index <= item_count:\n        yield '%d/%d' % (index, item_count)\n        index += 1", "test_code_list": [{"test_code": "import unittest\nimport os\nimport tempfile\nimport signal\nimport sys\nimport pytest\nfrom threading import Lock\nfrom unittest.mock import Mock\nfrom unittest.mock import patch\n\nclass MiscTests(unittest.TestCase):\n    def test_item_counter(self):\n        \"\"\"Test the item_counter generator.\"\"\"\n        counter = item_counter(3)\n        assert next(counter) == '1/3'\n        assert next(counter) == '2/3'\n        assert next(counter) == '3/3'\n        with pytest.raises(StopIteration):\n            next(counter)\n        counter = item_counter(0)\n        with pytest.raises(StopIteration):\n            next(counter)\n        counter = item_counter(1)\n        assert next(counter) == '1/1'\n        with pytest.raises(StopIteration):\n            next(counter)\n        counter = item_counter(-1)\n        with pytest.raises(ValueError):\n            next(counter)\n    \nMiscTests().test_item_counter()\n", "code_start": "", "test_path": "../srcdata/System/anaconda/tests/unit_tests/pyanaconda_tests/core/test_util.py"}], "method_code_mask": "import os\nimport os.path\nimport subprocess\nimport tempfile\nimport re\nimport signal\nimport sys\nimport types\nimport inspect\nimport functools\nimport importlib.util\nimport importlib.machinery\nimport requests\n\n\ndef item_counter(item_count): [MASK]\n"}

{"model_name": "std", "repository": "openpyxl", "full_method_name": "coordinate_from_string", "method_path": "../srcdata/System/openpyxl/openpyxl/cell/cell.py", "response": "from __future__ import absolute_import\nfrom numbers import Number\nimport datetime\nimport re\nimport warnings\nfrom openpyxl.styles import is_date_format\nCOORD_RE = re.compile('^[$]?([A-Z]+)[$]?(\\\\d+)$')\ndef coordinate_from_string(coord_string):\n    \"\"\"Convert a coordinate string like 'B12' to a tuple ('B', 12)\"\"\"\n    match = COORD_RE.match(coord_string.upper())\n    if not match:\n        msg = 'Invalid cell coordinates (%s)' % coord_string\n        raise CellCoordinatesException(msg)\n    column, row = match.groups()\n    row = int(row)\n    if not row:\n        msg = 'There is no row 0 (%s)' % coord_string\n        raise CellCoordinatesException(msg)\n    return column, row", "test_code_list": [{"test_code": "from datetime import time\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom datetime import date\nimport pytest\nfrom openpyxl.compat import safe_string\nfrom openpyxl.workbook import Workbook\nfrom openpyxl.cell import Cell\nfrom openpyxl.comments import Comment\nimport decimal\nfrom itertools import chain\ndef test_coordinates():\n    column, row = coordinate_from_string('ZF46')\n    assert 'ZF' == column\n    assert 46 == row\n\ntest_coordinates()\n", "code_start": "", "test_path": "../srcdata/System/openpyxl/openpyxl/cell/tests/test_cell.py"}], "method_code_mask": "from __future__ import absolute_import\nfrom numbers import Number\nimport datetime\nimport re\nimport warnings\nfrom openpyxl.styles import is_date_format\nCOORD_RE = re.compile('^[$]?([A-Z]+)[$]?(\\\\d+)$')\n\n\ndef coordinate_from_string(coord_string): [MASK]\n"}
{"model_name": "std", "repository": "openpyxl", "full_method_name": "absolute_coordinate", "method_path": "../srcdata/System/openpyxl/openpyxl/cell/cell.py", "response": "from __future__ import absolute_import\nfrom numbers import Number\nimport datetime\nimport re\nimport warnings\nfrom openpyxl.styles import is_date_format\nABSOLUTE_RE = re.compile('^[$]?([A-Z]+)[$]?(\\\\d+)(:[$]?([A-Z]+)[$]?(\\\\d+))?$')\ndef absolute_coordinate(coord_string):\n    \"\"\"Convert a coordinate to an absolute coordinate string (B12 -> $B$12)\"\"\"\n    m = ABSOLUTE_RE.match(coord_string)\n    if m:\n        parts = m.groups()\n        if all(parts[-2:]):\n            return '$%s$%s:$%s$%s' % (parts[0], parts[1], parts[3], parts[4])\n        else:\n            return '$%s$%s' % (parts[0], parts[1])\n    else:\n        return coord_string", "test_code_list": [{"test_code": "from datetime import time\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom datetime import date\nimport pytest\nfrom openpyxl.compat import safe_string\nfrom openpyxl.workbook import Workbook\nfrom openpyxl.cell import Cell\nfrom openpyxl.comments import Comment\nimport decimal\nfrom itertools import chain\ndef test_absolute():\n    assert '$ZF$51' == absolute_coordinate('ZF51')\n\ntest_absolute()\n", "code_start": "", "test_path": "../srcdata/System/openpyxl/openpyxl/cell/tests/test_cell.py"}, {"test_code": "from datetime import time\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom datetime import date\nimport pytest\nfrom openpyxl.compat import safe_string\nfrom openpyxl.workbook import Workbook\nfrom openpyxl.cell import Cell\nfrom openpyxl.comments import Comment\nimport decimal\nfrom itertools import chain\ndef test_absolute_multiple():\n    assert '$ZF$51:$ZF$53' == absolute_coordinate('ZF51:ZF$53')\n\ntest_absolute_multiple()\n", "code_start": "", "test_path": "../srcdata/System/openpyxl/openpyxl/cell/tests/test_cell.py"}], "method_code_mask": "from __future__ import absolute_import\nfrom numbers import Number\nimport datetime\nimport re\nimport warnings\nfrom openpyxl.styles import is_date_format\nABSOLUTE_RE = re.compile('^[$]?([A-Z]+)[$]?(\\\\d+)(:[$]?([A-Z]+)[$]?(\\\\d+))?$')\n\n\ndef absolute_coordinate(coord_string): [MASK]\n"}
{"model_name": "std", "repository": "openpyxl", "full_method_name": "_get_author_list", "method_path": "../srcdata/System/openpyxl/openpyxl/reader/comments.py", "response": "from __future__ import absolute_import\nimport os.path\nfrom openpyxl.comments import Comment\nfrom openpyxl.xml.constants import PACKAGE_WORKSHEET_RELS\nfrom openpyxl.xml.constants import PACKAGE_WORKSHEETS\nfrom openpyxl.xml.constants import SHEET_MAIN_NS\nfrom openpyxl.xml.constants import COMMENTS_NS\nfrom openpyxl.xml.functions import fromstring\ndef _get_author_list(root):\n    author_subtree = root.find('{%s}authors' % SHEET_MAIN_NS)\n    return [author.text for author in author_subtree]", "test_code_list": [{"test_code": "from zipfile import ZipFile\nfrom zipfile import ZIP_DEFLATED\nimport os.path\nfrom openpyxl.workbook import Workbook\nfrom openpyxl.reader.excel import load_workbook\nfrom openpyxl.xml.functions import fromstring\ndef test_get_author_list():\n    xml = \"\"\"<?xml version=\"1.0\" standalone=\"yes\"?><comments\n    xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"><authors>\n    <author>Cuke</author><author>Not Cuke</author></authors><commentList>\n    </commentList></comments>\"\"\"\n    assert _get_author_list(fromstring(xml)) == ['Cuke', 'Not Cuke']\n\ntest_get_author_list()\n", "code_start": "", "test_path": "../srcdata/System/openpyxl/openpyxl/tests/test_comment_reader.py"}], "method_code_mask": "from __future__ import absolute_import\nimport os.path\nfrom openpyxl.comments import Comment\nfrom openpyxl.xml.constants import PACKAGE_WORKSHEET_RELS\nfrom openpyxl.xml.constants import PACKAGE_WORKSHEETS\nfrom openpyxl.xml.constants import SHEET_MAIN_NS\nfrom openpyxl.xml.constants import COMMENTS_NS\nfrom openpyxl.xml.functions import fromstring\n\n\ndef _get_author_list(root): [MASK]\n"}
{"model_name": "std", "repository": "openpyxl", "full_method_name": "split_named_range", "method_path": "../srcdata/System/openpyxl/openpyxl/namedrange.py", "response": "from __future__ import absolute_import\nimport re\nNAMED_RANGE_RE = re.compile(\n    \"^(('(?P<quoted>([^']|'')*)')|(?P<notquoted>[^']*))!(?P<range>(\\\\$([A-Za-z]+))?(\\\\$([0-9]+))?(:(\\\\$([A-Za-z]+))?(\\\\$([0-9]+))?)?)\"\n    )\nSPLIT_NAMED_RANGE_RE = re.compile(\"((?:[^,']|'(?:[^']|'')*')+)\")\ndef split_named_range(range_string):\n    \"\"\"Separate a named range into its component parts\"\"\"\n    destinations = []\n    for range_string in SPLIT_NAMED_RANGE_RE.split(range_string)[1::2]:\n        match = NAMED_RANGE_RE.match(range_string)\n        if not match:\n            raise NamedRangeException('Invalid named range string: \"%s\"' %\n                range_string)\n        else:\n            match = match.groupdict()\n            sheet_name = match['quoted'] or match['notquoted']\n            xlrange = match['range']\n            sheet_name = sheet_name.replace(\"''\", \"'\")\n            destinations.append((sheet_name, xlrange))\n    return destinations", "test_code_list": [{"test_code": "import os.path\nimport pytest\nfrom openpyxl.reader.excel import load_workbook\nfrom openpyxl.workbook import Workbook\ndef test_split():\n    assert [('My Sheet', '$D$8')] == split_named_range(\"'My Sheet'!$D$8\")\n\ntest_split()\n", "code_start": "", "test_path": "../srcdata/System/openpyxl/openpyxl/tests/test_named_range.py"}, {"test_code": "import os.path\nimport pytest\nfrom openpyxl.reader.excel import load_workbook\nfrom openpyxl.workbook import Workbook\ndef test_split_no_quotes():\n    assert [('HYPOTHESES', '$B$3:$L$3')] == split_named_range(\n        'HYPOTHESES!$B$3:$L$3')\n\ntest_split_no_quotes()\n", "code_start": "", "test_path": "../srcdata/System/openpyxl/openpyxl/tests/test_named_range.py"}], "method_code_mask": "from __future__ import absolute_import\nimport re\nNAMED_RANGE_RE = re.compile(\n    \"^(('(?P<quoted>([^']|'')*)')|(?P<notquoted>[^']*))!(?P<range>(\\\\$([A-Za-z]+))?(\\\\$([0-9]+))?(:(\\\\$([A-Za-z]+))?(\\\\$([0-9]+))?)?)\"\n    )\nSPLIT_NAMED_RANGE_RE = re.compile(\"((?:[^,']|'(?:[^']|'')*')+)\")\n\n\ndef split_named_range(range_string): [MASK]\n"}
{"model_name": "std", "repository": "openpyxl", "full_method_name": "hash_password", "method_path": "../srcdata/System/openpyxl/openpyxl/worksheet/password_hasher.py", "response": "from __future__ import absolute_import\ndef hash_password(plaintext_password=''):\n    \"\"\"Create a password hash from a given string.\n\n    This method is based on the algorithm provided by\n    Daniel Rentz of OpenOffice and the PEAR package\n    Spreadsheet_Excel_Writer by Xavier Noguer <xnoguer@rezebra.com>.\n\n    \"\"\"\n    password = 0\n    i = 1\n    for char in plaintext_password:\n        value = ord(char) << i\n        rotated_bits = value >> 15\n        value &= 32767\n        password ^= value | rotated_bits\n        i += 1\n    password ^= len(plaintext_password)\n    password ^= 52811\n    return str(hex(password)).upper()[2:]", "test_code_list": [{"test_code": "def test_hasher():\n    assert 'CBEB' == hash_password('test')\n\ntest_hasher()\n", "code_start": "", "test_path": "../srcdata/System/openpyxl/openpyxl/tests/test_password_hash.py"}], "method_code_mask": "from __future__ import absolute_import\n\n\ndef hash_password(plaintext_password=''): [MASK]\n"}

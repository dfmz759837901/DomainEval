{"model_name": "std", "repository": "wtforms", "full_method_name": "get_form", "method_path": "../srcdata/Network/wtforms/tests/test_form.py", "response": "import pytest\nfrom wtforms.fields import IntegerField\nfrom wtforms.fields import StringField\nfrom wtforms.form import BaseForm\nfrom wtforms.form import Form\nfrom wtforms.meta import DefaultMeta\nfrom wtforms.validators import DataRequired\nfrom wtforms.validators import ValidationError\ndef get_form(**kwargs):\n\n    def validate_test(form, field):\n        if field.data != 'foobar':\n            raise ValidationError('error')\n    return BaseForm({'test': StringField(validators=[validate_test])}, **kwargs\n        )", "test_code_list": [{"test_code": "import pytest\nfrom wtforms.fields import IntegerField\nfrom wtforms.fields import StringField\nfrom wtforms.form import BaseForm\nfrom wtforms.form import Form\nfrom wtforms.meta import DefaultMeta\nfrom wtforms.validators import DataRequired\nfrom wtforms.validators import ValidationError\ndef test_baseform_data_proxy():\n    form = get_form()\n    form.process(test='foo')\n    assert form.data == {'test': 'foo'}\n\ntest_baseform_data_proxy()\n", "code_start": "", "test_path": "../srcdata/Network/wtforms/tests/test_form.py"}, {"test_code": "import pytest\nfrom wtforms.fields import IntegerField\nfrom wtforms.fields import StringField\nfrom wtforms.form import BaseForm\nfrom wtforms.form import Form\nfrom wtforms.meta import DefaultMeta\nfrom wtforms.validators import DataRequired\nfrom wtforms.validators import ValidationError\ndef test_baseform_errors_proxy():\n    form = get_form()\n    form.process(test='foobar')\n    form.validate()\n    assert form.errors == {}\n    form = get_form()\n    form.process()\n    form.validate()\n    assert form.errors == {'test': ['error']}\n\ntest_baseform_errors_proxy()\n", "code_start": "", "test_path": "../srcdata/Network/wtforms/tests/test_form.py"}, {"test_code": "import pytest\nfrom wtforms.fields import IntegerField\nfrom wtforms.fields import StringField\nfrom wtforms.form import BaseForm\nfrom wtforms.form import Form\nfrom wtforms.meta import DefaultMeta\nfrom wtforms.validators import DataRequired\nfrom wtforms.validators import ValidationError\ndef test_baseform_contains():\n    form = get_form()\n    assert 'test' in form\n    assert 'abcd' not in form\n\ntest_baseform_contains()\n", "code_start": "", "test_path": "../srcdata/Network/wtforms/tests/test_form.py"}, {"test_code": "import pytest\nfrom wtforms.fields import IntegerField\nfrom wtforms.fields import StringField\nfrom wtforms.form import BaseForm\nfrom wtforms.form import Form\nfrom wtforms.meta import DefaultMeta\nfrom wtforms.validators import DataRequired\nfrom wtforms.validators import ValidationError\ndef test_baseform_field_removal():\n    form = get_form()\n    del form['test']\n    with pytest.raises(AttributeError):\n        form.test\n    assert 'test' not in form\n\ntest_baseform_field_removal()\n", "code_start": "", "test_path": "../srcdata/Network/wtforms/tests/test_form.py"}, {"test_code": "import pytest\nfrom wtforms.fields import IntegerField\nfrom wtforms.fields import StringField\nfrom wtforms.form import BaseForm\nfrom wtforms.form import Form\nfrom wtforms.meta import DefaultMeta\nfrom wtforms.validators import DataRequired\nfrom wtforms.validators import ValidationError\ndef test_baseform_populate_obj():\n    m = type('Model', (object,), {})\n    form = get_form()\n    form.process(test='foobar')\n    form.populate_obj(m)\n    assert m.test == 'foobar'\n    assert [k for k in dir(m) if not k.startswith('_')] == ['test']\n\ntest_baseform_populate_obj()\n", "code_start": "", "test_path": "../srcdata/Network/wtforms/tests/test_form.py"}], "method_code_mask": "import pytest\nfrom wtforms.fields import IntegerField\nfrom wtforms.fields import StringField\nfrom wtforms.form import BaseForm\nfrom wtforms.form import Form\nfrom wtforms.meta import DefaultMeta\nfrom wtforms.validators import DataRequired\nfrom wtforms.validators import ValidationError\n\n\ndef get_form(**kwargs): [MASK]\n"}
{"model_name": "std", "repository": "wtforms", "full_method_name": "_init_field", "method_path": "../srcdata/Network/wtforms/tests/fields/test_field.py", "response": "import pytest\nfrom markupsafe import Markup\nfrom wtforms import meta\nfrom wtforms import validators\nfrom wtforms.fields import Field\nfrom wtforms.fields import StringField\nfrom wtforms.form import Form\nclass PrePostTestField(StringField):\n\n    def pre_validate(self, form):\n        if self.data == 'stoponly':\n            raise validators.StopValidation()\n        elif self.data.startswith('stop'):\n            raise validators.StopValidation('stop with message')\n\n    def post_validate(self, form, stopped):\n        if self.data == 'p':\n            raise validators.ValidationError('Post')\n        elif stopped and self.data == 'stop-post':\n            raise validators.ValidationError('Post-stopped')\ndef _init_field(value):\n    class F(Form):\n        a = PrePostTestField(validators=[validators.Length(max=1, message=\n            'too long')])\n    form = F(a=value)\n    form.validate()\n    return form.a", "test_code_list": [{"test_code": "import pytest\nfrom markupsafe import Markup\nfrom wtforms import meta\nfrom wtforms import validators\nfrom wtforms.fields import Field\nfrom wtforms.fields import StringField\nfrom wtforms.form import Form\ndef test_pre_stop():\n    a = _init_field('long')\n    assert a.errors == ['too long']\n    stoponly = _init_field('stoponly')\n    assert stoponly.errors == []\n    stopmessage = _init_field('stopmessage')\n    assert stopmessage.errors == ['stop with message']\n\ntest_pre_stop()\n", "code_start": "", "test_path": "../srcdata/Network/wtforms/tests/fields/test_field.py"}, {"test_code": "import pytest\nfrom markupsafe import Markup\nfrom wtforms import meta\nfrom wtforms import validators\nfrom wtforms.fields import Field\nfrom wtforms.fields import StringField\nfrom wtforms.form import Form\ndef test_post():\n    a = _init_field('p')\n    assert a.errors == ['Post']\n    stopped = _init_field('stop-post')\n    assert stopped.errors == ['stop with message', 'Post-stopped']\n\ntest_post()\n", "code_start": "", "test_path": "../srcdata/Network/wtforms/tests/fields/test_field.py"}], "method_code_mask": "import pytest\nfrom markupsafe import Markup\nfrom wtforms import meta\nfrom wtforms import validators\nfrom wtforms.fields import Field\nfrom wtforms.fields import StringField\nfrom wtforms.form import Form\n\n\nclass PrePostTestField(StringField):\n\n    def pre_validate(self, form):\n        if self.data == 'stoponly':\n            raise validators.StopValidation()\n        elif self.data.startswith('stop'):\n            raise validators.StopValidation('stop with message')\n\n    def post_validate(self, form, stopped):\n        if self.data == 'p':\n            raise validators.ValidationError('Post')\n        elif stopped and self.data == 'stop-post':\n            raise validators.ValidationError('Post-stopped')\n\n\ndef _init_field(value): [MASK]\n"}

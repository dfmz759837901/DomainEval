{"model_name": "std", "repository": "scrapy", "full_method_name": "set_environ", "method_path": "../srcdata/Network/scrapy/scrapy/utils/misc.py", "response": "from __future__ import annotations\nimport ast\nimport hashlib\nimport inspect\nimport os\nimport re\nimport warnings\nfrom collections import deque\nfrom contextlib import contextmanager\nfrom functools import partial\nfrom importlib import import_module\nfrom pkgutil import iter_modules\nfrom typing import IO\nfrom typing import TYPE_CHECKING\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Deque\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TypeVar\nfrom typing import Union\nfrom typing import cast\nfrom types import ModuleType\n@contextmanager\ndef set_environ(**kwargs: str) ->Iterator[None]:\n    \"\"\"Temporarily set environment variables inside the context manager and\n    fully restore previous environment afterwards\n    \"\"\"\n    original_env = {k: os.environ.get(k) for k in kwargs}\n    os.environ.update(kwargs)\n    try:\n        yield\n    finally:\n        for k, v in original_env.items():\n            if v is None:\n                del os.environ[k]\n            else:\n                os.environ[k] = v", "test_code_list": [{"test_code": "import os\nimport sys\nimport unittest\nfrom pathlib import Path\nfrom unittest import mock\n\nclass UtilsMiscTestCase(unittest.TestCase):\n    def test_set_environ(self):\n        assert os.environ.get('some_test_environ') is None\n        with set_environ(some_test_environ='test_value'):\n            assert os.environ.get('some_test_environ') == 'test_value'\n        assert os.environ.get('some_test_environ') is None\n        os.environ['some_test_environ'] = 'test'\n        assert os.environ.get('some_test_environ') == 'test'\n        with set_environ(some_test_environ='test_value'):\n            assert os.environ.get('some_test_environ') == 'test_value'\n        assert os.environ.get('some_test_environ') == 'test'\n    \nUtilsMiscTestCase().test_set_environ()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_misc/__init__.py"}], "method_code_mask": "from __future__ import annotations\nimport ast\nimport hashlib\nimport inspect\nimport os\nimport re\nimport warnings\nfrom collections import deque\nfrom contextlib import contextmanager\nfrom functools import partial\nfrom importlib import import_module\nfrom pkgutil import iter_modules\nfrom typing import IO\nfrom typing import TYPE_CHECKING\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Deque\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TypeVar\nfrom typing import Union\nfrom typing import cast\nfrom types import ModuleType\n\n\n@contextmanager\ndef set_environ(**kwargs: str) ->Iterator[None]: [MASK]\n"}
{"model_name": "std", "repository": "scrapy", "full_method_name": "sitemap_urls_from_robots", "method_path": "../srcdata/Network/scrapy/scrapy/utils/sitemap.py", "response": "from typing import Any\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Optional\nfrom typing import Union\nfrom urllib.parse import urljoin\nimport lxml.etree\ndef sitemap_urls_from_robots(robots_text: str, base_url: Optional[str]=None\n    ) ->Iterable[str]:\n    \"\"\"Return an iterator over all sitemap urls contained in the given\n    robots.txt file\n    \"\"\"\n    for line in robots_text.splitlines():\n        if line.lstrip().lower().startswith('sitemap:'):\n            url = line.split(':', 1)[1].strip()\n            yield urljoin(base_url or '', url)", "test_code_list": [{"test_code": "import unittest\n\nclass SitemapTest(unittest.TestCase):\n    def test_sitemap_urls_from_robots(self):\n        robots = \"\"\"User-agent: *\n    Disallow: /aff/\n    Disallow: /wl/\n    \n    # Search and shopping refining\n    Disallow: /s*/*facet\n    Disallow: /s*/*tags\n    \n    # Sitemap files\n    Sitemap: http://example.com/sitemap.xml\n    Sitemap: http://example.com/sitemap-product-index.xml\n    Sitemap: HTTP://example.com/sitemap-uppercase.xml\n    Sitemap: /sitemap-relative-url.xml\n    \n    # Forums\n    Disallow: /forum/search/\n    Disallow: /forum/active/\n    \"\"\"\n        self.assertEqual(list(sitemap_urls_from_robots(robots, base_url=\n            'http://example.com')), ['http://example.com/sitemap.xml',\n            'http://example.com/sitemap-product-index.xml',\n            'http://example.com/sitemap-uppercase.xml',\n            'http://example.com/sitemap-relative-url.xml'])\n    \nSitemapTest().test_sitemap_urls_from_robots()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_sitemap.py"}], "method_code_mask": "from typing import Any\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import Optional\nfrom typing import Union\nfrom urllib.parse import urljoin\nimport lxml.etree\n\n\ndef sitemap_urls_from_robots(robots_text: str, base_url: Optional[str]=None\n    ) ->Iterable[str]: [MASK]\n"}
{"model_name": "std", "repository": "scrapy", "full_method_name": "build_from_crawler", "method_path": "../srcdata/Network/scrapy/scrapy/utils/misc.py", "response": "from __future__ import annotations\nimport ast\nimport hashlib\nimport inspect\nimport os\nimport re\nimport warnings\nfrom collections import deque\nfrom contextlib import contextmanager\nfrom functools import partial\nfrom importlib import import_module\nfrom pkgutil import iter_modules\nfrom typing import IO\nfrom typing import TYPE_CHECKING\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Deque\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TypeVar\nfrom typing import Union\nfrom typing import cast\nfrom types import ModuleType\nT = TypeVar('T')\ndef build_from_crawler(objcls: Type[T], crawler: Crawler, /, *args: Any, **\n    kwargs: Any) ->T:\n    \"\"\"Construct a class instance using its ``from_crawler`` constructor.\n    ``*args`` and ``**kwargs`` are forwarded to the constructor.\n    Raises ``TypeError`` if the resulting instance is ``None``.\n    \"\"\"\n    if hasattr(objcls, 'from_crawler'):\n        instance = objcls.from_crawler(crawler, *args, **kwargs)\n        method_name = 'from_crawler'\n    elif hasattr(objcls, 'from_settings'):\n        instance = objcls.from_settings(crawler.settings, *args, **kwargs)\n        method_name = 'from_settings'\n    else:\n        instance = objcls(*args, **kwargs)\n        method_name = '__new__'\n    if instance is None:\n        raise TypeError(f'{objcls.__qualname__}.{method_name} returned None')\n    return cast(T, instance)", "test_code_list": [{"test_code": "import os\nimport sys\nimport unittest\nfrom pathlib import Path\nfrom unittest import mock\n\nclass UtilsMiscTestCase(unittest.TestCase):\n    def test_build_from_crawler(self):\n        settings = mock.MagicMock()\n        crawler = mock.MagicMock(spec_set=['settings'])\n        args = True, 100.0\n        kwargs = {'key': 'val'}\n    \n        def _test_with_crawler(mock, settings, crawler):\n            build_from_crawler(mock, crawler, *args, **kwargs)\n            if hasattr(mock, 'from_crawler'):\n                mock.from_crawler.assert_called_once_with(crawler, *args, **kwargs)\n                if hasattr(mock, 'from_settings'):\n                    self.assertEqual(mock.from_settings.call_count, 0)\n                self.assertEqual(mock.call_count, 0)\n            elif hasattr(mock, 'from_settings'):\n                mock.from_settings.assert_called_once_with(settings, *args, **\n                    kwargs)\n                self.assertEqual(mock.call_count, 0)\n            else:\n                mock.assert_called_once_with(*args, **kwargs)\n        spec_sets = ['__qualname__'], ['__qualname__', 'from_crawler'], [\n            '__qualname__', 'from_settings', 'from_crawler']\n        for specs in spec_sets:\n            m = mock.MagicMock(spec_set=specs)\n            _test_with_crawler(m, settings, crawler)\n            m.reset_mock()\n        m = mock.MagicMock(spec_set=['__qualname__', 'from_crawler'])\n        m.from_crawler.return_value = None\n        with self.assertRaises(TypeError):\n            build_from_crawler(m, crawler, *args, **kwargs)\n    \nUtilsMiscTestCase().test_build_from_crawler()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_misc/__init__.py"}], "method_code_mask": "from __future__ import annotations\nimport ast\nimport hashlib\nimport inspect\nimport os\nimport re\nimport warnings\nfrom collections import deque\nfrom contextlib import contextmanager\nfrom functools import partial\nfrom importlib import import_module\nfrom pkgutil import iter_modules\nfrom typing import IO\nfrom typing import TYPE_CHECKING\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Deque\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TypeVar\nfrom typing import Union\nfrom typing import cast\nfrom types import ModuleType\nT = TypeVar('T')\n\n\ndef build_from_crawler(objcls: Type[T], crawler: Crawler, /, *args: Any, **\n    kwargs: Any) ->T: [MASK]\n"}
{"model_name": "std", "repository": "scrapy", "full_method_name": "build_from_settings", "method_path": "../srcdata/Network/scrapy/scrapy/utils/misc.py", "response": "from __future__ import annotations\nimport ast\nimport hashlib\nimport inspect\nimport os\nimport re\nimport warnings\nfrom collections import deque\nfrom contextlib import contextmanager\nfrom functools import partial\nfrom importlib import import_module\nfrom pkgutil import iter_modules\nfrom typing import IO\nfrom typing import TYPE_CHECKING\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Deque\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TypeVar\nfrom typing import Union\nfrom typing import cast\nfrom types import ModuleType\nT = TypeVar('T')\ndef build_from_settings(objcls: Type[T], settings: BaseSettings, /, *args:\n    Any, **kwargs: Any) ->T:\n    \"\"\"Construct a class instance using its ``from_settings`` constructor.\n    ``*args`` and ``**kwargs`` are forwarded to the constructor.\n    Raises ``TypeError`` if the resulting instance is ``None``.\n    \"\"\"\n    if hasattr(objcls, 'from_settings'):\n        instance = objcls.from_settings(settings, *args, **kwargs)\n        method_name = 'from_settings'\n    else:\n        instance = objcls(*args, **kwargs)\n        method_name = '__new__'\n    if instance is None:\n        raise TypeError(f'{objcls.__qualname__}.{method_name} returned None')\n    return cast(T, instance)", "test_code_list": [{"test_code": "import os\nimport sys\nimport unittest\nfrom pathlib import Path\nfrom unittest import mock\n\nclass UtilsMiscTestCase(unittest.TestCase):\n    def test_build_from_settings(self):\n        settings = mock.MagicMock()\n        args = True, 100.0\n        kwargs = {'key': 'val'}\n    \n        def _test_with_settings(mock, settings):\n            build_from_settings(mock, settings, *args, **kwargs)\n            if hasattr(mock, 'from_settings'):\n                mock.from_settings.assert_called_once_with(settings, *args, **\n                    kwargs)\n                self.assertEqual(mock.call_count, 0)\n            else:\n                mock.assert_called_once_with(*args, **kwargs)\n        spec_sets = ['__qualname__'], ['__qualname__', 'from_settings'], [\n            '__qualname__', 'from_settings', 'from_crawler']\n        for specs in spec_sets:\n            m = mock.MagicMock(spec_set=specs)\n            _test_with_settings(m, settings)\n            m.reset_mock()\n        m = mock.MagicMock(spec_set=['__qualname__', 'from_settings'])\n        m.from_settings.return_value = None\n        with self.assertRaises(TypeError):\n            build_from_settings(m, settings, *args, **kwargs)\n    \nUtilsMiscTestCase().test_build_from_settings()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_misc/__init__.py"}], "method_code_mask": "from __future__ import annotations\nimport ast\nimport hashlib\nimport inspect\nimport os\nimport re\nimport warnings\nfrom collections import deque\nfrom contextlib import contextmanager\nfrom functools import partial\nfrom importlib import import_module\nfrom pkgutil import iter_modules\nfrom typing import IO\nfrom typing import TYPE_CHECKING\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Deque\nfrom typing import Iterable\nfrom typing import Iterator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Type\nfrom typing import TypeVar\nfrom typing import Union\nfrom typing import cast\nfrom types import ModuleType\nT = TypeVar('T')\n\n\ndef build_from_settings(objcls: Type[T], settings: BaseSettings, /, *args:\n    Any, **kwargs: Any) ->T: [MASK]\n"}
{"model_name": "std", "repository": "scrapy", "full_method_name": "curl_to_request_kwargs", "method_path": "../srcdata/Network/scrapy/scrapy/utils/curl.py", "response": "import argparse\nimport warnings\nfrom http.cookies import SimpleCookie\nfrom shlex import split\nfrom typing import Any\nfrom typing import Dict\nfrom typing import List\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Union\nfrom urllib.parse import urlparse\nclass CurlParser(argparse.ArgumentParser):\n\n    def error(self, message: str) ->NoReturn:\n        error_msg = f'There was an error parsing the curl command: {message}'\n        raise ValueError(error_msg)\ncurl_parser = CurlParser()\ndef curl_to_request_kwargs(curl_command: str, ignore_unknown_options: bool=True\n    ) ->Dict[str, Any]:\n    \"\"\"Convert a cURL command syntax to Request kwargs.\n    :param str curl_command: string containing the curl command\n    :param bool ignore_unknown_options: If true, only a warning is emitted when\n                                        cURL options are unknown. Otherwise\n                                        raises an error. (default: True)\n    :return: dictionary of Request kwargs\n    \"\"\"\n    curl_args = split(curl_command)\n    if curl_args[0] != 'curl':\n        raise ValueError('A curl command must start with \"curl\"')\n    parsed_args, argv = curl_parser.parse_known_args(curl_args[1:])\n    if argv:\n        msg = f\"Unrecognized options: {', '.join(argv)}\"\n        if ignore_unknown_options:\n            warnings.warn(msg)\n        else:\n            raise ValueError(msg)\n    url = parsed_args.url\n    parsed_url = urlparse(url)\n    if not parsed_url.scheme:\n        url = 'http://' + url\n    method = parsed_args.method or 'GET'\n    result: Dict[str, Any] = {'method': method.upper(), 'url': url}\n    headers, cookies = _parse_headers_and_cookies(parsed_args)\n    if headers:\n        result['headers'] = headers\n    if cookies:\n        result['cookies'] = cookies\n    if parsed_args.data:\n        result['body'] = parsed_args.data\n        if not parsed_args.method:\n            result['method'] = 'POST'\n    return result", "test_code_list": [{"test_code": "import unittest\nimport warnings\n\nclass CurlToRequestKwargsTest(unittest.TestCase):\n    def test_must_start_with_curl_error(self):\n        self.assertRaises(ValueError, lambda : curl_to_request_kwargs(\n            'carl -X POST http://example.org'))\n    \nCurlToRequestKwargsTest().test_must_start_with_curl_error()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_curl.py"}], "method_code_mask": "import argparse\nimport warnings\nfrom http.cookies import SimpleCookie\nfrom shlex import split\nfrom typing import Any\nfrom typing import Dict\nfrom typing import List\nfrom typing import NoReturn\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\nfrom typing import Union\nfrom urllib.parse import urlparse\n\n\nclass CurlParser(argparse.ArgumentParser):\n\n    def error(self, message: str) ->NoReturn:\n        error_msg = f'There was an error parsing the curl command: {message}'\n        raise ValueError(error_msg)\n\n\ncurl_parser = CurlParser()\n\n\ndef curl_to_request_kwargs(curl_command: str, ignore_unknown_options: bool=True\n    ) ->Dict[str, Any]: [MASK]\n"}
{"model_name": "std", "repository": "scrapy", "full_method_name": "guess_scheme", "method_path": "../srcdata/Network/scrapy/scrapy/utils/url.py", "response": "import re\nfrom typing import TYPE_CHECKING\nfrom typing import Iterable\nfrom typing import Optional\nfrom typing import Type\nfrom typing import Union\nfrom typing import cast\nfrom urllib.parse import ParseResult\nfrom urllib.parse import urldefrag\nfrom urllib.parse import urlparse\nfrom urllib.parse import urlunparse\ndef guess_scheme(url: str) ->str:\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    if _is_filesystem_path(url):\n        return any_to_uri(url)\n    return add_http_if_no_scheme(url)", "test_code_list": [{"test_code": "import unittest\ndef create_guess_scheme_t():\n\n    def do_expected(self):\n        url = guess_scheme(args[0])\n        assert url.startswith(args[1]\n            ), f'Wrong scheme guessed: for `{args[0]}` got `{url}`, expected `{args[1]}...`'\n    return do_expected\n\ncreate_guess_scheme_t()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\ndef create_skipped_scheme_t():\n\n    def do_expected(self):\n        raise unittest.SkipTest(args[2])\n        url = guess_scheme(args[0])\n        assert url.startswith(args[1])\n    return do_expected\n\ncreate_skipped_scheme_t()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}], "method_code_mask": "import re\nfrom typing import TYPE_CHECKING\nfrom typing import Iterable\nfrom typing import Optional\nfrom typing import Type\nfrom typing import Union\nfrom typing import cast\nfrom urllib.parse import ParseResult\nfrom urllib.parse import urldefrag\nfrom urllib.parse import urlparse\nfrom urllib.parse import urlunparse\n\n\ndef guess_scheme(url: str) ->str: [MASK]\n"}
{"model_name": "std", "repository": "scrapy", "full_method_name": "add_http_if_no_scheme", "method_path": "../srcdata/Network/scrapy/scrapy/utils/url.py", "response": "import re\nfrom typing import TYPE_CHECKING\nfrom typing import Iterable\nfrom typing import Optional\nfrom typing import Type\nfrom typing import Union\nfrom typing import cast\nfrom urllib.parse import ParseResult\nfrom urllib.parse import urldefrag\nfrom urllib.parse import urlparse\nfrom urllib.parse import urlunparse\ndef add_http_if_no_scheme(url: str) ->str:\n    \"\"\"Add http as the default scheme if it is missing from the url.\"\"\"\n    match = re.match('^\\\\w+://', url, flags=re.I)\n    if not match:\n        parts = urlparse(url)\n        scheme = 'http:' if parts.netloc else 'http://'\n        url = scheme + url\n    return url", "test_code_list": [{"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_add_scheme(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com'),\n            'http://www.example.com')\n    \nAddHttpIfNoScheme().test_add_scheme()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_without_subdomain(self):\n        self.assertEqual(add_http_if_no_scheme('example.com'), 'http://example.com'\n            )\n    \nAddHttpIfNoScheme().test_without_subdomain()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_path(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com/some/page.html'\n            ), 'http://www.example.com/some/page.html')\n    \nAddHttpIfNoScheme().test_path()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_port(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com:80'),\n            'http://www.example.com:80')\n    \nAddHttpIfNoScheme().test_port()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_fragment(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com/some/page#frag'\n            ), 'http://www.example.com/some/page#frag')\n    \nAddHttpIfNoScheme().test_fragment()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_query(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com/do?a=1&b=2&c=3'\n            ), 'http://www.example.com/do?a=1&b=2&c=3')\n    \nAddHttpIfNoScheme().test_query()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_username_password(self):\n        self.assertEqual(add_http_if_no_scheme(\n            'username:password@www.example.com'),\n            'http://username:password@www.example.com')\n    \nAddHttpIfNoScheme().test_username_password()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_complete_url(self):\n        self.assertEqual(add_http_if_no_scheme(\n            'username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag'\n            ),\n            'http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag'\n            )\n    \nAddHttpIfNoScheme().test_complete_url()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_http(self):\n        self.assertEqual(add_http_if_no_scheme('http://www.example.com'),\n            'http://www.example.com')\n    \nAddHttpIfNoScheme().test_preserve_http()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_http_without_subdomain(self):\n        self.assertEqual(add_http_if_no_scheme('http://example.com'),\n            'http://example.com')\n    \nAddHttpIfNoScheme().test_preserve_http_without_subdomain()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_http_path(self):\n        self.assertEqual(add_http_if_no_scheme(\n            'http://www.example.com/some/page.html'),\n            'http://www.example.com/some/page.html')\n    \nAddHttpIfNoScheme().test_preserve_http_path()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_http_port(self):\n        self.assertEqual(add_http_if_no_scheme('http://www.example.com:80'),\n            'http://www.example.com:80')\n    \nAddHttpIfNoScheme().test_preserve_http_port()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_http_fragment(self):\n        self.assertEqual(add_http_if_no_scheme(\n            'http://www.example.com/some/page#frag'),\n            'http://www.example.com/some/page#frag')\n    \nAddHttpIfNoScheme().test_preserve_http_fragment()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_http_query(self):\n        self.assertEqual(add_http_if_no_scheme(\n            'http://www.example.com/do?a=1&b=2&c=3'),\n            'http://www.example.com/do?a=1&b=2&c=3')\n    \nAddHttpIfNoScheme().test_preserve_http_query()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_http_username_password(self):\n        self.assertEqual(add_http_if_no_scheme(\n            'http://username:password@www.example.com'),\n            'http://username:password@www.example.com')\n    \nAddHttpIfNoScheme().test_preserve_http_username_password()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_http_complete_url(self):\n        self.assertEqual(add_http_if_no_scheme(\n            'http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag'\n            ),\n            'http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag'\n            )\n    \nAddHttpIfNoScheme().test_preserve_http_complete_url()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_protocol_relative(self):\n        self.assertEqual(add_http_if_no_scheme('//www.example.com'),\n            'http://www.example.com')\n    \nAddHttpIfNoScheme().test_protocol_relative()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_protocol_relative_without_subdomain(self):\n        self.assertEqual(add_http_if_no_scheme('//example.com'),\n            'http://example.com')\n    \nAddHttpIfNoScheme().test_protocol_relative_without_subdomain()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_protocol_relative_path(self):\n        self.assertEqual(add_http_if_no_scheme(\n            '//www.example.com/some/page.html'),\n            'http://www.example.com/some/page.html')\n    \nAddHttpIfNoScheme().test_protocol_relative_path()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_protocol_relative_port(self):\n        self.assertEqual(add_http_if_no_scheme('//www.example.com:80'),\n            'http://www.example.com:80')\n    \nAddHttpIfNoScheme().test_protocol_relative_port()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_protocol_relative_fragment(self):\n        self.assertEqual(add_http_if_no_scheme(\n            '//www.example.com/some/page#frag'),\n            'http://www.example.com/some/page#frag')\n    \nAddHttpIfNoScheme().test_protocol_relative_fragment()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_protocol_relative_query(self):\n        self.assertEqual(add_http_if_no_scheme(\n            '//www.example.com/do?a=1&b=2&c=3'),\n            'http://www.example.com/do?a=1&b=2&c=3')\n    \nAddHttpIfNoScheme().test_protocol_relative_query()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_protocol_relative_username_password(self):\n        self.assertEqual(add_http_if_no_scheme(\n            '//username:password@www.example.com'),\n            'http://username:password@www.example.com')\n    \nAddHttpIfNoScheme().test_protocol_relative_username_password()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_protocol_relative_complete_url(self):\n        self.assertEqual(add_http_if_no_scheme(\n            '//username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag'\n            ),\n            'http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag'\n            )\n    \nAddHttpIfNoScheme().test_protocol_relative_complete_url()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_https(self):\n        self.assertEqual(add_http_if_no_scheme('https://www.example.com'),\n            'https://www.example.com')\n    \nAddHttpIfNoScheme().test_preserve_https()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}, {"test_code": "import unittest\n\nclass AddHttpIfNoScheme(unittest.TestCase):\n    def test_preserve_ftp(self):\n        self.assertEqual(add_http_if_no_scheme('ftp://www.example.com'),\n            'ftp://www.example.com')\n    \nAddHttpIfNoScheme().test_preserve_ftp()\n", "code_start": "", "test_path": "../srcdata/Network/scrapy/tests/test_utils_url.py"}], "method_code_mask": "import re\nfrom typing import TYPE_CHECKING\nfrom typing import Iterable\nfrom typing import Optional\nfrom typing import Type\nfrom typing import Union\nfrom typing import cast\nfrom urllib.parse import ParseResult\nfrom urllib.parse import urldefrag\nfrom urllib.parse import urlparse\nfrom urllib.parse import urlunparse\n\n\ndef add_http_if_no_scheme(url: str) ->str: [MASK]\n"}

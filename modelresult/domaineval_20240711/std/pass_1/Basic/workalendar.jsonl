{"model_name": "std", "repository": "workalendar", "full_method_name": "daterange", "method_path": "../srcdata/Basic/workalendar/workalendar/core.py", "response": "from copy import copy\nimport warnings\nfrom calendar import monthrange\nfrom datetime import date\nfrom datetime import timedelta\nfrom datetime import datetime\nfrom pathlib import Path\nimport sys\nfrom dateutil import easter\ndef daterange(start, end):\n    \"\"\"\n    Yield days from ``start`` to ``end`` including both of them.\n\n    If start and end are in opposite order, they'll be swapped silently.\n    \"\"\"\n    if start > end:\n        end, start = start, end\n    day = start\n    while day <= end:\n        yield day\n        day += timedelta(days=1)", "test_code_list": [{"test_code": "from unittest.mock import patch\nfrom datetime import date\nfrom datetime import datetime\nfrom unittest import TestCase\nimport pandas\ndef test_daterange_start_end():\n    start = date(2020, 4, 1)\n    end = date(2020, 4, 10)\n    date_list = list(daterange(start, end))\n    assert date_list == [date(2020, 4, 1), date(2020, 4, 2), date(2020, 4, \n        3), date(2020, 4, 4), date(2020, 4, 5), date(2020, 4, 6), date(2020,\n        4, 7), date(2020, 4, 8), date(2020, 4, 9), date(2020, 4, 10)]\n\ntest_daterange_start_end()\n", "code_start": "", "test_path": "../srcdata/Basic/workalendar/workalendar/tests/test_core.py"}, {"test_code": "from unittest.mock import patch\nfrom datetime import date\nfrom datetime import datetime\nfrom unittest import TestCase\nimport pandas\ndef test_daterange_end_start():\n    end = date(2020, 4, 1)\n    start = date(2020, 4, 10)\n    date_list = list(daterange(start, end))\n    assert date_list == [date(2020, 4, 1), date(2020, 4, 2), date(2020, 4, \n        3), date(2020, 4, 4), date(2020, 4, 5), date(2020, 4, 6), date(2020,\n        4, 7), date(2020, 4, 8), date(2020, 4, 9), date(2020, 4, 10)]\n\ntest_daterange_end_start()\n", "code_start": "", "test_path": "../srcdata/Basic/workalendar/workalendar/tests/test_core.py"}, {"test_code": "from unittest.mock import patch\nfrom datetime import date\nfrom datetime import datetime\nfrom unittest import TestCase\nimport pandas\ndef test_daterange_same_date():\n    start = end = date(2020, 4, 1)\n    date_list = list(daterange(start, end))\n    assert date_list == [date(2020, 4, 1)]\n\ntest_daterange_same_date()\n", "code_start": "", "test_path": "../srcdata/Basic/workalendar/workalendar/tests/test_core.py"}], "method_code_mask": "from copy import copy\nimport warnings\nfrom calendar import monthrange\nfrom datetime import date\nfrom datetime import timedelta\nfrom datetime import datetime\nfrom pathlib import Path\nimport sys\nfrom dateutil import easter\n\n\ndef daterange(start, end): [MASK]\n"}

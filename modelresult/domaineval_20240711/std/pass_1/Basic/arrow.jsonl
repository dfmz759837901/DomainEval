{"model_name": "std", "repository": "arrow", "full_method_name": "is_timestamp", "method_path": "../srcdata/Basic/arrow/arrow/util.py", "response": "import datetime\nfrom typing import Any\nfrom typing import Optional\nfrom typing import cast\nfrom dateutil.rrule import WEEKLY\nfrom dateutil.rrule import rrule\nfrom arrow.constants import MAX_ORDINAL\nfrom arrow.constants import MAX_TIMESTAMP\nfrom arrow.constants import MAX_TIMESTAMP_MS\nfrom arrow.constants import MAX_TIMESTAMP_US\nfrom arrow.constants import MIN_ORDINAL\ndef is_timestamp(value: Any) ->bool:\n    \"\"\"Check if value is a valid timestamp.\"\"\"\n    if isinstance(value, bool):\n        return False\n    if not isinstance(value, (int, float, str)):\n        return False\n    try:\n        float(value)\n        return True\n    except ValueError:\n        return False", "test_code_list": [{"test_code": "import time\nfrom datetime import datetime\nimport pytest\nfrom arrow import util\n\nclass TestUtil():\n    def test_is_timestamp(self):\n        timestamp_float = time.time()\n        timestamp_int = int(timestamp_float)\n        assert is_timestamp(timestamp_int)\n        assert is_timestamp(timestamp_float)\n        assert is_timestamp(str(timestamp_int))\n        assert is_timestamp(str(timestamp_float))\n        assert not is_timestamp(True)\n        assert not is_timestamp(False)\n    \n    \n        class InvalidTimestamp:\n            pass\n        assert not is_timestamp(InvalidTimestamp())\n        full_datetime = '2019-06-23T13:12:42'\n        assert not is_timestamp(full_datetime)\n    \nTestUtil().test_is_timestamp()\n", "code_start": "", "test_path": "../srcdata/Basic/arrow/tests/test_util.py"}], "method_code_mask": "import datetime\nfrom typing import Any\nfrom typing import Optional\nfrom typing import cast\nfrom dateutil.rrule import WEEKLY\nfrom dateutil.rrule import rrule\nfrom arrow.constants import MAX_ORDINAL\nfrom arrow.constants import MAX_TIMESTAMP\nfrom arrow.constants import MAX_TIMESTAMP_MS\nfrom arrow.constants import MAX_TIMESTAMP_US\nfrom arrow.constants import MIN_ORDINAL\n\n\ndef is_timestamp(value: Any) ->bool: [MASK]\n"}
{"model_name": "std", "repository": "arrow", "full_method_name": "normalize_timestamp", "method_path": "../srcdata/Basic/arrow/arrow/util.py", "response": "import datetime\nfrom typing import Any\nfrom typing import Optional\nfrom typing import cast\nfrom dateutil.rrule import WEEKLY\nfrom dateutil.rrule import rrule\nfrom arrow.constants import MAX_ORDINAL\nfrom arrow.constants import MAX_TIMESTAMP\nfrom arrow.constants import MAX_TIMESTAMP_MS\nfrom arrow.constants import MAX_TIMESTAMP_US\nfrom arrow.constants import MIN_ORDINAL\ndef normalize_timestamp(timestamp: float) ->float:\n    \"\"\"Normalize millisecond and microsecond timestamps into normal timestamps.\"\"\"\n    if timestamp > MAX_TIMESTAMP:\n        if timestamp < MAX_TIMESTAMP_MS:\n            timestamp /= 1000\n        elif timestamp < MAX_TIMESTAMP_US:\n            timestamp /= 1000000\n        else:\n            raise ValueError(\n                f'The specified timestamp {timestamp!r} is too large.')\n    return timestamp", "test_code_list": [{"test_code": "import time\nfrom datetime import datetime\nimport pytest\nfrom arrow import util\n\nclass TestUtil():\n    def test_normalize_timestamp(self):\n        timestamp = 1591161115.194556\n        millisecond_timestamp = 1591161115194\n        microsecond_timestamp = 1591161115194556\n        assert normalize_timestamp(timestamp) == timestamp\n        assert normalize_timestamp(millisecond_timestamp) == 1591161115.194\n        assert normalize_timestamp(microsecond_timestamp) == 1591161115.194556\n        with pytest.raises(ValueError):\n            normalize_timestamp(3e+17)\n    \nTestUtil().test_normalize_timestamp()\n", "code_start": "", "test_path": "../srcdata/Basic/arrow/tests/test_util.py"}], "method_code_mask": "import datetime\nfrom typing import Any\nfrom typing import Optional\nfrom typing import cast\nfrom dateutil.rrule import WEEKLY\nfrom dateutil.rrule import rrule\nfrom arrow.constants import MAX_ORDINAL\nfrom arrow.constants import MAX_TIMESTAMP\nfrom arrow.constants import MAX_TIMESTAMP_MS\nfrom arrow.constants import MAX_TIMESTAMP_US\nfrom arrow.constants import MIN_ORDINAL\n\n\ndef normalize_timestamp(timestamp: float) ->float: [MASK]\n"}

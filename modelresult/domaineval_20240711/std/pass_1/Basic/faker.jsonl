{"model_name": "std", "repository": "faker", "full_method_name": "luhn_checksum", "method_path": "../srcdata/Basic/faker/faker/utils/checksums.py", "response": "from typing import List\ndef luhn_checksum(number: float) ->int:\n\n    def digits_of(n: float) ->List[int]:\n        return [int(d) for d in str(n)]\n    digits = digits_of(number)\n    odd_digits = digits[-1::-2]\n    even_digits = digits[-2::-2]\n    checksum = 0\n    checksum += sum(odd_digits)\n    for d in even_digits:\n        checksum += sum(digits_of(d * 2))\n    return checksum % 10", "test_code_list": [{"test_code": "import json\nimport unittest\nfrom importlib import import_module\nfrom pathlib import Path\nimport faker\nfrom faker.config import META_PROVIDERS_MODULES\nfrom faker.config import PROVIDERS\nfrom faker.generator import random\nfrom faker.typing import OrderedDictType\nfrom faker.utils.checksums import calculate_luhn\nfrom faker.utils.checksums import luhn_checksum\nfrom faker.utils.datasets import add_ordereddicts\nfrom faker.utils.distribution import choices_distribution\nfrom faker.utils.distribution import choices_distribution_unique\nfrom faker.utils.loading import find_available_locales\nfrom faker.utils.loading import find_available_providers\nfrom faker.utils.loading import get_path\n\nclass UtilsTestCase(unittest.TestCase):\n\tdef test_valid_luhn(self):\n\t    \"\"\"\n\t        Tests if the number has a valid check digit\n\t        Example from wiki https://en.wikipedia.org/wiki/Luhn_algorithm\n\t        \"\"\"\n\t    assert luhn_checksum('79927398713') == 0\n\t\nUtilsTestCase().test_valid_luhn()\n", "code_start": "", "test_path": "../srcdata/Basic/faker/tests/utils/test_utils.py"}, {"test_code": "import json\nimport unittest\nfrom importlib import import_module\nfrom pathlib import Path\nimport faker\nfrom faker.config import META_PROVIDERS_MODULES\nfrom faker.config import PROVIDERS\nfrom faker.generator import random\nfrom faker.typing import OrderedDictType\nfrom faker.utils.checksums import calculate_luhn\nfrom faker.utils.checksums import luhn_checksum\nfrom faker.utils.datasets import add_ordereddicts\nfrom faker.utils.distribution import choices_distribution\nfrom faker.utils.distribution import choices_distribution_unique\nfrom faker.utils.loading import find_available_locales\nfrom faker.utils.loading import find_available_providers\nfrom faker.utils.loading import get_path\n\nclass UtilsTestCase(unittest.TestCase):\n\tdef test_invalid_luhn(self):\n\t    \"\"\"\n\t        Tests a number with an invalid check digit\n\t        Example from wiki https://en.wikipedia.org/wiki/Luhn_algorithm\n\t        \"\"\"\n\t    assert luhn_checksum('79927398714') != 0\n\t\nUtilsTestCase().test_invalid_luhn()\n", "code_start": "", "test_path": "../srcdata/Basic/faker/tests/utils/test_utils.py"}], "method_code_mask": "from typing import List\n\n\ndef luhn_checksum(number: float) ->int: [MASK]\n"}
{"model_name": "std", "repository": "faker", "full_method_name": "get_path", "method_path": "../srcdata/Basic/faker/faker/utils/loading.py", "response": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\ndef get_path(module: ModuleType) ->str:\n    if getattr(sys, 'frozen', False):\n        if getattr(sys, '_MEIPASS', False):\n            lib_dir = Path(getattr(sys, '_MEIPASS'))\n        else:\n            lib_dir = Path(sys.executable).parent / 'lib'\n        path = lib_dir.joinpath(*module.__package__.split('.'))\n    elif module.__file__ is not None:\n        path = Path(module.__file__).parent\n    else:\n        raise RuntimeError(f\"Can't find path from module `{module}.\")\n    return str(path)", "test_code_list": [{"test_code": "import json\nimport unittest\nfrom importlib import import_module\nfrom pathlib import Path\nimport faker\nfrom faker.config import META_PROVIDERS_MODULES\nfrom faker.config import PROVIDERS\nfrom faker.generator import random\nfrom faker.typing import OrderedDictType\nfrom faker.utils.checksums import calculate_luhn\nfrom faker.utils.checksums import luhn_checksum\nfrom faker.utils.datasets import add_ordereddicts\nfrom faker.utils.distribution import choices_distribution\nfrom faker.utils.distribution import choices_distribution_unique\nfrom faker.utils.loading import find_available_locales\nfrom faker.utils.loading import find_available_providers\nfrom faker.utils.loading import get_path\n\nclass UtilsTestCase(unittest.TestCase):\n\tdef test_get_path(self):\n\t    result = get_path(faker)\n\t    assert isinstance(result, str)\n\t\nUtilsTestCase().test_get_path()\n", "code_start": "", "test_path": "../srcdata/Basic/faker/tests/utils/test_utils.py"}], "method_code_mask": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\n\n\ndef get_path(module: ModuleType) ->str: [MASK]\n"}
{"model_name": "std", "repository": "faker", "full_method_name": "find_available_locales", "method_path": "../srcdata/Basic/faker/faker/utils/loading.py", "response": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\ndef find_available_locales(providers: List[str]) ->List[str]:\n    available_locales = set()\n    for provider_path in providers:\n        provider_module = import_module(provider_path)\n        if getattr(provider_module, 'localized', False):\n            langs = list_module(provider_module)\n            available_locales.update(langs)\n    return sorted(available_locales)", "test_code_list": [{"test_code": "import json\nimport unittest\nfrom importlib import import_module\nfrom pathlib import Path\nimport faker\nfrom faker.config import META_PROVIDERS_MODULES\nfrom faker.config import PROVIDERS\nfrom faker.generator import random\nfrom faker.typing import OrderedDictType\nfrom faker.utils.checksums import calculate_luhn\nfrom faker.utils.checksums import luhn_checksum\nfrom faker.utils.datasets import add_ordereddicts\nfrom faker.utils.distribution import choices_distribution\nfrom faker.utils.distribution import choices_distribution_unique\nfrom faker.utils.loading import find_available_locales\nfrom faker.utils.loading import find_available_providers\nfrom faker.utils.loading import get_path\n\nclass UtilsTestCase(unittest.TestCase):\n\tdef test_find_available_locales(self):\n\t    result = find_available_locales(PROVIDERS)\n\t    assert len(result) != 0\n\t\nUtilsTestCase().test_find_available_locales()\n", "code_start": "", "test_path": "../srcdata/Basic/faker/tests/utils/test_utils.py"}], "method_code_mask": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\n\n\ndef find_available_locales(providers: List[str]) ->List[str]: [MASK]\n"}
{"model_name": "std", "repository": "faker", "full_method_name": "find_available_providers", "method_path": "../srcdata/Basic/faker/faker/utils/loading.py", "response": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\ndef find_available_providers(modules: List[ModuleType]) ->List[str]:\n    available_providers = set()\n    for providers_mod in modules:\n        if providers_mod.__package__:\n            providers = ['.'.join([providers_mod.__package__, mod]) for mod in\n                list_module(providers_mod) if mod != '__pycache__']\n            available_providers.update(providers)\n    return sorted(available_providers)", "test_code_list": [{"test_code": "import json\nimport unittest\nfrom importlib import import_module\nfrom pathlib import Path\nimport faker\nfrom faker.config import META_PROVIDERS_MODULES\nfrom faker.config import PROVIDERS\nfrom faker.generator import random\nfrom faker.typing import OrderedDictType\nfrom faker.utils.checksums import calculate_luhn\nfrom faker.utils.checksums import luhn_checksum\nfrom faker.utils.datasets import add_ordereddicts\nfrom faker.utils.distribution import choices_distribution\nfrom faker.utils.distribution import choices_distribution_unique\nfrom faker.utils.loading import find_available_locales\nfrom faker.utils.loading import find_available_providers\nfrom faker.utils.loading import get_path\n\nclass UtilsTestCase(unittest.TestCase):\n\tdef test_find_available_providers(self):\n\t    modules = [import_module(path) for path in META_PROVIDERS_MODULES]\n\t    providers = find_available_providers(modules)\n\t    expected_providers = list(map(str, ['faker.providers.address',\n\t        'faker.providers.automotive', 'faker.providers.bank',\n\t        'faker.providers.barcode', 'faker.providers.color',\n\t        'faker.providers.company', 'faker.providers.credit_card',\n\t        'faker.providers.currency', 'faker.providers.date_time',\n\t        'faker.providers.emoji', 'faker.providers.file',\n\t        'faker.providers.geo', 'faker.providers.internet',\n\t        'faker.providers.isbn', 'faker.providers.job',\n\t        'faker.providers.lorem', 'faker.providers.misc',\n\t        'faker.providers.passport', 'faker.providers.person',\n\t        'faker.providers.phone_number', 'faker.providers.profile',\n\t        'faker.providers.python', 'faker.providers.sbn',\n\t        'faker.providers.ssn', 'faker.providers.user_agent']))\n\t    assert providers == expected_providers\n\t\nUtilsTestCase().test_find_available_providers()\n", "code_start": "", "test_path": "../srcdata/Basic/faker/tests/utils/test_utils.py"}], "method_code_mask": "import pkgutil\nimport sys\nfrom importlib import import_module\nfrom pathlib import Path\nfrom types import ModuleType\nfrom typing import List\n\n\ndef find_available_providers(modules: List[ModuleType]) ->List[str]: [MASK]\n"}
{"model_name": "std", "repository": "faker", "full_method_name": "calculate_luhn", "method_path": "../srcdata/Basic/faker/faker/utils/checksums.py", "response": "from typing import List\ndef calculate_luhn(partial_number: float) ->int:\n    \"\"\"\n    Generates the Checksum using Luhn's algorithm\n    \"\"\"\n    check_digit = luhn_checksum(int(partial_number) * 10)\n    return check_digit if check_digit == 0 else 10 - check_digit", "test_code_list": [{"test_code": "import json\nimport unittest\nfrom importlib import import_module\nfrom pathlib import Path\nimport faker\nfrom faker.config import META_PROVIDERS_MODULES\nfrom faker.config import PROVIDERS\nfrom faker.generator import random\nfrom faker.typing import OrderedDictType\nfrom faker.utils.checksums import calculate_luhn\nfrom faker.utils.checksums import luhn_checksum\nfrom faker.utils.datasets import add_ordereddicts\nfrom faker.utils.distribution import choices_distribution\nfrom faker.utils.distribution import choices_distribution_unique\nfrom faker.utils.loading import find_available_locales\nfrom faker.utils.loading import find_available_providers\nfrom faker.utils.loading import get_path\n\nclass UtilsTestCase(unittest.TestCase):\n\tdef test_luhn_checksum(self):\n\t    \"\"\"\n\t        Tests if a valid checksum is generated\n\t        Example from wiki: https://en.wikipedia.org/wiki/Luhn_algorithm\n\t        \"\"\"\n\t    check_digit = calculate_luhn('7992739871')\n\t    assert check_digit == 3\n\t\nUtilsTestCase().test_luhn_checksum()\n", "code_start": "", "test_path": "../srcdata/Basic/faker/tests/utils/test_utils.py"}], "method_code_mask": "from typing import List\n\n\ndef calculate_luhn(partial_number: float) ->int: [MASK]\n"}
{"model_name": "std", "repository": "faker", "full_method_name": "add_ordereddicts", "method_path": "../srcdata/Basic/faker/faker/utils/datasets.py", "response": "from itertools import chain\nfrom faker.typing import OrderedDictType\ndef add_ordereddicts(*odicts: OrderedDictType) ->OrderedDictType:\n    items = [odict.items() for odict in odicts]\n    return OrderedDictType(chain(*items))", "test_code_list": [{"test_code": "import json\nimport unittest\nfrom importlib import import_module\nfrom pathlib import Path\nimport faker\nfrom faker.config import META_PROVIDERS_MODULES\nfrom faker.config import PROVIDERS\nfrom faker.generator import random\nfrom faker.typing import OrderedDictType\nfrom faker.utils.checksums import calculate_luhn\nfrom faker.utils.checksums import luhn_checksum\nfrom faker.utils.datasets import add_ordereddicts\nfrom faker.utils.distribution import choices_distribution\nfrom faker.utils.distribution import choices_distribution_unique\nfrom faker.utils.loading import find_available_locales\nfrom faker.utils.loading import find_available_providers\nfrom faker.utils.loading import get_path\n\nclass UtilsTestCase(unittest.TestCase):\n\tdef test_add_ordereddicts(self):\n\t    d1 = OrderedDictType([('a', 1), ('b', 2)])\n\t    d2 = OrderedDictType([('c', 3), ('d', 4)])\n\t    result = add_ordereddicts(d1, d2)\n\t    assert result == OrderedDictType([('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n\t\nUtilsTestCase().test_add_ordereddicts()\n", "code_start": "", "test_path": "../srcdata/Basic/faker/tests/utils/test_utils.py"}], "method_code_mask": "from itertools import chain\nfrom faker.typing import OrderedDictType\n\n\ndef add_ordereddicts(*odicts: OrderedDictType) ->OrderedDictType: [MASK]\n"}

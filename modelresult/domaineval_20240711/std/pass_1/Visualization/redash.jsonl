{"model_name": "std", "repository": "redash", "full_method_name": "get_formatted_value", "method_path": "../srcdata/Visualization/redash/redash/query_runner/google_search_console.py", "response": "import logging\nfrom base64 import b64decode\nfrom datetime import datetime\nimport google.auth\nfrom apiclient.discovery import build\nfrom apiclient.errors import HttpError\nfrom google.oauth2.service_account import Credentials\ndef get_formatted_value(column_type, value):\n    if column_type == 'number':\n        value = round(value, 2)\n    elif column_type == TYPE_DATE:\n        value = datetime.strptime(value, '%Y-%m-%d')\n    elif column_type == TYPE_DATETIME:\n        if len(value) == 10:\n            value = datetime.strptime(value, '%Y%m%d%H')\n        elif len(value) == 12:\n            value = datetime.strptime(value, '%Y%m%d%H%M')\n        else:\n            raise Exception(\"Unknown date/time format in results: '{}'\".\n                format(value))\n    return value", "test_code_list": [{"test_code": "import datetime\nfrom unittest import TestCase\n\nclass TestFormatColumnValue(TestCase):\n    def test_number_value(self):\n        column_name = 'number'\n        column_value = 25.4145\n        value = get_formatted_value(column_name, column_value)\n        self.assertEqual(value, 25.41)\n    \nTestFormatColumnValue().test_number_value()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_google_search_console.py"}], "method_code_mask": "import logging\nfrom base64 import b64decode\nfrom datetime import datetime\nimport google.auth\nfrom apiclient.discovery import build\nfrom apiclient.errors import HttpError\nfrom google.oauth2.service_account import Credentials\n\n\ndef get_formatted_value(column_type, value): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "parse_response", "method_path": "../srcdata/Visualization/redash/redash/query_runner/drill.py", "response": "import logging\nimport os\nimport re\nfrom dateutil import parser\ndef parse_response(data):\n    cols = data['columns']\n    rows = data['rows']\n    if len(cols) == 0:\n        return {'columns': [], 'rows': []}\n    first_row = rows[0]\n    columns = []\n    types = {}\n    for c in cols:\n        columns.append({'name': c, 'type': guess_type(first_row[c]),\n            'friendly_name': c})\n    for col in columns:\n        types[col['name']] = col['type']\n    for row in rows:\n        for key, value in row.items():\n            row[key] = convert_type(value, types[key])\n    return {'columns': columns, 'rows': rows}", "test_code_list": [{"test_code": "import datetime\nfrom unittest import TestCase\nempty_response = {'columns': [], 'rows': [{}]}\nclass TestParseResponse(TestCase):\n    def test_parse_empty_reponse(self):\n        parsed = parse_response(empty_response)\n        self.assertIsInstance(parsed, dict)\n        self.assertIsNotNone(parsed['columns'])\n        self.assertIsNotNone(parsed['rows'])\n        self.assertEqual(len(parsed['columns']), 0)\n        self.assertEqual(len(parsed['rows']), 0)\nTestParseResponse().test_parse_empty_reponse()", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_drill.py"}], "method_code_mask": "import logging\nimport os\nimport re\nfrom dateutil import parser\n\n\ndef parse_response(data): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "build_schema", "method_path": "../srcdata/Visualization/redash/redash/query_runner/pg.py", "response": "import logging\nimport os\nimport select\nfrom base64 import b64decode\nfrom tempfile import NamedTemporaryFile\nfrom uuid import uuid4\nimport boto3\ndef full_table_name(schema, name):\n    if '.' in name:\n        name = '\"{}\"'.format(name)\n    return '{}.{}'.format(schema, name)\ndef build_schema(query_result, schema):\n    table_names = set(map(lambda r: full_table_name(r['table_schema'], r[\n        'table_name']), query_result['rows']))\n    for row in query_result['rows']:\n        if row['table_schema'] != 'public':\n            table_name = full_table_name(row['table_schema'], row['table_name']\n                )\n        elif row['table_name'] in table_names:\n            table_name = full_table_name(row['table_schema'], row['table_name']\n                )\n        else:\n            table_name = row['table_name']\n        if table_name not in schema:\n            schema[table_name] = {'name': table_name, 'columns': []}\n        column = row['column_name']\n        if row.get('data_type') is not None:\n            column = {'name': row['column_name'], 'type': row['data_type']}\n        schema[table_name]['columns'].append(column)", "test_code_list": [{"test_code": "from unittest import TestCase\n\nclass TestBuildSchema(TestCase):\n    def test_handles_dups_between_public_and_other_schemas(self):\n        results = {'rows': [{'table_schema': 'public', 'table_name':\n            'main.users', 'column_name': 'id'}, {'table_schema': 'main',\n            'table_name': 'users', 'column_name': 'id'}, {'table_schema':\n            'main', 'table_name': 'users', 'column_name': 'name'}]}\n        schema = {}\n        build_schema(results, schema)\n        self.assertIn('main.users', schema.keys())\n        self.assertListEqual(schema['main.users']['columns'], ['id', 'name'])\n        self.assertIn('public.\"main.users\"', schema.keys())\n        self.assertListEqual(schema['public.\"main.users\"']['columns'], ['id'])\n    \nTestBuildSchema().test_handles_dups_between_public_and_other_schemas()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_pg.py"}], "method_code_mask": "import logging\nimport os\nimport select\nfrom base64 import b64decode\nfrom tempfile import NamedTemporaryFile\nfrom uuid import uuid4\nimport boto3\n\n\ndef full_table_name(schema, name):\n    if '.' in name:\n        name = '\"{}\"'.format(name)\n    return '{}.{}'.format(schema, name)\n\n\ndef build_schema(query_result, schema): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "extract_query_ids", "method_path": "../srcdata/Visualization/redash/redash/query_runner/query_results.py", "response": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\ndef extract_query_ids(query):\n    queries = re.findall('(?:join|from)\\\\s+query_(\\\\d+)', query, re.IGNORECASE)\n    return [int(q) for q in queries]", "test_code_list": [{"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractQueryIds(TestCase):\n    def test_works_with_simple_query(self):\n        query = 'SELECT 1'\n        self.assertEqual([], extract_query_ids(query))\n    \nTestExtractQueryIds().test_works_with_simple_query()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractQueryIds(TestCase):\n    def test_finds_queries_to_load(self):\n        query = 'SELECT * FROM query_123'\n        self.assertEqual([123], extract_query_ids(query))\n    \nTestExtractQueryIds().test_finds_queries_to_load()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractQueryIds(TestCase):\n    def test_finds_queries_in_joins(self):\n        query = 'SELECT * FROM query_123 JOIN query_4566'\n        self.assertEqual([123, 4566], extract_query_ids(query))\n    \nTestExtractQueryIds().test_finds_queries_in_joins()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractQueryIds(TestCase):\n    def test_finds_queries_with_whitespace_characters(self):\n        query = (\n            'SELECT * FROM    query_123 a JOIN\\tquery_4566 b ON a.id=b.parent_id JOIN\\r\\nquery_78 c ON b.id=c.parent_id'\n            )\n        self.assertEqual([123, 4566, 78], extract_query_ids(query))\n    \nTestExtractQueryIds().test_finds_queries_with_whitespace_characters()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}], "method_code_mask": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\n\n\ndef extract_query_ids(query): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "create_table", "method_path": "../srcdata/Visualization/redash/redash/query_runner/query_results.py", "response": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\ndef flatten(value):\n    if isinstance(value, (list, dict)):\n        return json_dumps(value)\n    elif isinstance(value, decimal.Decimal):\n        return float(value)\n    elif isinstance(value, datetime.timedelta):\n        return str(value)\n    else:\n        return value\nlogger = logging.getLogger(__name__)\ndef fix_column_name(name):\n    return '\"{}\"'.format(re.sub('[:.\"\\\\s]', '_', name, flags=re.UNICODE))\ndef create_table(connection, table_name, query_results):\n    try:\n        columns = [column['name'] for column in query_results['columns']]\n        safe_columns = [fix_column_name(column) for column in columns]\n        column_list = ', '.join(safe_columns)\n        create_table = 'CREATE TABLE {table_name} ({column_list})'.format(\n            table_name=table_name, column_list=column_list)\n        logger.debug('CREATE TABLE query: %s', create_table)\n        connection.execute(create_table)\n    except sqlite3.OperationalError as exc:\n        raise CreateTableError('Error creating table {}: {}'.format(\n            table_name, str(exc)))\n    insert_template = (\n        'insert into {table_name} ({column_list}) values ({place_holders})'\n        .format(table_name=table_name, column_list=column_list,\n        place_holders=','.join(['?'] * len(columns))))\n    for row in query_results['rows']:\n        values = [flatten(row.get(column)) for column in columns]\n        connection.execute(insert_template, values)", "test_code_list": [{"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestCreateTable(TestCase):\n    def test_loads_results(self):\n        connection = sqlite3.connect(':memory:')\n        rows = [{'test1': 1, 'test2': 'test'}, {'test1': 2, 'test2': 'test2'}]\n        results = {'columns': [{'name': 'test1'}, {'name': 'test2'}], 'rows': rows}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        self.assertEqual(len(list(connection.execute('SELECT * FROM query_123')\n            )), 2)\n    \nTestCreateTable().test_loads_results()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}], "method_code_mask": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\n\n\ndef flatten(value):\n    if isinstance(value, (list, dict)):\n        return json_dumps(value)\n    elif isinstance(value, decimal.Decimal):\n        return float(value)\n    elif isinstance(value, datetime.timedelta):\n        return str(value)\n    else:\n        return value\n\n\nlogger = logging.getLogger(__name__)\n\n\ndef fix_column_name(name):\n    return '\"{}\"'.format(re.sub('[:.\"\\\\s]', '_', name, flags=re.UNICODE))\n\n\ndef create_table(connection, table_name, query_results): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "extract_cached_query_ids", "method_path": "../srcdata/Visualization/redash/redash/query_runner/query_results.py", "response": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\ndef extract_cached_query_ids(query):\n    queries = re.findall('(?:join|from)\\\\s+cached_query_(\\\\d+)', query, re.\n        IGNORECASE)\n    return [int(q) for q in queries]", "test_code_list": [{"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractCachedQueryIds(TestCase):\n    def test_works_with_simple_query(self):\n        query = 'SELECT 1'\n        self.assertEqual([], extract_cached_query_ids(query))\n    \nTestExtractCachedQueryIds().test_works_with_simple_query()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractCachedQueryIds(TestCase):\n    def test_finds_queries_to_load(self):\n        query = 'SELECT * FROM cached_query_123'\n        self.assertEqual([123], extract_cached_query_ids(query))\n    \nTestExtractCachedQueryIds().test_finds_queries_to_load()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractCachedQueryIds(TestCase):\n    def test_finds_queries_in_joins(self):\n        query = 'SELECT * FROM cached_query_123 JOIN cached_query_4566'\n        self.assertEqual([123, 4566], extract_cached_query_ids(query))\n    \nTestExtractCachedQueryIds().test_finds_queries_in_joins()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractCachedQueryIds(TestCase):\n    def test_finds_queries_with_whitespace_characters(self):\n        query = (\n            'SELECT * FROM    cached_query_123 a JOIN\\tcached_query_4566 b ON a.id=b.parent_id JOIN\\r\\ncached_query_78 c ON b.id=c.parent_id'\n            )\n        self.assertEqual([123, 4566, 78], extract_cached_query_ids(query))\n    \nTestExtractCachedQueryIds().test_finds_queries_with_whitespace_characters()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}], "method_code_mask": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\n\n\ndef extract_cached_query_ids(query): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "extract_query_params", "method_path": "../srcdata/Visualization/redash/redash/query_runner/query_results.py", "response": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\ndef extract_query_params(query):\n    return re.findall('(?:join|from)\\\\s+param_query_(\\\\d+)_{([^}]+)}',\n        query, re.IGNORECASE)", "test_code_list": [{"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractParamQueryIds(TestCase):\n    def test_works_with_simple_query(self):\n        query = 'SELECT 1'\n        self.assertEqual([], extract_query_params(query))\n    \nTestExtractParamQueryIds().test_works_with_simple_query()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractParamQueryIds(TestCase):\n    def test_ignores_non_param_queries(self):\n        query = 'SELECT * FROM query_123'\n        self.assertEqual([], extract_query_params(query))\n    \nTestExtractParamQueryIds().test_ignores_non_param_queries()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractParamQueryIds(TestCase):\n    def test_ignores_cached_queries_to_load(self):\n        query = 'SELECT * FROM cached_query_123'\n        self.assertEqual([], extract_query_params(query))\n    \nTestExtractParamQueryIds().test_ignores_cached_queries_to_load()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractParamQueryIds(TestCase):\n    def test_finds_queries_to_load(self):\n        query = 'SELECT * FROM param_query_123_{token=test}'\n        self.assertEqual([('123', 'token=test')], extract_query_params(query))\n    \nTestExtractParamQueryIds().test_finds_queries_to_load()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}, {"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestExtractParamQueryIds(TestCase):\n    def test_finds_queries_in_joins(self):\n        query = (\n            'SELECT * FROM param_query_123_{token1=test1} JOIN param_query_456_{token2=test2}'\n            )\n        self.assertEqual([('123', 'token1=test1'), ('456', 'token2=test2')],\n            extract_query_params(query))\n    \nTestExtractParamQueryIds().test_finds_queries_in_joins()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}], "method_code_mask": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\n\n\ndef extract_query_params(query): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "prepare_parameterized_query", "method_path": "../srcdata/Visualization/redash/redash/query_runner/query_results.py", "response": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\ndef prepare_parameterized_query(query, query_params):\n    for params in query_params:\n        table_hash = hashlib.md5('query_{query}_{hash}'.format(query=params\n            [0], hash=params[1]).encode(), usedforsecurity=False).hexdigest()\n        key = 'param_query_{query_id}_{{{param_string}}}'.format(query_id=\n            params[0], param_string=params[1])\n        value = 'query_{query_id}_{param_hash}'.format(query_id=params[0],\n            param_hash=table_hash)\n        query = query.replace(key, value)\n    return query", "test_code_list": [{"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestPrepareParameterizedQuery(TestCase):\n    def test_param_query_replacement(self):\n        result = prepare_parameterized_query(\n            'SELECT * FROM param_query_123_{token=test}', [('123', 'token=test')])\n        self.assertEqual('SELECT * FROM query_123_1c5f1acad40f99b968836273d74baa89'\n            , result)\n    \nTestPrepareParameterizedQuery().test_param_query_replacement()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}], "method_code_mask": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\n\n\ndef prepare_parameterized_query(query, query_params): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "replace_query_parameters", "method_path": "../srcdata/Visualization/redash/redash/query_runner/query_results.py", "response": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\ndef replace_query_parameters(query_text, params):\n    qs = parse_qs(params)\n    for key, value in qs.items():\n        query_text = query_text.replace('{{{{{my_key}}}}}'.format(my_key=\n            key), value[0])\n    return query_text", "test_code_list": [{"test_code": "import datetime\nimport decimal\nimport sqlite3\nfrom unittest import TestCase\nimport pytest\n\nclass TestReplaceQueryParameters(TestCase):\n    def test_replace_query_params(self):\n        result = replace_query_parameters(\"SELECT '{{token1}}', '{{token2}}'\",\n            'token1=test1&token2=test2')\n        self.assertEqual(\"SELECT 'test1', 'test2'\", result)\n    \nTestReplaceQueryParameters().test_replace_query_params()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_query_results.py"}], "method_code_mask": "import datetime\nimport decimal\nimport hashlib\nimport logging\nimport re\nimport sqlite3\nfrom urllib.parse import parse_qs\n\n\ndef replace_query_parameters(query_text, params): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "generate_ssl_options_dict", "method_path": "../srcdata/Visualization/redash/redash/query_runner/cass.py", "response": "import logging\nimport os\nimport ssl\nfrom base64 import b64decode\nfrom tempfile import NamedTemporaryFile\ndef generate_ssl_options_dict(protocol, cert_path=None):\n    ssl_options = {'ssl_version': getattr(ssl, protocol)}\n    if cert_path is not None:\n        ssl_options['ca_certs'] = cert_path\n        ssl_options['cert_reqs'] = ssl.CERT_REQUIRED\n    return ssl_options", "test_code_list": [{"test_code": "import ssl\nfrom unittest import TestCase\n\nclass TestCassandra(TestCase):\n    def test_generate_ssl_options_dict_creates_plain_protocol_dict(self):\n        expected = {'ssl_version': ssl.PROTOCOL_TLSv1_2}\n        actual = generate_ssl_options_dict('PROTOCOL_TLSv1_2')\n        self.assertDictEqual(expected, actual)\n    \nTestCassandra().test_generate_ssl_options_dict_creates_plain_protocol_dict()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_cass.py"}, {"test_code": "import ssl\nfrom unittest import TestCase\n\nclass TestCassandra(TestCase):\n    def test_generate_ssl_options_dict_creates_certificate_dict(self):\n        expected = {'ssl_version': ssl.PROTOCOL_TLSv1_2, 'ca_certs':\n            'some/path', 'cert_reqs': ssl.CERT_REQUIRED}\n        actual = generate_ssl_options_dict('PROTOCOL_TLSv1_2', 'some/path')\n        self.assertDictEqual(expected, actual)\n    \nTestCassandra().test_generate_ssl_options_dict_creates_certificate_dict()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_cass.py"}], "method_code_mask": "import logging\nimport os\nimport ssl\nfrom base64 import b64decode\nfrom tempfile import NamedTemporaryFile\n\n\ndef generate_ssl_options_dict(protocol, cert_path=None): [MASK]\n"}
{"model_name": "std", "repository": "redash", "full_method_name": "parse_query", "method_path": "../srcdata/Visualization/redash/redash/query_runner/google_spreadsheets.py", "response": "import logging\nimport re\nfrom base64 import b64decode\nfrom dateutil import parser\nfrom requests import Session\nimport google.auth\nfrom google.auth.exceptions import GoogleAuthError\nfrom google.oauth2.service_account import Credentials\ndef parse_query(query):\n    values = query.split('|')\n    key = values[0]\n    worksheet_num_or_title = 0\n    if len(values) == 2:\n        s = values[1].strip()\n        if len(s) > 0:\n            if re.match('^\\\\\"(.*?)\\\\\"$', s):\n                worksheet_num_or_title = s[1:-1]\n            else:\n                worksheet_num_or_title = int(s)\n    return key, worksheet_num_or_title", "test_code_list": [{"test_code": "import datetime\nfrom unittest import TestCase\nimport pytest\nfrom google.auth.exceptions import TransportError\n\nclass TestParseQuery(TestCase):\n    def test_parse_query(self):\n        parsed = parse_query('key|0')\n        self.assertEqual(('key', 0), parsed)\n    \nTestParseQuery().test_parse_query()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_google_spreadsheets.py"}, {"test_code": "import datetime\nfrom unittest import TestCase\nimport pytest\nfrom google.auth.exceptions import TransportError\n\nclass TestParseQuery(TestCase):\n    def test_parse_query_ignored(self):\n        parsed = parse_query('key')\n        self.assertEqual(('key', 0), parsed)\n        parsed = parse_query('key|')\n        self.assertEqual(('key', 0), parsed)\n        parsed = parse_query('key|1|')\n        self.assertEqual(('key', 0), parsed)\n    \nTestParseQuery().test_parse_query_ignored()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_google_spreadsheets.py"}, {"test_code": "import datetime\nfrom unittest import TestCase\nimport pytest\nfrom google.auth.exceptions import TransportError\n\nclass TestParseQuery(TestCase):\n    def test_parse_query_title(self):\n        parsed = parse_query('key|\"\"')\n        self.assertEqual(('key', ''), parsed)\n        parsed = parse_query('key|\"1\"')\n        self.assertEqual(('key', '1'), parsed)\n        parsed = parse_query('key|\"abc\"')\n        self.assertEqual(('key', 'abc'), parsed)\n        parsed = parse_query('key|\"\u3042\"')\n        self.assertEqual(('key', '\u3042'), parsed)\n        parsed = parse_query('key|\"1\"\"')\n        self.assertEqual(('key', '1\"'), parsed)\n        parsed = parse_query('key|\"\"')\n        self.assertEqual(('key', ''), parsed)\n    \nTestParseQuery().test_parse_query_title()\n", "code_start": "", "test_path": "../srcdata/Visualization/redash/tests/query_runner/test_google_spreadsheets.py"}], "method_code_mask": "import logging\nimport re\nfrom base64 import b64decode\nfrom dateutil import parser\nfrom requests import Session\nimport google.auth\nfrom google.auth.exceptions import GoogleAuthError\nfrom google.oauth2.service_account import Credentials\n\n\ndef parse_query(query): [MASK]\n"}

{"model_name": "std", "repository": "pygal", "full_method_name": "unparse_color", "method_path": "../srcdata/Visualization/pygal/pygal/colors.py", "response": "from __future__ import division\ndef unparse_color(r, g, b, a, type):\n    \"\"\"\n    Take the r, g, b, a color values and give back\n    a type css color string. This is the inverse function of parse_color\n    \"\"\"\n    if type == '#rgb':\n        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n        type = '#rrggbb'\n    if type == '#rgba':\n        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n            return '#%x%x%x%x' % (int(r / 17), int(g / 17), int(b / 17),\n                int(a * 15))\n        type = '#rrggbbaa'\n    if type == '#rrggbb':\n        return '#%02x%02x%02x' % (r, g, b)\n    if type == '#rrggbbaa':\n        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n    if type == 'rgb':\n        return 'rgb(%d, %d, %d)' % (r, g, b)\n    if type == 'rgba':\n        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)", "test_code_list": [{"test_code": "def test_unparse_color():\n    \"\"\"Test color unparse function\"\"\"\n    assert unparse_color(17, 34, 51, 1.0, '#rgb') == '#123'\n    assert unparse_color(204, 221, 255, 1.0, '#rgb') == '#cdf'\n    assert unparse_color(170, 51, 221, 119 / 255, '#rgba') == '#a3d7'\n    assert unparse_color(88, 75, 79, 1.0, '#rrggbb') == '#584b4f'\n    assert unparse_color(140, 190, 34, 1.0, '#rrggbb') == '#8cbe22'\n    assert unparse_color(22, 203, 240, 1 / 3, '#rrggbbaa') == '#16cbf055'\n    assert unparse_color(134, 67, 216, 1.0, 'rgb') == 'rgb(134, 67, 216)'\n    assert unparse_color(0, 111, 222, 1.0, 'rgb') == 'rgb(0, 111, 222)'\n    assert unparse_color(237, 83, 48, 0.8, 'rgba') == 'rgba(237, 83, 48, 0.8)'\n    assert unparse_color(0, 1, 0, 0.1223, 'rgba') == 'rgba(0, 1, 0, 0.1223)'\n\ntest_unparse_color()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}], "method_code_mask": "from __future__ import division\n\n\ndef unparse_color(r, g, b, a, type): [MASK]\n"}
{"model_name": "std", "repository": "pygal", "full_method_name": "hsl_to_rgb", "method_path": "../srcdata/Visualization/pygal/pygal/colors.py", "response": "from __future__ import division\ndef hsl_to_rgb(h, s, l):\n    \"\"\"Convert a color in h, s, l to a color in r, g, b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n    m2 = l * (s + 1) if l <= 0.5 else l + s - l * s\n    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n        h = h % 1\n        if 6 * h < 1:\n            return m1 + 6 * h * (m2 - m1)\n        if 2 * h < 1:\n            return m2\n        if 3 * h < 2:\n            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n        return m1\n    r, g, b = map(lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h -\n        1 / 3)))\n    return r, g, b", "test_code_list": [{"test_code": "def test_hsl_to_rgb_part_0():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(0, 100, 50) == (255, 0, 0)\n    assert hsl_to_rgb(60, 100, 50) == (255, 255, 0)\n    assert hsl_to_rgb(120, 100, 50) == (0, 255, 0)\n    assert hsl_to_rgb(180, 100, 50) == (0, 255, 255)\n    assert hsl_to_rgb(240, 100, 50) == (0, 0, 255)\n    assert hsl_to_rgb(300, 100, 50) == (255, 0, 255)\n\ntest_hsl_to_rgb_part_0()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_1():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(-360, 100, 50) == (255, 0, 0)\n    assert hsl_to_rgb(-300, 100, 50) == (255, 255, 0)\n    assert hsl_to_rgb(-240, 100, 50) == (0, 255, 0)\n    assert hsl_to_rgb(-180, 100, 50) == (0, 255, 255)\n    assert hsl_to_rgb(-120, 100, 50) == (0, 0, 255)\n    assert hsl_to_rgb(-60, 100, 50) == (255, 0, 255)\n\ntest_hsl_to_rgb_part_1()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_2():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(360, 100, 50) == (255, 0, 0)\n    assert hsl_to_rgb(420, 100, 50) == (255, 255, 0)\n    assert hsl_to_rgb(480, 100, 50) == (0, 255, 0)\n    assert hsl_to_rgb(540, 100, 50) == (0, 255, 255)\n    assert hsl_to_rgb(600, 100, 50) == (0, 0, 255)\n    assert hsl_to_rgb(660, 100, 50) == (255, 0, 255)\n\ntest_hsl_to_rgb_part_2()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_3():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(6120, 100, 50) == (255, 0, 0)\n    assert hsl_to_rgb(-9660, 100, 50) == (255, 255, 0)\n    assert hsl_to_rgb(99840, 100, 50) == (0, 255, 0)\n    assert hsl_to_rgb(-900, 100, 50) == (0, 255, 255)\n    assert hsl_to_rgb(-104880, 100, 50) == (0, 0, 255)\n    assert hsl_to_rgb(2820, 100, 50) == (255, 0, 255)\n\ntest_hsl_to_rgb_part_3()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_4():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(0, 100, 50) == (255, 0, 0)\n    assert hsl_to_rgb(12, 100, 50) == (255, 51, 0)\n    assert hsl_to_rgb(24, 100, 50) == (255, 102, 0)\n    assert hsl_to_rgb(36, 100, 50) == (255, 153, 0)\n    assert hsl_to_rgb(48, 100, 50) == (255, 204, 0)\n    assert hsl_to_rgb(60, 100, 50) == (255, 255, 0)\n    assert hsl_to_rgb(72, 100, 50) == (204, 255, 0)\n    assert hsl_to_rgb(84, 100, 50) == (153, 255, 0)\n    assert hsl_to_rgb(96, 100, 50) == (102, 255, 0)\n    assert hsl_to_rgb(108, 100, 50) == (51, 255, 0)\n    assert hsl_to_rgb(120, 100, 50) == (0, 255, 0)\n\ntest_hsl_to_rgb_part_4()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_5():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(120, 100, 50) == (0, 255, 0)\n    assert hsl_to_rgb(132, 100, 50) == (0, 255, 51)\n    assert hsl_to_rgb(144, 100, 50) == (0, 255, 102)\n    assert hsl_to_rgb(156, 100, 50) == (0, 255, 153)\n    assert hsl_to_rgb(168, 100, 50) == (0, 255, 204)\n    assert hsl_to_rgb(180, 100, 50) == (0, 255, 255)\n    assert hsl_to_rgb(192, 100, 50) == (0, 204, 255)\n    assert hsl_to_rgb(204, 100, 50) == (0, 153, 255)\n    assert hsl_to_rgb(216, 100, 50) == (0, 102, 255)\n    assert hsl_to_rgb(228, 100, 50) == (0, 51, 255)\n    assert hsl_to_rgb(240, 100, 50) == (0, 0, 255)\n\ntest_hsl_to_rgb_part_5()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_6():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(240, 100, 50) == (0, 0, 255)\n    assert hsl_to_rgb(252, 100, 50) == (51, 0, 255)\n    assert hsl_to_rgb(264, 100, 50) == (102, 0, 255)\n    assert hsl_to_rgb(276, 100, 50) == (153, 0, 255)\n    assert hsl_to_rgb(288, 100, 50) == (204, 0, 255)\n    assert hsl_to_rgb(300, 100, 50) == (255, 0, 255)\n    assert hsl_to_rgb(312, 100, 50) == (255, 0, 204)\n    assert hsl_to_rgb(324, 100, 50) == (255, 0, 153)\n    assert hsl_to_rgb(336, 100, 50) == (255, 0, 102)\n    assert hsl_to_rgb(348, 100, 50) == (255, 0, 51)\n    assert hsl_to_rgb(360, 100, 50) == (255, 0, 0)\n\ntest_hsl_to_rgb_part_6()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_7():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(0, 20, 50) == (153, 102, 102)\n    assert hsl_to_rgb(0, 60, 50) == (204, 51, 51)\n    assert hsl_to_rgb(0, 100, 50) == (255, 0, 0)\n\ntest_hsl_to_rgb_part_7()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_8():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(60, 20, 50) == (153, 153, 102)\n    assert hsl_to_rgb(60, 60, 50) == (204, 204, 51)\n    assert hsl_to_rgb(60, 100, 50) == (255, 255, 0)\n\ntest_hsl_to_rgb_part_8()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_9():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(120, 20, 50) == (102, 153, 102)\n    assert hsl_to_rgb(120, 60, 50) == (51, 204, 51)\n    assert hsl_to_rgb(120, 100, 50) == (0, 255, 0)\n\ntest_hsl_to_rgb_part_9()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_10():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(180, 20, 50) == (102, 153, 153)\n    assert hsl_to_rgb(180, 60, 50) == (51, 204, 204)\n    assert hsl_to_rgb(180, 100, 50) == (0, 255, 255)\n\ntest_hsl_to_rgb_part_10()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_11():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(240, 20, 50) == (102, 102, 153)\n    assert hsl_to_rgb(240, 60, 50) == (51, 51, 204)\n    assert hsl_to_rgb(240, 100, 50) == (0, 0, 255)\n\ntest_hsl_to_rgb_part_11()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_12():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(300, 20, 50) == (153, 102, 153)\n    assert hsl_to_rgb(300, 60, 50) == (204, 51, 204)\n    assert hsl_to_rgb(300, 100, 50) == (255, 0, 255)\n\ntest_hsl_to_rgb_part_12()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_13():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(0, 100, 0) == (0, 0, 0)\n    assert hsl_to_rgb(0, 100, 10) == (51, 0, 0)\n    assert hsl_to_rgb(0, 100, 20) == (102, 0, 0)\n    assert hsl_to_rgb(0, 100, 30) == (153, 0, 0)\n    assert hsl_to_rgb(0, 100, 40) == (204, 0, 0)\n    assert hsl_to_rgb(0, 100, 50) == (255, 0, 0)\n    assert hsl_to_rgb(0, 100, 60) == (255, 51, 51)\n    assert hsl_to_rgb(0, 100, 70) == (255, 102, 102)\n    assert hsl_to_rgb(0, 100, 80) == (255, 153, 153)\n    assert hsl_to_rgb(0, 100, 90) == (255, 204, 204)\n    assert hsl_to_rgb(0, 100, 100) == (255, 255, 255)\n\ntest_hsl_to_rgb_part_13()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_14():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(60, 100, 0) == (0, 0, 0)\n    assert hsl_to_rgb(60, 100, 10) == (51, 51, 0)\n    assert hsl_to_rgb(60, 100, 20) == (102, 102, 0)\n    assert hsl_to_rgb(60, 100, 30) == (153, 153, 0)\n    assert hsl_to_rgb(60, 100, 40) == (204, 204, 0)\n    assert hsl_to_rgb(60, 100, 50) == (255, 255, 0)\n    assert hsl_to_rgb(60, 100, 60) == (255, 255, 51)\n    assert hsl_to_rgb(60, 100, 70) == (255, 255, 102)\n    assert hsl_to_rgb(60, 100, 80) == (255, 255, 153)\n    assert hsl_to_rgb(60, 100, 90) == (255, 255, 204)\n    assert hsl_to_rgb(60, 100, 100) == (255, 255, 255)\n\ntest_hsl_to_rgb_part_14()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_15():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(120, 100, 0) == (0, 0, 0)\n    assert hsl_to_rgb(120, 100, 10) == (0, 51, 0)\n    assert hsl_to_rgb(120, 100, 20) == (0, 102, 0)\n    assert hsl_to_rgb(120, 100, 30) == (0, 153, 0)\n    assert hsl_to_rgb(120, 100, 40) == (0, 204, 0)\n    assert hsl_to_rgb(120, 100, 50) == (0, 255, 0)\n    assert hsl_to_rgb(120, 100, 60) == (51, 255, 51)\n    assert hsl_to_rgb(120, 100, 70) == (102, 255, 102)\n    assert hsl_to_rgb(120, 100, 80) == (153, 255, 153)\n    assert hsl_to_rgb(120, 100, 90) == (204, 255, 204)\n    assert hsl_to_rgb(120, 100, 100) == (255, 255, 255)\n\ntest_hsl_to_rgb_part_15()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_16():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(180, 100, 0) == (0, 0, 0)\n    assert hsl_to_rgb(180, 100, 10) == (0, 51, 51)\n    assert hsl_to_rgb(180, 100, 20) == (0, 102, 102)\n    assert hsl_to_rgb(180, 100, 30) == (0, 153, 153)\n    assert hsl_to_rgb(180, 100, 40) == (0, 204, 204)\n    assert hsl_to_rgb(180, 100, 50) == (0, 255, 255)\n    assert hsl_to_rgb(180, 100, 60) == (51, 255, 255)\n    assert hsl_to_rgb(180, 100, 70) == (102, 255, 255)\n    assert hsl_to_rgb(180, 100, 80) == (153, 255, 255)\n    assert hsl_to_rgb(180, 100, 90) == (204, 255, 255)\n    assert hsl_to_rgb(180, 100, 100) == (255, 255, 255)\n\ntest_hsl_to_rgb_part_16()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_17():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(240, 100, 0) == (0, 0, 0)\n    assert hsl_to_rgb(240, 100, 10) == (0, 0, 51)\n    assert hsl_to_rgb(240, 100, 20) == (0, 0, 102)\n    assert hsl_to_rgb(240, 100, 30) == (0, 0, 153)\n    assert hsl_to_rgb(240, 100, 40) == (0, 0, 204)\n    assert hsl_to_rgb(240, 100, 50) == (0, 0, 255)\n    assert hsl_to_rgb(240, 100, 60) == (51, 51, 255)\n    assert hsl_to_rgb(240, 100, 70) == (102, 102, 255)\n    assert hsl_to_rgb(240, 100, 80) == (153, 153, 255)\n    assert hsl_to_rgb(240, 100, 90) == (204, 204, 255)\n    assert hsl_to_rgb(240, 100, 100) == (255, 255, 255)\n\ntest_hsl_to_rgb_part_17()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_hsl_to_rgb_part_18():\n    \"\"\"Test hsl to rgb color function\"\"\"\n    assert hsl_to_rgb(300, 100, 0) == (0, 0, 0)\n    assert hsl_to_rgb(300, 100, 10) == (51, 0, 51)\n    assert hsl_to_rgb(300, 100, 20) == (102, 0, 102)\n    assert hsl_to_rgb(300, 100, 30) == (153, 0, 153)\n    assert hsl_to_rgb(300, 100, 40) == (204, 0, 204)\n    assert hsl_to_rgb(300, 100, 50) == (255, 0, 255)\n    assert hsl_to_rgb(300, 100, 60) == (255, 51, 255)\n    assert hsl_to_rgb(300, 100, 70) == (255, 102, 255)\n    assert hsl_to_rgb(300, 100, 80) == (255, 153, 255)\n    assert hsl_to_rgb(300, 100, 90) == (255, 204, 255)\n    assert hsl_to_rgb(300, 100, 100) == (255, 255, 255)\n\ntest_hsl_to_rgb_part_18()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}], "method_code_mask": "from __future__ import division\n\n\ndef hsl_to_rgb(h, s, l): [MASK]\n"}
{"model_name": "std", "repository": "pygal", "full_method_name": "rgb_to_hsl", "method_path": "../srcdata/Visualization/pygal/pygal/colors.py", "response": "from __future__ import division\ndef normalize_float(f):\n    \"\"\"Round float errors\"\"\"\n    if abs(f - round(f)) < 1e-13:\n        return round(f)\n    return f\ndef rgb_to_hsl(r, g, b):\n    \"\"\"Convert a color in r, g, b to a color in h, s, l\"\"\"\n    r = r or 0\n    g = g or 0\n    b = b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n    d = max_ - min_\n    if not d:\n        h = 0\n    elif r is max_:\n        h = 60 * (g - b) / d\n    elif g is max_:\n        h = 60 * (b - r) / d + 120\n    else:\n        h = 60 * (r - g) / d + 240\n    l = 0.5 * (max_ + min_)\n    if not d:\n        s = 0\n    elif l < 0.5:\n        s = 0.5 * d / l\n    else:\n        s = 0.5 * d / (1 - l)\n    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))", "test_code_list": [{"test_code": "def test_rgb_to_hsl_part_0():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(255, 0, 0) == (0, 100, 50)\n    assert rgb_to_hsl(255, 255, 0) == (60, 100, 50)\n    assert rgb_to_hsl(0, 255, 0) == (120, 100, 50)\n    assert rgb_to_hsl(0, 255, 255) == (180, 100, 50)\n    assert rgb_to_hsl(0, 0, 255) == (240, 100, 50)\n    assert rgb_to_hsl(255, 0, 255) == (300, 100, 50)\n\ntest_rgb_to_hsl_part_0()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_4():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(255, 0, 0) == (0, 100, 50)\n    assert rgb_to_hsl(255, 51, 0) == (12, 100, 50)\n    assert rgb_to_hsl(255, 102, 0) == (24, 100, 50)\n    assert rgb_to_hsl(255, 153, 0) == (36, 100, 50)\n    assert rgb_to_hsl(255, 204, 0) == (48, 100, 50)\n    assert rgb_to_hsl(255, 255, 0) == (60, 100, 50)\n    assert rgb_to_hsl(204, 255, 0) == (72, 100, 50)\n    assert rgb_to_hsl(153, 255, 0) == (84, 100, 50)\n    assert rgb_to_hsl(102, 255, 0) == (96, 100, 50)\n    assert rgb_to_hsl(51, 255, 0) == (108, 100, 50)\n    assert rgb_to_hsl(0, 255, 0) == (120, 100, 50)\n\ntest_rgb_to_hsl_part_4()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_5():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(0, 255, 0) == (120, 100, 50)\n    assert rgb_to_hsl(0, 255, 51) == (132, 100, 50)\n    assert rgb_to_hsl(0, 255, 102) == (144, 100, 50)\n    assert rgb_to_hsl(0, 255, 153) == (156, 100, 50)\n    assert rgb_to_hsl(0, 255, 204) == (168, 100, 50)\n    assert rgb_to_hsl(0, 255, 255) == (180, 100, 50)\n    assert rgb_to_hsl(0, 204, 255) == (192, 100, 50)\n    assert rgb_to_hsl(0, 153, 255) == (204, 100, 50)\n    assert rgb_to_hsl(0, 102, 255) == (216, 100, 50)\n    assert rgb_to_hsl(0, 51, 255) == (228, 100, 50)\n    assert rgb_to_hsl(0, 0, 255) == (240, 100, 50)\n\ntest_rgb_to_hsl_part_5()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_6():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(0, 0, 255) == (240, 100, 50)\n    assert rgb_to_hsl(51, 0, 255) == (252, 100, 50)\n    assert rgb_to_hsl(102, 0, 255) == (264, 100, 50)\n    assert rgb_to_hsl(153, 0, 255) == (276, 100, 50)\n    assert rgb_to_hsl(204, 0, 255) == (288, 100, 50)\n    assert rgb_to_hsl(255, 0, 255) == (300, 100, 50)\n    assert rgb_to_hsl(255, 0, 204) == (312, 100, 50)\n    assert rgb_to_hsl(255, 0, 153) == (324, 100, 50)\n    assert rgb_to_hsl(255, 0, 102) == (336, 100, 50)\n    assert rgb_to_hsl(255, 0, 51) == (348, 100, 50)\n\ntest_rgb_to_hsl_part_6()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_7():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(153, 102, 102) == (0, 20, 50)\n    assert rgb_to_hsl(204, 51, 51) == (0, 60, 50)\n    assert rgb_to_hsl(255, 0, 0) == (0, 100, 50)\n\ntest_rgb_to_hsl_part_7()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_8():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(153, 153, 102) == (60, 20, 50)\n    assert rgb_to_hsl(204, 204, 51) == (60, 60, 50)\n    assert rgb_to_hsl(255, 255, 0) == (60, 100, 50)\n\ntest_rgb_to_hsl_part_8()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_9():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(102, 153, 102) == (120, 20, 50)\n    assert rgb_to_hsl(51, 204, 51) == (120, 60, 50)\n    assert rgb_to_hsl(0, 255, 0) == (120, 100, 50)\n\ntest_rgb_to_hsl_part_9()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_10():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(102, 153, 153) == (180, 20, 50)\n    assert rgb_to_hsl(51, 204, 204) == (180, 60, 50)\n    assert rgb_to_hsl(0, 255, 255) == (180, 100, 50)\n\ntest_rgb_to_hsl_part_10()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_11():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(102, 102, 153) == (240, 20, 50)\n    assert rgb_to_hsl(51, 51, 204) == (240, 60, 50)\n    assert rgb_to_hsl(0, 0, 255) == (240, 100, 50)\n\ntest_rgb_to_hsl_part_11()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_12():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(153, 102, 153) == (300, 20, 50)\n    assert rgb_to_hsl(204, 51, 204) == (300, 60, 50)\n    assert rgb_to_hsl(255, 0, 255) == (300, 100, 50)\n\ntest_rgb_to_hsl_part_12()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_13():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(0, 0, 0) == (0, 0, 0)\n    assert rgb_to_hsl(51, 0, 0) == (0, 100, 10)\n    assert rgb_to_hsl(102, 0, 0) == (0, 100, 20)\n    assert rgb_to_hsl(153, 0, 0) == (0, 100, 30)\n    assert rgb_to_hsl(204, 0, 0) == (0, 100, 40)\n    assert rgb_to_hsl(255, 0, 0) == (0, 100, 50)\n    assert rgb_to_hsl(255, 51, 51) == (0, 100, 60)\n    assert rgb_to_hsl(255, 102, 102) == (0, 100, 70)\n    assert rgb_to_hsl(255, 153, 153) == (0, 100, 80)\n    assert rgb_to_hsl(255, 204, 204) == (0, 100, 90)\n    assert rgb_to_hsl(255, 255, 255) == (0, 0, 100)\n\ntest_rgb_to_hsl_part_13()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_14():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(51, 51, 0) == (60, 100, 10)\n    assert rgb_to_hsl(102, 102, 0) == (60, 100, 20)\n    assert rgb_to_hsl(153, 153, 0) == (60, 100, 30)\n    assert rgb_to_hsl(204, 204, 0) == (60, 100, 40)\n    assert rgb_to_hsl(255, 255, 0) == (60, 100, 50)\n    assert rgb_to_hsl(255, 255, 51) == (60, 100, 60)\n    assert rgb_to_hsl(255, 255, 102) == (60, 100, 70)\n    assert rgb_to_hsl(255, 255, 153) == (60, 100, 80)\n    assert rgb_to_hsl(255, 255, 204) == (60, 100, 90)\n\ntest_rgb_to_hsl_part_14()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_15():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(0, 51, 0) == (120, 100, 10)\n    assert rgb_to_hsl(0, 102, 0) == (120, 100, 20)\n    assert rgb_to_hsl(0, 153, 0) == (120, 100, 30)\n    assert rgb_to_hsl(0, 204, 0) == (120, 100, 40)\n    assert rgb_to_hsl(0, 255, 0) == (120, 100, 50)\n    assert rgb_to_hsl(51, 255, 51) == (120, 100, 60)\n    assert rgb_to_hsl(102, 255, 102) == (120, 100, 70)\n    assert rgb_to_hsl(153, 255, 153) == (120, 100, 80)\n    assert rgb_to_hsl(204, 255, 204) == (120, 100, 90)\n\ntest_rgb_to_hsl_part_15()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_16():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(0, 51, 51) == (180, 100, 10)\n    assert rgb_to_hsl(0, 102, 102) == (180, 100, 20)\n    assert rgb_to_hsl(0, 153, 153) == (180, 100, 30)\n    assert rgb_to_hsl(0, 204, 204) == (180, 100, 40)\n    assert rgb_to_hsl(0, 255, 255) == (180, 100, 50)\n    assert rgb_to_hsl(51, 255, 255) == (180, 100, 60)\n    assert rgb_to_hsl(102, 255, 255) == (180, 100, 70)\n    assert rgb_to_hsl(153, 255, 255) == (180, 100, 80)\n    assert rgb_to_hsl(204, 255, 255) == (180, 100, 90)\n\ntest_rgb_to_hsl_part_16()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_17():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(0, 0, 51) == (240, 100, 10)\n    assert rgb_to_hsl(0, 0, 102) == (240, 100, 20)\n    assert rgb_to_hsl(0, 0, 153) == (240, 100, 30)\n    assert rgb_to_hsl(0, 0, 204) == (240, 100, 40)\n    assert rgb_to_hsl(0, 0, 255) == (240, 100, 50)\n    assert rgb_to_hsl(51, 51, 255) == (240, 100, 60)\n    assert rgb_to_hsl(102, 102, 255) == (240, 100, 70)\n    assert rgb_to_hsl(153, 153, 255) == (240, 100, 80)\n    assert rgb_to_hsl(204, 204, 255) == (240, 100, 90)\n\ntest_rgb_to_hsl_part_17()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}, {"test_code": "def test_rgb_to_hsl_part_18():\n    \"\"\"Test rgb to hsl color function\"\"\"\n    assert rgb_to_hsl(51, 0, 51) == (300, 100, 10)\n    assert rgb_to_hsl(102, 0, 102) == (300, 100, 20)\n    assert rgb_to_hsl(153, 0, 153) == (300, 100, 30)\n    assert rgb_to_hsl(204, 0, 204) == (300, 100, 40)\n    assert rgb_to_hsl(255, 0, 255) == (300, 100, 50)\n    assert rgb_to_hsl(255, 51, 255) == (300, 100, 60)\n    assert rgb_to_hsl(255, 102, 255) == (300, 100, 70)\n    assert rgb_to_hsl(255, 153, 255) == (300, 100, 80)\n    assert rgb_to_hsl(255, 204, 255) == (300, 100, 90)\n\ntest_rgb_to_hsl_part_18()\n", "code_start": "from __future__ import division\n", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_colors.py"}], "method_code_mask": "from __future__ import division\n\n\ndef normalize_float(f):\n    \"\"\"Round float errors\"\"\"\n    if abs(f - round(f)) < 1e-13:\n        return round(f)\n    return f\n\n\ndef rgb_to_hsl(r, g, b): [MASK]\n"}
{"model_name": "std", "repository": "pygal", "full_method_name": "round_to_int", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef round_to_int(number, precision):\n    \"\"\"Round a number to a precision\"\"\"\n    precision = int(precision)\n    rounded = (int(number) + precision / 2) // precision * precision\n    return rounded", "test_code_list": [{"test_code": "from pytest import raises\ndef test_round_to_int():\n    \"\"\"Test round to int function\"\"\"\n    assert round_to_int(154231, 1000) == 154000\n    assert round_to_int(154231, 10) == 154230\n    assert round_to_int(154231, 100000) == 200000\n    assert round_to_int(154231, 50000) == 150000\n    assert round_to_int(154231, 500) == 154000\n    assert round_to_int(154231, 200) == 154200\n    assert round_to_int(154361, 200) == 154400\n\ntest_round_to_int()\n", "code_start": "", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_util.py"}], "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef round_to_int(number, precision): [MASK]\n"}
{"model_name": "std", "repository": "pygal", "full_method_name": "round_to_float", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef round_to_float(number, precision):\n    \"\"\"Round a float to a precision\"\"\"\n    rounded = Decimal(str(floor((number + precision / 2) // precision))\n        ) * Decimal(str(precision))\n    return float(rounded)", "test_code_list": [{"test_code": "from pytest import raises\ndef test_round_to_float():\n    \"\"\"Test round to float function\"\"\"\n    assert round_to_float(12.01934, 0.01) == 12.02\n    assert round_to_float(12.01134, 0.01) == 12.01\n    assert round_to_float(12.1934, 0.1) == 12.2\n    assert round_to_float(12.1134, 0.1) == 12.1\n    assert round_to_float(12.1134, 0.001) == 12.113\n    assert round_to_float(12.1134, 1e-05) == 12.1134\n    assert round_to_float(12.1934, 0.5) == 12.0\n    assert round_to_float(12.2934, 0.5) == 12.5\n\ntest_round_to_float()\n", "code_start": "", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_util.py"}], "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef round_to_float(number, precision): [MASK]\n"}
{"model_name": "std", "repository": "pygal", "full_method_name": "_swap_curly", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef _swap_curly(string):\n    \"\"\"Swap single and double curly brackets\"\"\"\n    return string.replace('{{ ', '{{').replace('{{', '\\x00').replace('{', '{{'\n        ).replace('\\x00', '{').replace(' }}', '}}').replace('}}', '\\x00'\n        ).replace('}', '}}').replace('\\x00', '}')", "test_code_list": [{"test_code": "from pytest import raises\ndef test_swap_curly():\n    \"\"\"Test swap curly function\"\"\"\n    for str in ('foo', 'foo foo foo bar', 'foo b\u00e9\u00e8 b\u00a1\u00f0/\u0133\u0259\u02d8\u00a9\u00fe\u00df\u00ae~\u00af\u00e6',\n        'foo b\u00e9\u00e8 b\u00a1\u00f0/\u0133\u0259\u02d8\u00a9\u00fe\u00df\u00ae~\u00af\u00e6'):\n        assert _swap_curly(str) == str\n    assert _swap_curly('foo{bar}baz') == 'foo{{bar}}baz'\n    assert _swap_curly('foo{{bar}}baz') == 'foo{bar}baz'\n    assert _swap_curly('{foo}{{bar}}{baz}') == '{{foo}}{bar}{{baz}}'\n    assert _swap_curly('{foo}{{{bar}}}{baz}') == '{{foo}}{{{bar}}}{{baz}}'\n    assert _swap_curly('foo{ bar }baz') == 'foo{{ bar }}baz'\n    assert _swap_curly('foo{ bar}baz') == 'foo{{ bar}}baz'\n    assert _swap_curly('foo{bar }baz') == 'foo{{bar }}baz'\n    assert _swap_curly('foo{{ bar }}baz') == 'foo{bar}baz'\n    assert _swap_curly('foo{{bar }}baz') == 'foo{bar}baz'\n    assert _swap_curly('foo{{ bar}}baz') == 'foo{bar}baz'\n\ntest_swap_curly()\n", "code_start": "", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_util.py"}], "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef _swap_curly(string): [MASK]\n"}
{"model_name": "std", "repository": "pygal", "full_method_name": "truncate", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef truncate(string, index):\n    \"\"\"Truncate a string at index and add ...\"\"\"\n    if len(string) > index and index > 0:\n        string = string[:index - 1] + '\u2026'\n    return string", "test_code_list": [{"test_code": "from pytest import raises\ndef test_truncate():\n    \"\"\"Test truncate function\"\"\"\n    assert truncate('1234567890', 50) == '1234567890'\n    assert truncate('1234567890', 5) == '1234\u2026'\n    assert truncate('1234567890', 1) == '\u2026'\n    assert truncate('1234567890', 9) == '12345678\u2026'\n    assert truncate('1234567890', 10) == '1234567890'\n    assert truncate('1234567890', 0) == '1234567890'\n    assert truncate('1234567890', -1) == '1234567890'\n\ntest_truncate()\n", "code_start": "", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_util.py"}], "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef truncate(string, index): [MASK]\n"}
{"model_name": "std", "repository": "pygal", "full_method_name": "minify_css", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ncss_comments = re.compile('/\\\\*.*?\\\\*/', re.MULTILINE | re.DOTALL)\ndef minify_css(css):\n    \"\"\"Little css minifier\"\"\"\n    remove_next_comment = 1\n    for css_comment in css_comments.findall(css):\n        if css_comment[-3:] == '\\\\*/':\n            remove_next_comment = 0\n            continue\n        if remove_next_comment:\n            css = css.replace(css_comment, '')\n        else:\n            remove_next_comment = 1\n    css = re.sub('\\\\s\\\\s+', ' ', css)\n    css = re.sub('\\\\s+\\\\n', '', css)\n    for char in ('{', '}', ':', ';', ','):\n        css = re.sub(char + '\\\\s', char, css)\n        css = re.sub('\\\\s' + char, char, css)\n    css = re.sub('}\\\\s(#|\\\\w)', '}\\\\1', css)\n    css = re.sub(';}', '}', css)\n    css = re.sub('}//-->', '}\\\\n//-->', css)\n    return css.strip()", "test_code_list": [{"test_code": "from pytest import raises\ndef test_minify_css():\n    \"\"\"Test css minifier function\"\"\"\n    css = \"\"\"\n/*\n * Font-sizes from config, override with care\n */\n\n.title  {\n  font-family: sans;\n\n  font-size:  12 ;\n}\n\n.legends .legend text {\n  font-family: monospace;\n  font-size: 14 ;}\n\"\"\"\n    assert minify_css(css\n        ) == '.title{font-family:sans;font-size:12}.legends .legend text{font-family:monospace;font-size:14}'\n\ntest_minify_css()\n", "code_start": "", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_util.py"}], "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ncss_comments = re.compile('/\\\\*.*?\\\\*/', re.MULTILINE | re.DOTALL)\n\n\ndef minify_css(css): [MASK]\n"}
{"model_name": "std", "repository": "pygal", "full_method_name": "majorize", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef majorize(values):\n    \"\"\"Filter sequence to return only major considered numbers\"\"\"\n    sorted_values = sorted(values)\n    if len(values) <= 3 or abs(2 * sorted_values[1] - sorted_values[0] -\n        sorted_values[2]) > abs(1.5 * (sorted_values[1] - sorted_values[0])):\n        return []\n    values_step = sorted_values[1] - sorted_values[0]\n    full_range = sorted_values[-1] - sorted_values[0]\n    step = 10 ** int(log10(full_range))\n    if step == values_step:\n        step *= 10\n    step_factor = 10 ** (int(log10(step)) + 1)\n    if round(step * step_factor) % (round(values_step * step_factor) or 1):\n        step *= values_step\n    if full_range <= 2 * step:\n        step *= 0.5\n    elif full_range >= 5 * step:\n        step *= 5\n    major_values = [value for value in values if value / step == round(\n        value / step)]\n    return [value for value in sorted_values if value in major_values]", "test_code_list": [{"test_code": "from pytest import raises\ndef test_majorize():\n    \"\"\"Test majorize function\"\"\"\n    assert majorize(()) == []\n    assert majorize((0,)) == []\n    assert majorize((0, 1)) == []\n    assert majorize((0, 1, 2)) == []\n    assert majorize((-1, 0, 1, 2)) == [0]\n    assert majorize((0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)) == [\n        0, 0.5, 1]\n    assert majorize((0, 0.2, 0.4, 0.6, 0.8, 1)) == [0, 1]\n    assert majorize((-0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)) == [0, 1]\n    assert majorize((-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)\n        ) == [-1, 0, 1]\n    assert majorize((0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6)) == [0, 1]\n    assert majorize((0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2)) == [\n        0, 1, 2]\n    assert majorize((0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)\n        ) == [0, 50, 100]\n    assert majorize((0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,\n        30, 32, 34, 36)) == [0, 10, 20, 30]\n    assert majorize((0, 1, 2, 3, 4, 5)) == [0, 5]\n    assert majorize((-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5)) == [-5, 0, 5]\n    assert majorize((-5, 5, -4, 4, 0, 1, -1, 3, -2, 2, -3)) == [-5, 0, 5]\n    assert majorize((0, 1, 2, 3, 4)) == [0]\n    assert majorize((3, 4, 5, 6)) == [5]\n    assert majorize((0, 1, 2, 3, 4, 5, 6, 7, 8)) == [0, 5]\n    assert majorize((-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5)) == [-5, 0, 5]\n    assert majorize((-6, -5, -4, -3, -2, -1, 0, 1, 2, 3)) == [-5, 0]\n    assert majorize((-6, -5, -4, -3)) == [-5]\n    assert majorize((1, 10, 100, 1000, 10000, 100000)) == []\n    assert majorize(range(30, 70, 5)) == [30, 40, 50, 60]\n    assert majorize(range(20, 55, 2)) == [20, 30, 40, 50]\n    assert majorize(range(21, 83, 3)) == [30, 45, 60, 75]\n\ntest_majorize()\n", "code_start": "", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_util.py"}], "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef majorize(values): [MASK]\n"}
{"model_name": "std", "repository": "pygal", "full_method_name": "mergextend", "method_path": "../srcdata/Visualization/pygal/pygal/util.py", "response": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\ndef mergextend(list1, list2):\n    if list1 is None or Ellipsis not in list1:\n        return list1\n    index = list1.index(Ellipsis)\n    return list(list1[:index]) + list(list2) + list(list1[index + 1:])", "test_code_list": [{"test_code": "from pytest import raises\ndef test_mergextend():\n    \"\"\"Test mergextend function\"\"\"\n    assert mergextend(['a', 'b'], ['c', 'd']) == ['a', 'b']\n    assert mergextend([], ['c', 'd']) == []\n    assert mergextend(['a', 'b'], []) == ['a', 'b']\n    assert mergextend([Ellipsis], ['c', 'd']) == ['c', 'd']\n    assert mergextend([Ellipsis, 'b'], ['c', 'd']) == ['c', 'd', 'b']\n    assert mergextend(['a', Ellipsis], ['c', 'd']) == ['a', 'c', 'd']\n    assert mergextend(['a', Ellipsis, 'b'], ['c', 'd']) == ['a', 'c', 'd', 'b']\n    assert mergextend(['a', ..., 'b'], ['c', 'd']) == ['a', 'c', 'd', 'b']\n\ntest_mergextend()\n", "code_start": "", "test_path": "../srcdata/Visualization/pygal/pygal/test/test_util.py"}], "method_code_mask": "from __future__ import division\nimport re\nfrom decimal import Decimal\nfrom math import ceil\nfrom math import cos\nfrom math import floor\nfrom math import log10\nfrom math import pi\nfrom math import sin\n\n\ndef mergextend(list1, list2): [MASK]\n"}

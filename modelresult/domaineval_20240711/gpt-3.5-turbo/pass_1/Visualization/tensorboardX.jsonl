{"model_name": "gpt-3.5-turbo", "repository": "tensorboardX", "full_method_name": "_prepare_video", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/tensorboardX/tensorboardX/utils.py", "response": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.backends.backend_agg as plt_backend_agg\n\ndef _prepare_video(V):\n    if V.dtype == np.uint8:\n        V = V.astype(np.float32) / 255.0\n    \n    batch_size, time, channels, height, width = V.shape\n    n_frames = batch_size * time\n    n_cols = int(np.ceil(np.sqrt(n_frames)))\n    n_rows = int(np.ceil(n_frames / n_cols))\n    \n    padded_frames = np.zeros((n_rows * n_cols, channels, height, width), dtype=V.dtype)\n    padded_frames[:n_frames] = np.reshape(V, (n_frames, channels, height, width))\n    \n    reshaped_frames = np.transpose(padded_frames, (0, 2, 1, 3, 4))\n    reshaped_frames = np.reshape(reshaped_frames, (n_rows * height, n_cols * width, channels))\n    \n    return reshaped_frames", "test_code_list": [{"test_code": "import numpy as np\nimport pytest\nimport unittest\n\nclass UtilsTest(unittest.TestCase):\n    def test_prepare_video(self):\n        np.random.seed(1)\n        V_before = np.random.random((4, 10, 3, 20, 20))\n        V_after = _prepare_video(np.copy(V_before))\n        V_before = np.swapaxes(V_before, 0, 1)\n        V_before = np.reshape(V_before, newshape=(10, -1))\n        V_after = np.reshape(V_after, newshape=(10, -1))\n        np.testing.assert_array_almost_equal(np.sum(V_before, axis=1), np.sum(\n            V_after, axis=1))\n    \nUtilsTest().test_prepare_video()\n", "code_start": "", "test_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/tensorboardX/tests/test_utils.py"}], "method_code_mask": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.backends.backend_agg as plt_backend_agg\n\n\ndef _prepare_video(V): [MASK]\n"}
{"model_name": "gpt-3.5-turbo", "repository": "tensorboardX", "full_method_name": "make_np", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/tensorboardX/tensorboardX/x2num.py", "response": "def make_np(x):\n    if isinstance(x, list):\n        array = np.array(x)\n    elif isinstance(x, np.ndarray):\n        array = x\n    elif isinstance(x, str):\n        import caffe2\n        tensor = caffe2.tensor.load(str(x))\n        array = tensor.numpy()\n    elif np.isscalar(x):\n        array = np.array([x])\n    elif 'torch' in str(type(x)):\n        array = prepare_pytorch(x)\n    elif 'chainer' in str(type(x)):\n        array = x.array\n    elif 'mxnet' in str(type(x)):\n        array = x.asnumpy()\n    elif 'jax' in str(type(x)):\n        array = x.numpy()\n    else:\n        raise ValueError('Unsupported input type for conversion to numpy array.')\n    \n    return check_nan(array)", "test_code_list": [{"test_code": "import torch\nimport numpy as np\nimport unittest\n\nclass PyTorchNumpyTest(unittest.TestCase):\n    def test_pytorch_np(self):\n        tensors = [torch.rand(3, 10, 10), torch.rand(1), torch.rand(1, 2, 3, 4, 5)]\n        for tensor in tensors:\n            assert isinstance(make_np(tensor), np.ndarray)\n            if torch.cuda.device_count() > 0:\n                assert isinstance(make_np(tensor.cuda()), np.ndarray)\n            assert isinstance(make_np(torch.autograd.Variable(tensor)),\n                np.ndarray)\n            if torch.cuda.device_count() > 0:\n                assert isinstance(make_np(torch.autograd.Variable(tensor)\n                    .cuda()), np.ndarray)\n        assert isinstance(make_np(0), np.ndarray)\n        assert isinstance(make_np(0.1), np.ndarray)\n    \nPyTorchNumpyTest().test_pytorch_np()\n", "code_start": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n", "test_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/tensorboardX/tests/test_pytorch_np.py"}, {"test_code": "import numpy as np\nimport unittest\n\nclass NumpyTest(unittest.TestCase):\n    def test_scalar(self):\n        res = make_np(1.1)\n        assert isinstance(res, np.ndarray) and res.shape == (1,)\n        res = make_np(1 << 64 - 1)\n        assert isinstance(res, np.ndarray) and res.shape == (1,)\n        res = make_np(np.float16(1.00000087))\n        assert isinstance(res, np.ndarray) and res.shape == (1,)\n        if hasattr(np, 'float128'):\n            res = make_np(np.float128(1.00008 + 9))\n            assert isinstance(res, np.ndarray) and res.shape == (1,)\n        res = make_np(np.int64(100000000000))\n        assert isinstance(res, np.ndarray) and res.shape == (1,)\n    \nNumpyTest().test_scalar()\n", "code_start": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n", "test_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/tensorboardX/tests/test_numpy.py"}], "method_code_mask": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport logging\nimport numpy as np\nimport torch\n\n\ndef prepare_pytorch(x):\n    import torch\n    if isinstance(x, torch.autograd.Variable):\n        x = x.data\n    x = x.cpu().numpy()\n    return x\n\n\ndef check_nan(array):\n    tmp = np.sum(array)\n    if np.isnan(tmp) or np.isinf(tmp):\n        logger.warning('NaN or Inf found in input tensor.')\n    return array\n\n\ndef make_np(x): [MASK]\n"}
{"model_name": "gpt-3.5-turbo", "repository": "tensorboardX", "full_method_name": "make_valid_tf_name", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/tensorboardX/tensorboardX/record_writer.py", "response": "def make_valid_tf_name(name):\n    valid_name = \"\"\n    for char in name:\n        if _VALID_OP_NAME_PART.match(char):\n            valid_name += char\n        elif len(valid_name) == 0 and _VALID_OP_NAME_START.match(char):\n            valid_name += char\n        else:\n            valid_name += \"_\"\n    return valid_name", "test_code_list": [{"test_code": "import unittest\nimport os\nimport boto3\nimport shutil\n\nclass RecordWriterTest(unittest.TestCase):\n    def test_make_valid_tf_name(self):\n        newname = make_valid_tf_name('$ave/&sound')\n        assert newname == '._ave/_sound'\n    \nRecordWriterTest().test_make_valid_tf_name()\n", "code_start": "", "test_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/tensorboardX/tests/test_record_writer.py"}], "method_code_mask": "import os\nimport copy\nimport io\nimport os.path\nimport re\nimport struct\nimport boto3\n_VALID_OP_NAME_PART = re.compile('[A-Za-z0-9_.\\\\-/]+')\n_VALID_OP_NAME_START = re.compile('^[A-Za-z0-9.]')\n\n\ndef make_valid_tf_name(name): [MASK]\n"}

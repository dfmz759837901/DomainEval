{"model_name": "gpt-3.5-turbo", "repository": "pygwalker", "full_method_name": "get_formated_spec_params_code", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/pygwalker/pygwalker/services/format_invoke_walk_code.py", "response": "def get_formated_spec_params_code(code: str) -> str:\n    walk_func_node = _find_walk_func_node(code)\n    if walk_func_node:\n        return _repalce_spec_params_code(walk_func_node)\n    else:\n        return \"\"", "test_code_list": [{"test_code": "def test_get_formated_spec_params_code():\n    empty_code = ''\n    assert get_formated_spec_params_code(empty_code) == ''\n    normal_code = \"pygwalker.walk(df, env='Streamlit')\"\n    normal_code_result = \"\"\"pygwalker.walk(df, spec='____pyg_walker_spec_params____', env='Streamlit')\n\"\"\"\n    assert get_formated_spec_params_code(normal_code) == normal_code_result\n    new_line_code = \"\\t\\n\\npygwalker.walk(df, \\n\\tenv='Streamlit')\\n\\n\"\n    new_line_code_result = \"\"\"pygwalker.walk(df, spec='____pyg_walker_spec_params____', env='Streamlit')\n\"\"\"\n    assert get_formated_spec_params_code(new_line_code) == new_line_code_result\n\ntest_get_formated_spec_params_code()\n", "code_start": "", "test_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/pygwalker/tests/test_format_invoke_walk_code.py"}], "method_code_mask": "from typing import Optional\nfrom typing import List\nfrom types import FrameType\nimport logging\nimport inspect\nimport ast\nfrom astor.source_repr import split_lines\nimport astor\n_MAX_LINE = 150\n\n\ndef _private_astor_pretty_source(source: List[str]) ->str:\n    return ''.join(split_lines(source, maxline=_MAX_LINE))\n\n\ndef _repalce_spec_params_code(func: 'ast.Call') ->str:\n    replace_value = ast.Constant(value='____pyg_walker_spec_params____')\n    spec_index = -1\n    for index, keyword in enumerate(func.keywords):\n        if keyword.arg == 'spec':\n            spec_index = index\n    if spec_index != -1:\n        func.keywords[spec_index].value = replace_value\n    else:\n        func.keywords.insert(0, ast.keyword(arg='spec', value=replace_value))\n    return astor.to_source(func, pretty_source=_private_astor_pretty_source)\n\n\ndef _find_walk_func_node(code: str) ->Optional['ast.Call']:\n    node_list = [ast.parse(code)]\n    while node_list:\n        cur_node = node_list.pop()\n        if isinstance(cur_node, ast.Call):\n            if isinstance(cur_node.func, ast.Name):\n                func_name = cur_node.func.id\n            else:\n                func_name = cur_node.func.attr\n            if func_name == 'walk':\n                return cur_node\n        for node_info in astor.iter_node(cur_node):\n            if isinstance(node_info[0], list):\n                nodes = node_info[0]\n            else:\n                nodes = [node_info[0]]\n            for children_node in nodes:\n                node_list.append(children_node)\n\n\ndef get_formated_spec_params_code(code: str) ->str: [MASK]\n"}
{"model_name": "gpt-3.5-turbo", "repository": "pygwalker", "full_method_name": "base36encode", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/pygwalker/pygwalker/services/fname_encodings.py", "response": "from typing import List\nfrom math import ceil\nfrom collections import defaultdict\n\ndef base36encode(s: str) -> str:\n    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    base36 = \"\"\n    num = int.from_bytes(s.encode(), byteorder='big')\n    \n    while num > 0:\n        num, remainder = divmod(num, 36)\n        base36 = alphabet[remainder] + base36\n    \n    return base36", "test_code_list": [{"test_code": "def test_base36_encode():\n    assert base36encode('hello') == '5PZCSZU7'\n    assert base36encode('hello world') == 'FUVRSIVVNFRBJWAJO'\n    assert base36encode('') == '0'\n\ntest_base36_encode()\n", "code_start": "", "test_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/pygwalker/tests/test_fname_encodings.py"}], "method_code_mask": "from typing import List\nfrom math import ceil\nfrom collections import defaultdict\n\n\ndef base36encode(s: str) ->str: [MASK]\n"}
{"model_name": "gpt-3.5-turbo", "repository": "pygwalker", "full_method_name": "base36decode", "method_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/pygwalker/pygwalker/services/fname_encodings.py", "response": "from typing import List\nfrom math import ceil\nfrom collections import defaultdict\n\ndef base36decode(s: str) -> str:\n    return str(int(s, 36))", "test_code_list": [{"test_code": "def test_base36_decode():\n    assert base36decode('5PZCSZU7') == 'hello'\n    assert base36decode('FUVRSIVVNFRBJWAJO') == 'hello world'\n    assert base36decode('0') == ''\n\ntest_base36_decode()\n", "code_start": "", "test_path": "/home/zhuqiming2022/workspace/doceb/../srcdata/Visualization/pygwalker/tests/test_fname_encodings.py"}], "method_code_mask": "from typing import List\nfrom math import ceil\nfrom collections import defaultdict\n\n\ndef base36decode(s: str) ->str: [MASK]\n"}
